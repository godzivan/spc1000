;Z80-Assembler		Release 1.6				Page 1
;Source file: spc-1000_cpm22.asm
;Title:       

;SOURCE CODE   LOC   OBJECT CODE   
                                        ;                       1      1 ;**************************************************************
                                        ;                       2      2 ;*
                                        ;                       3      3 ;*             C P / M   version   2 . 2
                                        ;                       4      4 ;*
                                        ;                       5      5 ;*   Reconstructed from memory image on February 27, 1981
                                        ;                       6      6 ;*
                                        ;                       7      7 ;*                by Clark A. Calkins
                                        ;                       8      8 ;*
                                        ;                       9      9 ;**************************************************************
                                        ;                      10     10 ;
                                        ;                      11     11 ;   Set memory limit here. This is the amount of contigeous
                                        ;                      12     12 ; ram starting from 0000. CP/M will reside at the end of this space.
                                        ;                      13     13 ;
MEM EQU 58                              ;003a                  14     14 ;for a 62k system (TS802 TEST - WORKS OK).
                                        ;                      15     15 ;
IOBYTE  EQU 3                           ;0003                  16     16 ;i/o definition byte.
TDRIVE  EQU 4                           ;0004                  17     17 ;current drive name and user number.
ENTRY   EQU 5                           ;0005                  18     18 ;entry point for the cp/m bdos.
TFCB    EQU 5CH                         ;005c                  19     19 ;default file control block.
TBUFF   EQU 80H                         ;0080                  20     20 ;i/o buffer and command line storage.
TBASE   EQU 100H                        ;0100                  21     21 ;transiant program storage area.
                                        ;                      22     22 ;
                                        ;                      23     23 ;   Set control character equates.
                                        ;                      24     24 ;
CNTRLC  EQU 3                           ;0003                  25     25 ;control-c
CNTRLE  EQU 05H                         ;0005                  26     26 ;control-e
BS  EQU 08H                             ;0008                  27     27 ;backspace
TAB EQU 09H                             ;0009                  28     28 ;tab
LF  EQU 0AH                             ;000a                  29     29 ;line feed
FF  EQU 0CH                             ;000c                  30     30 ;form feed
CR  EQU 0DH                             ;000d                  31     31 ;carriage return
CNTRLP  EQU 10H                         ;0010                  32     32 ;control-p
CNTRLR  EQU 12H                         ;0012                  33     33 ;control-r
CNTRLS  EQU 13H                         ;0013                  34     34 ;control-s
CNTRLU  EQU 15H                         ;0015                  35     35 ;control-u
CNTRLX  EQU 18H                         ;0018                  36     36 ;control-x
CNTRLZ  EQU 1AH                         ;001a                  37     37 ;control-z (end-of-file mark)
DEL EQU 7FH                             ;007f                  38     38 ;rubout
                                        ;                      39     39 ;
                                        ;                      40     40 ;   Set origin for CP/M
                                        ;                      41     41 ;
    ORG (MEM-7)*1024                    ;                      42     42 
                                        ;                      43     43 ;
CBASE:  JP  COMMAND                     ;cc00  c3 5c cf        44     44 ;execute command processor (ccp).
    JP  CLEARBUF                        ;cc03  c3 58 cf        45     45 ;entry to empty input buffer before starting ccp.
                                        ;                      46     46 
                                        ;                      47     47 ;
                                        ;                      48     48 ;   Standard cp/m ccp input buffer. Format is (max length),
                                        ;                      49     49 ; (actual length), (char #1), (char #2), (char #3), etc.
                                        ;                      50     50 ;
INBUFF: DEFB    127                     ;cc06  7f              51     51 ;length of input buffer.
    DEFB    0                           ;cc07  00              52     52 ;current length of contents.
    DEFB    'Copyright'                 ;cc08  43 6f 70 79     53     53 
                                        ;cc0c  72 69 67 68     53     54
                                        ;cc10  74              53     55
    DEFB    ' 1979 (c) by Digital Research      ';cc11  20 31 39 37     54     56 
                                        ;cc15  39 20 28 63     54     57
                                        ;cc19  29 20 62 79     54     58
                                        ;cc1d  20 44 69 67     54     59
                                        ;cc21  69 74 61 6c     54     60
                                        ;cc25  20 52 65 73     54     61
                                        ;cc29  65 61 72 63     54     62
                                        ;cc2d  68 20 20 20     54     63
                                        ;cc31  20 20 20        54     64
    DEFB    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;cc34  00 00 00 00     55     65 
                                        ;cc38  00 00 00 00     55     66
                                        ;cc3c  00 00 00 00     55     67
                                        ;cc40  00 00 00 00     55     68
                                        ;cc44  00 00 00 00     55     69
                                        ;cc48  00 00 00        55     70
    DEFB    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;cc4b  00 00 00 00     56     71 
                                        ;cc4f  00 00 00 00     56     72
                                        ;cc53  00 00 00 00     56     73
                                        ;cc57  00 00 00 00     56     74
                                        ;cc5b  00 00 00 00     56     75
                                        ;cc5f  00 00 00        56     76
    DEFB    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;cc62  00 00 00 00     57     77 
                                        ;cc66  00 00 00 00     57     78
                                        ;cc6a  00 00 00 00     57     79
                                        ;cc6e  00 00 00 00     57     80
                                        ;cc72  00 00 00 00     57     81
                                        ;cc76  00 00 00        57     82
    DEFB    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;cc79  00 00 00 00     58     83 
                                        ;cc7d  00 00 00 00     58     84
                                        ;cc81  00 00 00 00     58     85
                                        ;cc85  00 00 00        58     86
INPOINT:DEFW    INBUFF+2                ;cc88  08 cc           59     87 ;input line pointer
NAMEPNT:DEFW    0                       ;cc8a  00 00           60     88 ;input line pointer used for error message. Points to
                                        ;                      61     89 ;			;start of name in error.
                                        ;                      62     90 ;
                                        ;                      63     91 ;   Routine to print (A) on the console. All registers used.
                                        ;                      64     92 ;
PRINT:  LD  E,A                         ;cc8c  5f              65     93 ;setup bdos call.
    LD  C,2                             ;cc8d  0e 02           66     94 
    JP  ENTRY                           ;cc8f  c3 05 00        67     95 
                                        ;                      68     96 ;
                                        ;                      69     97 ;   Routine to print (A) on the console and to save (BC).
                                        ;                      70     98 ;
PRINTB: PUSH    BC                      ;cc92  c5              71     99 
    CALL    PRINT                       ;cc93  cd 8c cc        72    100 
    POP BC                              ;cc96  c1              73    101 
    RET                                 ;cc97  c9              74    102 
                                        ;                      75    103 ;
                                        ;                      76    104 ;   Routine to send a carriage return, line feed combination
                                        ;                      77    105 ; to the console.
                                        ;                      78    106 ;
CRLF:   LD  A,CR                        ;cc98  3e 0d           79    107 
    CALL    PRINTB                      ;cc9a  cd 92 cc        80    108 
    LD  A,LF                            ;cc9d  3e 0a           81    109 
    JP  PRINTB                          ;cc9f  c3 92 cc        82    110 
                                        ;                      83    111 ;
                                        ;                      84    112 ;   Routine to send one space to the console and save (BC).
                                        ;                      85    113 ;
SPACE:  LD  A,' '                       ;cca2  3e 20           86    114 
    JP  PRINTB                          ;cca4  c3 92 cc        87    115 
                                        ;                      88    116 ;
                                        ;                      89    117 ;   Routine to print character string pointed to be (BC) on the
                                        ;                      90    118 ; console. It must terminate with a null byte.
                                        ;                      91    119 ;
PLINE:  PUSH    BC                      ;cca7  c5              92    120 
    CALL    CRLF                        ;cca8  cd 98 cc        93    121 
    POP HL                              ;ccab  e1              94    122 
PLINE2: LD  A,(HL)                      ;ccac  7e              95    123 
    OR  A                               ;ccad  b7              96    124 
    RET Z                               ;ccae  c8              97    125 
    INC HL                              ;ccaf  23              98    126 
    PUSH    HL                          ;ccb0  e5              99    127 
    CALL    PRINT                       ;ccb1  cd 8c cc       100    128 
    POP HL                              ;ccb4  e1             101    129 
    JP  PLINE2                          ;ccb5  c3 ac cc       102    130 
                                        ;                     103    131 ;
                                        ;                     104    132 ;   Routine to reset the disk system.
                                        ;                     105    133 ;
RESDSK: LD  C,13                        ;ccb8  0e 0d          106    134 
    JP  ENTRY                           ;ccba  c3 05 00       107    135 
                                        ;                     108    136 ;
                                        ;                     109    137 ;   Routine to select disk (A).
                                        ;                     110    138 ;
DSKSEL: LD  E,A                         ;ccbd  5f             111    139 
    LD  C,14                            ;ccbe  0e 0e          112    140 
    JP  ENTRY                           ;ccc0  c3 05 00       113    141 
                                        ;                     114    142 ;
                                        ;                     115    143 ;   Routine to call bdos and save the return code. The zero
                                        ;                     116    144 ; flag is set on a return of 0ffh.
                                        ;                     117    145 ;
ENTRY1: CALL    ENTRY                   ;ccc3  cd 05 00       118    146 
    LD  (RTNCODE),A                     ;ccc6  32 ee d3       119    147 ;save return code.
    INC A                               ;ccc9  3c             120    148 ;set zero if 0ffh returned.
    RET                                 ;ccca  c9             121    149 
                                        ;                     122    150 ;
                                        ;                     123    151 ;   Routine to open a file. (DE) must point to the FCB.
                                        ;                     124    152 ;
OPEN:   LD  C,15                        ;cccb  0e 0f          125    153 
    JP  ENTRY1                          ;cccd  c3 c3 cc       126    154 
                                        ;                     127    155 ;
                                        ;                     128    156 ;   Routine to open file at (FCB).
                                        ;                     129    157 ;
OPENFCB:XOR A                           ;ccd0  af             130    158 ;clear the record number byte at fcb+32
    LD  (FCB+32),A                      ;ccd1  32 ed d3       131    159 
    LD  DE,FCB                          ;ccd4  11 cd d3       132    160 
    JP  OPEN                            ;ccd7  c3 cb cc       133    161 
                                        ;                     134    162 ;
                                        ;                     135    163 ;   Routine to close a file. (DE) points to FCB.
                                        ;                     136    164 ;
CLOSE:  LD  C,16                        ;ccda  0e 10          137    165 
    JP  ENTRY1                          ;ccdc  c3 c3 cc       138    166 
                                        ;                     139    167 ;
                                        ;                     140    168 ;   Routine to search for the first file with ambigueous name
                                        ;                     141    169 ; (DE).
                                        ;                     142    170 ;
SRCHFST:LD  C,17                        ;ccdf  0e 11          143    171 
    JP  ENTRY1                          ;cce1  c3 c3 cc       144    172 
                                        ;                     145    173 ;
                                        ;                     146    174 ;   Search for the next ambigeous file name.
                                        ;                     147    175 ;
SRCHNXT:LD  C,18                        ;cce4  0e 12          148    176 
    JP  ENTRY1                          ;cce6  c3 c3 cc       149    177 
                                        ;                     150    178 ;
                                        ;                     151    179 ;   Search for file at (FCB).
                                        ;                     152    180 ;
SRCHFCB:LD  DE,FCB                      ;cce9  11 cd d3       153    181 
    JP  SRCHFST                         ;ccec  c3 df cc       154    182 
                                        ;                     155    183 ;
                                        ;                     156    184 ;   Routine to delete a file pointed to by (DE).
                                        ;                     157    185 ;
DELETE: LD  C,19                        ;ccef  0e 13          158    186 
    JP  ENTRY                           ;ccf1  c3 05 00       159    187 
                                        ;                     160    188 ;
                                        ;                     161    189 ;   Routine to call the bdos and set the zero flag if a zero
                                        ;                     162    190 ; status is returned.
                                        ;                     163    191 ;
ENTRY2: CALL    ENTRY                   ;ccf4  cd 05 00       164    192 
    OR  A                               ;ccf7  b7             165    193 ;set zero flag if appropriate.
    RET                                 ;ccf8  c9             166    194 
                                        ;                     167    195 ;
                                        ;                     168    196 ;   Routine to read the next record from a sequential file.
                                        ;                     169    197 ; (DE) points to the FCB.
                                        ;                     170    198 ;
RDREC:  LD  C,20                        ;ccf9  0e 14          171    199 
    JP  ENTRY2                          ;ccfb  c3 f4 cc       172    200 
                                        ;                     173    201 ;
                                        ;                     174    202 ;   Routine to read file at (FCB).
                                        ;                     175    203 ;
READFCB:LD  DE,FCB                      ;ccfe  11 cd d3       176    204 
    JP  RDREC                           ;cd01  c3 f9 cc       177    205 
                                        ;                     178    206 ;
                                        ;                     179    207 ;   Routine to write the next record of a sequential file.
                                        ;                     180    208 ; (DE) points to the FCB.
                                        ;                     181    209 ;
WRTREC: LD  C,21                        ;cd04  0e 15          182    210 
    JP  ENTRY2                          ;cd06  c3 f4 cc       183    211 
                                        ;                     184    212 ;
                                        ;                     185    213 ;   Routine to create the file pointed to by (DE).
                                        ;                     186    214 ;
CREATE: LD  C,22                        ;cd09  0e 16          187    215 
    JP  ENTRY1                          ;cd0b  c3 c3 cc       188    216 
                                        ;                     189    217 ;
                                        ;                     190    218 ;   Routine to rename the file pointed to by (DE). Note that
                                        ;                     191    219 ; the new name starts at (DE+16).
                                        ;                     192    220 ;
RENAM:  LD  C,23                        ;cd0e  0e 17          193    221 
    JP  ENTRY                           ;cd10  c3 05 00       194    222 
                                        ;                     195    223 ;
                                        ;                     196    224 ;   Get the current user code.
                                        ;                     197    225 ;
GETUSR: LD  E,0FFH                      ;cd13  1e ff          198    226 
                                        ;                     199    227 ;
                                        ;                     200    228 ;   Routne to get or set the current user code.
                                        ;                     201    229 ; If (E) is FF then this is a GET, else it is a SET.
                                        ;                     202    230 ;
GETSETUC: LD    C,32                    ;cd15  0e 20          203    231 
    JP  ENTRY                           ;cd17  c3 05 00       204    232 
                                        ;                     205    233 ;
                                        ;                     206    234 ;   Routine to set the current drive byte at (TDRIVE).
                                        ;                     207    235 ;
SETCDRV:CALL    GETUSR                  ;cd1a  cd 13 cd       208    236 ;get user number
    ADD A,A                             ;cd1d  87             209    237 ;and shift into the upper 4 bits.
    ADD A,A                             ;cd1e  87             210    238 
    ADD A,A                             ;cd1f  87             211    239 
    ADD A,A                             ;cd20  87             212    240 
    LD  HL,CDRIVE                       ;cd21  21 ef d3       213    241 ;now add in the current drive number.
    OR  (HL)                            ;cd24  b6             214    242 
    LD  (TDRIVE),A                      ;cd25  32 04 00       215    243 ;and save.
    RET                                 ;cd28  c9             216    244 
                                        ;                     217    245 ;
                                        ;                     218    246 ;   Move currently active drive down to (TDRIVE).
                                        ;                     219    247 ;
MOVECD: LD  A,(CDRIVE)                  ;cd29  3a ef d3       220    248 
    LD  (TDRIVE),A                      ;cd2c  32 04 00       221    249 
    RET                                 ;cd2f  c9             222    250 
                                        ;                     223    251 ;
                                        ;                     224    252 ;   Routine to convert (A) into upper case ascii. Only letters
                                        ;                     225    253 ; are affected.
                                        ;                     226    254 ;
UPPER:  CP  'a'                         ;cd30  fe 61          227    255 ;check for letters in the range of 'a' to 'z'.
    RET C                               ;cd32  d8             228    256 
    CP  '{'                             ;cd33  fe 7b          229    257 
    RET NC                              ;cd35  d0             230    258 
    AND 5FH                             ;cd36  e6 5f          231    259 ;convert it if found.
    RET                                 ;cd38  c9             232    260 
                                        ;                     233    261 ;
                                        ;                     234    262 ;   Routine to get a line of input. We must check to see if the
                                        ;                     235    263 ; user is in (BATCH) mode. If so, then read the input from file
                                        ;                     236    264 ; ($$$.SUB). At the end, reset to console input.
                                        ;                     237    265 ;
GETINP: LD  A,(BATCH)                   ;cd39  3a ab d3       238    266 ;if =0, then use console input.
    OR  A                               ;cd3c  b7             239    267 
    JP  Z,GETINP1                       ;cd3d  ca 96 cd       240    268 
                                        ;                     241    269 ;
                                        ;                     242    270 ;   Use the submit file ($$$.sub) which is prepared by a
                                        ;                     243    271 ; SUBMIT run. It must be on drive (A) and it will be deleted
                                        ;                     244    272 ; if and error occures (like eof).
                                        ;                     245    273 ;
    LD  A,(CDRIVE)                      ;cd40  3a ef d3       246    274 ;select drive 0 if need be.
    OR  A                               ;cd43  b7             247    275 
    LD  A,0                             ;cd44  3e 00          248    276 ;always use drive A for submit.
    CALL    NZ,DSKSEL                   ;cd46  c4 bd cc       249    277 ;select it if required.
    LD  DE,BATCHFCB                     ;cd49  11 ac d3       250    278 
    CALL    OPEN                        ;cd4c  cd cb cc       251    279 ;look for it.
    JP  Z,GETINP1                       ;cd4f  ca 96 cd       252    280 ;if not there, use normal input.
    LD  A,(BATCHFCB+15)                 ;cd52  3a bb d3       253    281 ;get last record number+1.
    DEC A                               ;cd55  3d             254    282 
    LD  (BATCHFCB+32),A                 ;cd56  32 cc d3       255    283 
    LD  DE,BATCHFCB                     ;cd59  11 ac d3       256    284 
    CALL    RDREC                       ;cd5c  cd f9 cc       257    285 ;read last record.
    JP  NZ,GETINP1                      ;cd5f  c2 96 cd       258    286 ;quit on end of file.
                                        ;                     259    287 ;
                                        ;                     260    288 ;   Move this record into input buffer.
                                        ;                     261    289 ;
    LD  DE,INBUFF+1                     ;cd62  11 07 cc       262    290 
    LD  HL,TBUFF                        ;cd65  21 80 00       263    291 ;data was read into buffer here.
    LD  B,128                           ;cd68  06 80          264    292 ;all 128 characters may be used.
    CALL    HL2DE                       ;cd6a  cd 42 d0       265    293 ;(HL) to (DE), (B) bytes.
    LD  HL,BATCHFCB+14                  ;cd6d  21 ba d3       266    294 
    LD  (HL),0                          ;cd70  36 00          267    295 ;zero out the 's2' byte.
    INC HL                              ;cd72  23             268    296 ;and decrement the record count.
    DEC (HL)                            ;cd73  35             269    297 
    LD  DE,BATCHFCB                     ;cd74  11 ac d3       270    298 ;close the batch file now.
    CALL    CLOSE                       ;cd77  cd da cc       271    299 
    JP  Z,GETINP1                       ;cd7a  ca 96 cd       272    300 ;quit on an error.
    LD  A,(CDRIVE)                      ;cd7d  3a ef d3       273    301 ;re-select previous drive if need be.
    OR  A                               ;cd80  b7             274    302 
    CALL    NZ,DSKSEL                   ;cd81  c4 bd cc       275    303 ;don't do needless selects.
                                        ;                     276    304 ;
                                        ;                     277    305 ;   Print line just read on console.
                                        ;                     278    306 ;
    LD  HL,INBUFF+2                     ;cd84  21 08 cc       279    307 
    CALL    PLINE2                      ;cd87  cd ac cc       280    308 
    CALL    CHKCON                      ;cd8a  cd c2 cd       281    309 ;check console, quit on a key.
    JP  Z,GETINP2                       ;cd8d  ca a7 cd       282    310 ;jump if no key is pressed.
                                        ;                     283    311 ;
                                        ;                     284    312 ;   Terminate the submit job on any keyboard input. Delete this
                                        ;                     285    313 ; file such that it is not re-started and jump to normal keyboard
                                        ;                     286    314 ; input section.
                                        ;                     287    315 ;
    CALL    DELBATCH                    ;cd90  cd dd cd       288    316 ;delete the batch file.
    JP  CMMND1                          ;cd93  c3 82 cf       289    317 ;and restart command input.
                                        ;                     290    318 ;
                                        ;                     291    319 ;   Get here for normal keyboard input. Delete the submit file
                                        ;                     292    320 ; incase there was one.
                                        ;                     293    321 ;
GETINP1:CALL    DELBATCH                ;cd96  cd dd cd       294    322 ;delete file ($$$.sub).
    CALL    SETCDRV                     ;cd99  cd 1a cd       295    323 ;reset active disk.
    LD  C,10                            ;cd9c  0e 0a          296    324 ;get line from console device.
    LD  DE,INBUFF                       ;cd9e  11 06 cc       297    325 
    CALL    ENTRY                       ;cda1  cd 05 00       298    326 
    CALL    MOVECD                      ;cda4  cd 29 cd       299    327 ;reset current drive (again).
                                        ;                     300    328 ;
                                        ;                     301    329 ;   Convert input line to upper case.
                                        ;                     302    330 ;
GETINP2:LD  HL,INBUFF+1                 ;cda7  21 07 cc       303    331 
    LD  B,(HL)                          ;cdaa  46             304    332 ;(B)=character counter.
GETINP3:INC HL                          ;cdab  23             305    333 
    LD  A,B                             ;cdac  78             306    334 ;end of the line?
    OR  A                               ;cdad  b7             307    335 
    JP  Z,GETINP4                       ;cdae  ca ba cd       308    336 
    LD  A,(HL)                          ;cdb1  7e             309    337 ;convert to upper case.
    CALL    UPPER                       ;cdb2  cd 30 cd       310    338 
    LD  (HL),A                          ;cdb5  77             311    339 
    DEC B                               ;cdb6  05             312    340 ;adjust character count.
    JP  GETINP3                         ;cdb7  c3 ab cd       313    341 
GETINP4:LD  (HL),A                      ;cdba  77             314    342 ;add trailing null.
    LD  HL,INBUFF+2                     ;cdbb  21 08 cc       315    343 
    LD  (INPOINT),HL                    ;cdbe  22 88 cc       316    344 ;reset input line pointer.
    RET                                 ;cdc1  c9             317    345 
                                        ;                     318    346 ;
                                        ;                     319    347 ;   Routine to check the console for a key pressed. The zero
                                        ;                     320    348 ; flag is set is none, else the character is returned in (A).
                                        ;                     321    349 ;
CHKCON: LD  C,11                        ;cdc2  0e 0b          322    350 ;check console.
    CALL    ENTRY                       ;cdc4  cd 05 00       323    351 
    OR  A                               ;cdc7  b7             324    352 
    RET Z                               ;cdc8  c8             325    353 ;return if nothing.
    LD  C,1                             ;cdc9  0e 01          326    354 ;else get character.
    CALL    ENTRY                       ;cdcb  cd 05 00       327    355 
    OR  A                               ;cdce  b7             328    356 ;clear zero flag and return.
    RET                                 ;cdcf  c9             329    357 
                                        ;                     330    358 ;
                                        ;                     331    359 ;   Routine to get the currently active drive number.
                                        ;                     332    360 ;
GETDSK: LD  C,25                        ;cdd0  0e 19          333    361 
    JP  ENTRY                           ;cdd2  c3 05 00       334    362 
                                        ;                     335    363 ;
                                        ;                     336    364 ;   Set the stabdard dma address.
                                        ;                     337    365 ;
STDDMA: LD  DE,TBUFF                    ;cdd5  11 80 00       338    366 
                                        ;                     339    367 ;
                                        ;                     340    368 ;   Routine to set the dma address to (DE).
                                        ;                     341    369 ;
DMASET: LD  C,26                        ;cdd8  0e 1a          342    370 
    JP  ENTRY                           ;cdda  c3 05 00       343    371 
                                        ;                     344    372 ;
                                        ;                     345    373 ;  Delete the batch file created by SUBMIT.
                                        ;                     346    374 ;
DELBATCH: LD    HL,BATCH                ;cddd  21 ab d3       347    375 ;is batch active?
    LD  A,(HL)                          ;cde0  7e             348    376 
    OR  A                               ;cde1  b7             349    377 
    RET Z                               ;cde2  c8             350    378 
    LD  (HL),0                          ;cde3  36 00          351    379 ;yes, de-activate it.
    XOR A                               ;cde5  af             352    380 
    CALL    DSKSEL                      ;cde6  cd bd cc       353    381 ;select drive 0 for sure.
    LD  DE,BATCHFCB                     ;cde9  11 ac d3       354    382 ;and delete this file.
    CALL    DELETE                      ;cdec  cd ef cc       355    383 
    LD  A,(CDRIVE)                      ;cdef  3a ef d3       356    384 ;reset current drive.
    JP  DSKSEL                          ;cdf2  c3 bd cc       357    385 
                                        ;                     358    386 ;
                                        ;                     359    387 ;   Check to two strings at (PATTRN1) and (PATTRN2). They must be
                                        ;                     360    388 ; the same or we halt....
                                        ;                     361    389 ;
VERIFY: LD  DE,PATTRN1                  ;cdf5  11 28 cf       362    390 ;these are the serial number bytes.
    LD  HL,PATTRN2                      ;cdf8  21 00 d4       363    391 ;ditto, but how could they be different?
    LD  B,6                             ;cdfb  06 06          364    392 ;6 bytes each.
VERIFY1:LD  A,(DE)                      ;cdfd  1a             365    393 
    CP  (HL)                            ;cdfe  be             366    394 
    JP  NZ,HALT                         ;cdff  c2 cf cf       367    395 ;jump to halt routine.
    INC DE                              ;ce02  13             368    396 
    INC HL                              ;ce03  23             369    397 
    DEC B                               ;ce04  05             370    398 
    JP  NZ,VERIFY1                      ;ce05  c2 fd cd       371    399 
    RET                                 ;ce08  c9             372    400 
                                        ;                     373    401 ;
                                        ;                     374    402 ;   Print back file name with a '?' to indicate a syntax error.
                                        ;                     375    403 ;
SYNERR: CALL    CRLF                    ;ce09  cd 98 cc       376    404 ;end current line.
    LD  HL,(NAMEPNT)                    ;ce0c  2a 8a cc       377    405 ;this points to name in error.
SYNERR1:LD  A,(HL)                      ;ce0f  7e             378    406 ;print it until a space or null is found.
    CP  ' '                             ;ce10  fe 20          379    407 
    JP  Z,SYNERR2                       ;ce12  ca 22 ce       380    408 
    OR  A                               ;ce15  b7             381    409 
    JP  Z,SYNERR2                       ;ce16  ca 22 ce       382    410 
    PUSH    HL                          ;ce19  e5             383    411 
    CALL    PRINT                       ;ce1a  cd 8c cc       384    412 
    POP HL                              ;ce1d  e1             385    413 
    INC HL                              ;ce1e  23             386    414 
    JP  SYNERR1                         ;ce1f  c3 0f ce       387    415 
SYNERR2:LD  A,'?'                       ;ce22  3e 3f          388    416 ;add trailing '?'.
    CALL    PRINT                       ;ce24  cd 8c cc       389    417 
    CALL    CRLF                        ;ce27  cd 98 cc       390    418 
    CALL    DELBATCH                    ;ce2a  cd dd cd       391    419 ;delete any batch file.
    JP  CMMND1                          ;ce2d  c3 82 cf       392    420 ;and restart from console input.
                                        ;                     393    421 ;
                                        ;                     394    422 ;   Check character at (DE) for legal command input. Note that the
                                        ;                     395    423 ; zero flag is set if the character is a delimiter.
                                        ;                     396    424 ;
CHECK:  LD  A,(DE)                      ;ce30  1a             397    425 
    OR  A                               ;ce31  b7             398    426 
    RET Z                               ;ce32  c8             399    427 
    CP  ' '                             ;ce33  fe 20          400    428 ;control characters are not legal here.
    JP  C,SYNERR                        ;ce35  da 09 ce       401    429 
    RET Z                               ;ce38  c8             402    430 ;check for valid delimiter.
    CP  '='                             ;ce39  fe 3d          403    431 
    RET Z                               ;ce3b  c8             404    432 
    CP  '_'                             ;ce3c  fe 5f          405    433 
    RET Z                               ;ce3e  c8             406    434 
    CP  '.'                             ;ce3f  fe 2e          407    435 
    RET Z                               ;ce41  c8             408    436 
    CP  ':'                             ;ce42  fe 3a          409    437 
    RET Z                               ;ce44  c8             410    438 
    CP  '                               ;ce45  fe 3b          411    439 ;'
    RET Z                               ;ce47  c8             412    440 
    CP  '<'                             ;ce48  fe 3c          413    441 
    RET Z                               ;ce4a  c8             414    442 
    CP  '>'                             ;ce4b  fe 3e          415    443 
    RET Z                               ;ce4d  c8             416    444 
    RET                                 ;ce4e  c9             417    445 
                                        ;                     418    446 ;
                                        ;                     419    447 ;   Get the next non-blank character from (DE).
                                        ;                     420    448 ;
NONBLANK: LD    A,(DE)                  ;ce4f  1a             421    449 
    OR  A                               ;ce50  b7             422    450 ;string ends with a null.
    RET Z                               ;ce51  c8             423    451 
    CP  ' '                             ;ce52  fe 20          424    452 
    RET NZ                              ;ce54  c0             425    453 
    INC DE                              ;ce55  13             426    454 
    JP  NONBLANK                        ;ce56  c3 4f ce       427    455 
                                        ;                     428    456 ;
                                        ;                     429    457 ;   Add (HL)=(HL)+(A)
                                        ;                     430    458 ;
ADDHL:  ADD A,L                         ;ce59  85             431    459 
    LD  L,A                             ;ce5a  6f             432    460 
    RET NC                              ;ce5b  d0             433    461 ;take care of any carry.
    INC H                               ;ce5c  24             434    462 
    RET                                 ;ce5d  c9             435    463 
                                        ;                     436    464 ;
                                        ;                     437    465 ;   Convert the first name in (FCB).
                                        ;                     438    466 ;
CONVFST:LD  A,0                         ;ce5e  3e 00          439    467 
                                        ;                     440    468 ;
                                        ;                     441    469 ;   Format a file name (convert * to '?', etc.). On return,
                                        ;                     442    470 ; (A)=0 is an unambigeous name was specified. Enter with (A) equal to
                                        ;                     443    471 ; the position within the fcb for the name (either 0 or 16).
                                        ;                     444    472 ;
CONVERT:LD  HL,FCB                      ;ce60  21 cd d3       445    473 
    CALL    ADDHL                       ;ce63  cd 59 ce       446    474 
    PUSH    HL                          ;ce66  e5             447    475 
    PUSH    HL                          ;ce67  e5             448    476 
    XOR A                               ;ce68  af             449    477 
    LD  (CHGDRV),A                      ;ce69  32 f0 d3       450    478 ;initialize drive change flag.
    LD  HL,(INPOINT)                    ;ce6c  2a 88 cc       451    479 ;set (HL) as pointer into input line.
    EX  DE,HL                           ;ce6f  eb             452    480 
    CALL    NONBLANK                    ;ce70  cd 4f ce       453    481 ;get next non-blank character.
    EX  DE,HL                           ;ce73  eb             454    482 
    LD  (NAMEPNT),HL                    ;ce74  22 8a cc       455    483 ;save pointer here for any error message.
    EX  DE,HL                           ;ce77  eb             456    484 
    POP HL                              ;ce78  e1             457    485 
    LD  A,(DE)                          ;ce79  1a             458    486 ;get first character.
    OR  A                               ;ce7a  b7             459    487 
    JP  Z,CONVRT1                       ;ce7b  ca 89 ce       460    488 
    SBC A,'A'-1                         ;ce7e  de 40          461    489 ;might be a drive name, convert to binary.
    LD  B,A                             ;ce80  47             462    490 ;and save.
    INC DE                              ;ce81  13             463    491 ;check next character for a ':'.
    LD  A,(DE)                          ;ce82  1a             464    492 
    CP  ':'                             ;ce83  fe 3a          465    493 
    JP  Z,CONVRT2                       ;ce85  ca 90 ce       466    494 
    DEC DE                              ;ce88  1b             467    495 ;nope, move pointer back to the start of the line.
CONVRT1:LD  A,(CDRIVE)                  ;ce89  3a ef d3       468    496 
    LD  (HL),A                          ;ce8c  77             469    497 
    JP  CONVRT3                         ;ce8d  c3 96 ce       470    498 
CONVRT2:LD  A,B                         ;ce90  78             471    499 
    LD  (CHGDRV),A                      ;ce91  32 f0 d3       472    500 ;set change in drives flag.
    LD  (HL),B                          ;ce94  70             473    501 
    INC DE                              ;ce95  13             474    502 
                                        ;                     475    503 ;
                                        ;                     476    504 ;   Convert the basic file name.
                                        ;                     477    505 ;
CONVRT3:LD  B,08H                       ;ce96  06 08          478    506 
CONVRT4:CALL    CHECK                   ;ce98  cd 30 ce       479    507 
    JP  Z,CONVRT8                       ;ce9b  ca b9 ce       480    508 
    INC HL                              ;ce9e  23             481    509 
    CP  '*'                             ;ce9f  fe 2a          482    510 ;note that an '*' will fill the remaining
    JP  NZ,CONVRT5                      ;cea1  c2 a9 ce       483    511 ;field with '?'.
    LD  (HL),'?'                        ;cea4  36 3f          484    512 
    JP  CONVRT6                         ;cea6  c3 ab ce       485    513 
CONVRT5:LD  (HL),A                      ;cea9  77             486    514 
    INC DE                              ;ceaa  13             487    515 
CONVRT6:DEC B                           ;ceab  05             488    516 
    JP  NZ,CONVRT4                      ;ceac  c2 98 ce       489    517 
CONVRT7:CALL    CHECK                   ;ceaf  cd 30 ce       490    518 ;get next delimiter.
    JP  Z,GETEXT                        ;ceb2  ca c0 ce       491    519 
    INC DE                              ;ceb5  13             492    520 
    JP  CONVRT7                         ;ceb6  c3 af ce       493    521 
CONVRT8:INC HL                          ;ceb9  23             494    522 ;blank fill the file name.
    LD  (HL),' '                        ;ceba  36 20          495    523 
    DEC B                               ;cebc  05             496    524 
    JP  NZ,CONVRT8                      ;cebd  c2 b9 ce       497    525 
                                        ;                     498    526 ;
                                        ;                     499    527 ;   Get the extension and convert it.
                                        ;                     500    528 ;
GETEXT: LD  B,03H                       ;cec0  06 03          501    529 
    CP  '.'                             ;cec2  fe 2e          502    530 
    JP  NZ,GETEXT5                      ;cec4  c2 e9 ce       503    531 
    INC DE                              ;cec7  13             504    532 
GETEXT1:CALL    CHECK                   ;cec8  cd 30 ce       505    533 
    JP  Z,GETEXT5                       ;cecb  ca e9 ce       506    534 
    INC HL                              ;cece  23             507    535 
    CP  '*'                             ;cecf  fe 2a          508    536 
    JP  NZ,GETEXT2                      ;ced1  c2 d9 ce       509    537 
    LD  (HL),'?'                        ;ced4  36 3f          510    538 
    JP  GETEXT3                         ;ced6  c3 db ce       511    539 
GETEXT2:LD  (HL),A                      ;ced9  77             512    540 
    INC DE                              ;ceda  13             513    541 
GETEXT3:DEC B                           ;cedb  05             514    542 
    JP  NZ,GETEXT1                      ;cedc  c2 c8 ce       515    543 
GETEXT4:CALL    CHECK                   ;cedf  cd 30 ce       516    544 
    JP  Z,GETEXT6                       ;cee2  ca f0 ce       517    545 
    INC DE                              ;cee5  13             518    546 
    JP  GETEXT4                         ;cee6  c3 df ce       519    547 
GETEXT5:INC HL                          ;cee9  23             520    548 
    LD  (HL),' '                        ;ceea  36 20          521    549 
    DEC B                               ;ceec  05             522    550 
    JP  NZ,GETEXT5                      ;ceed  c2 e9 ce       523    551 
GETEXT6:LD  B,3                         ;cef0  06 03          524    552 
GETEXT7:INC HL                          ;cef2  23             525    553 
    LD  (HL),0                          ;cef3  36 00          526    554 
    DEC B                               ;cef5  05             527    555 
    JP  NZ,GETEXT7                      ;cef6  c2 f2 ce       528    556 
    EX  DE,HL                           ;cef9  eb             529    557 
    LD  (INPOINT),HL                    ;cefa  22 88 cc       530    558 ;save input line pointer.
    POP HL                              ;cefd  e1             531    559 
                                        ;                     532    560 ;
                                        ;                     533    561 ;   Check to see if this is an ambigeous file name specification.
                                        ;                     534    562 ; Set the (A) register to non zero if it is.
                                        ;                     535    563 ;
    LD  BC,11                           ;cefe  01 0b 00       536    564 ;set name length.
GETEXT8:INC HL                          ;cf01  23             537    565 
    LD  A,(HL)                          ;cf02  7e             538    566 
    CP  '?'                             ;cf03  fe 3f          539    567 ;any question marks?
    JP  NZ,GETEXT9                      ;cf05  c2 09 cf       540    568 
    INC B                               ;cf08  04             541    569 ;count them.
GETEXT9:DEC C                           ;cf09  0d             542    570 
    JP  NZ,GETEXT8                      ;cf0a  c2 01 cf       543    571 
    LD  A,B                             ;cf0d  78             544    572 
    OR  A                               ;cf0e  b7             545    573 
    RET                                 ;cf0f  c9             546    574 
                                        ;                     547    575 ;
                                        ;                     548    576 ;   CP/M command table. Note commands can be either 3 or 4 characters long.
                                        ;                     549    577 ;
NUMCMDS EQU 6                           ;0006                 550    578 ;number of commands
CMDTBL: DEFB    'DIR '                  ;cf10  44 49 52 20    551    579 
    DEFB    'ERA '                      ;cf14  45 52 41 20    552    580 
    DEFB    'TYPE'                      ;cf18  54 59 50 45    553    581 
    DEFB    'SAVE'                      ;cf1c  53 41 56 45    554    582 
    DEFB    'REN '                      ;cf20  52 45 4e 20    555    583 
    DEFB    'USER'                      ;cf24  55 53 45 52    556    584 
                                        ;                     557    585 ;
                                        ;                     558    586 ;   The following six bytes must agree with those at (PATTRN2)
                                        ;                     559    587 ; or cp/m will HALT. Why?
                                        ;                     560    588 ;
PATTRN1:DEFB    0,22,0,0,0,0            ;cf28  00 16 00 00    561    589 ;(* serial number bytes *).
                                        ;cf2c  00 00          561    590
                                        ;                     562    591 ;
                                        ;                     563    592 ;   Search the command table for a match with what has just
                                        ;                     564    593 ; been entered. If a match is found, then we jump to the
                                        ;                     565    594 ; proper section. Else jump to (UNKNOWN).
                                        ;                     566    595 ; On return, the (C) register is set to the command number
                                        ;                     567    596 ; that matched (or NUMCMDS+1 if no match).
                                        ;                     568    597 ;
SEARCH: LD  HL,CMDTBL                   ;cf2e  21 10 cf       569    598 
    LD  C,0                             ;cf31  0e 00          570    599 
SEARCH1:LD  A,C                         ;cf33  79             571    600 
    CP  NUMCMDS                         ;cf34  fe 06          572    601 ;this commands exists.
    RET NC                              ;cf36  d0             573    602 
    LD  DE,FCB+1                        ;cf37  11 ce d3       574    603 ;check this one.
    LD  B,4                             ;cf3a  06 04          575    604 ;max command length.
SEARCH2:LD  A,(DE)                      ;cf3c  1a             576    605 
    CP  (HL)                            ;cf3d  be             577    606 
    JP  NZ,SEARCH3                      ;cf3e  c2 4f cf       578    607 ;not a match.
    INC DE                              ;cf41  13             579    608 
    INC HL                              ;cf42  23             580    609 
    DEC B                               ;cf43  05             581    610 
    JP  NZ,SEARCH2                      ;cf44  c2 3c cf       582    611 
    LD  A,(DE)                          ;cf47  1a             583    612 ;allow a 3 character command to match.
    CP  ' '                             ;cf48  fe 20          584    613 
    JP  NZ,SEARCH4                      ;cf4a  c2 54 cf       585    614 
    LD  A,C                             ;cf4d  79             586    615 ;set return register for this command.
    RET                                 ;cf4e  c9             587    616 
SEARCH3:INC HL                          ;cf4f  23             588    617 
    DEC B                               ;cf50  05             589    618 
    JP  NZ,SEARCH3                      ;cf51  c2 4f cf       590    619 
SEARCH4:INC C                           ;cf54  0c             591    620 
    JP  SEARCH1                         ;cf55  c3 33 cf       592    621 
                                        ;                     593    622 ;
                                        ;                     594    623 ;   Set the input buffer to empty and then start the command
                                        ;                     595    624 ; processor (ccp).
                                        ;                     596    625 ;
CLEARBUF: XOR   A                       ;cf58  af             597    626 
    LD  (INBUFF+1),A                    ;cf59  32 07 cc       598    627 ;second byte is actual length.
                                        ;                     599    628 ;
                                        ;                     600    629 ;**************************************************************
                                        ;                     601    630 ;*
                                        ;                     602    631 ;*
                                        ;                     603    632 ;* C C P  -   C o n s o l e   C o m m a n d   P r o c e s s o r
                                        ;                     604    633 ;*
                                        ;                     605    634 ;**************************************************************
                                        ;                     606    635 ;*
COMMAND:LD  SP,CCPSTACK                 ;cf5c  31 ab d3       607    636 ;setup stack area.
    PUSH    BC                          ;cf5f  c5             608    637 ;note that (C) should be equal to:
    LD  A,C                             ;cf60  79             609    638 ;(uuuudddd) where 'uuuu' is the user number
    RRA                                 ;cf61  1f             610    639 ;and 'dddd' is the drive number.
    RRA                                 ;cf62  1f             611    640 
    RRA                                 ;cf63  1f             612    641 
    RRA                                 ;cf64  1f             613    642 
    AND 0FH                             ;cf65  e6 0f          614    643 ;isolate the user number.
    LD  E,A                             ;cf67  5f             615    644 
    CALL    GETSETUC                    ;cf68  cd 15 cd       616    645 ;and set it.
    CALL    RESDSK                      ;cf6b  cd b8 cc       617    646 ;reset the disk system.
    LD  (BATCH),A                       ;cf6e  32 ab d3       618    647 ;clear batch mode flag.
    POP BC                              ;cf71  c1             619    648 
    LD  A,C                             ;cf72  79             620    649 
    AND 0FH                             ;cf73  e6 0f          621    650 ;isolate the drive number.
    LD  (CDRIVE),A                      ;cf75  32 ef d3       622    651 ;and save.
    CALL    DSKSEL                      ;cf78  cd bd cc       623    652 ;...and select.
    LD  A,(INBUFF+1)                    ;cf7b  3a 07 cc       624    653 
    OR  A                               ;cf7e  b7             625    654 ;anything in input buffer already?
    JP  NZ,CMMND2                       ;cf7f  c2 98 cf       626    655 ;yes, we just process it.
                                        ;                     627    656 ;
                                        ;                     628    657 ;   Entry point to get a command line from the console.
                                        ;                     629    658 ;
CMMND1: LD  SP,CCPSTACK                 ;cf82  31 ab d3       630    659 ;set stack straight.
    CALL    CRLF                        ;cf85  cd 98 cc       631    660 ;start a new line on the screen.
    CALL    GETDSK                      ;cf88  cd d0 cd       632    661 ;get current drive.
    ADD A,'a'                           ;cf8b  c6 61          633    662 
    CALL    PRINT                       ;cf8d  cd 8c cc       634    663 ;print current drive.
    LD  A,'>'                           ;cf90  3e 3e          635    664 
    CALL    PRINT                       ;cf92  cd 8c cc       636    665 ;and add prompt.
    CALL    GETINP                      ;cf95  cd 39 cd       637    666 ;get line from user.
                                        ;                     638    667 ;
                                        ;                     639    668 ;   Process command line here.
                                        ;                     640    669 ;
CMMND2: LD  DE,TBUFF                    ;cf98  11 80 00       641    670 
    CALL    DMASET                      ;cf9b  cd d8 cd       642    671 ;set standard dma address.
    CALL    GETDSK                      ;cf9e  cd d0 cd       643    672 
    LD  (CDRIVE),A                      ;cfa1  32 ef d3       644    673 ;set current drive.
    CALL    CONVFST                     ;cfa4  cd 5e ce       645    674 ;convert name typed in.
    CALL    NZ,SYNERR                   ;cfa7  c4 09 ce       646    675 ;wild cards are not allowed.
    LD  A,(CHGDRV)                      ;cfaa  3a f0 d3       647    676 ;if a change in drives was indicated,
    OR  A                               ;cfad  b7             648    677 ;then treat this as an unknown command
    JP  NZ,UNKNOWN                      ;cfae  c2 a5 d2       649    678 ;which gets executed.
    CALL    SEARCH                      ;cfb1  cd 2e cf       650    679 ;else search command table for a match.
                                        ;                     651    680 ;
                                        ;                     652    681 ;   Note that an unknown command returns
                                        ;                     653    682 ; with (A) pointing to the last address
                                        ;                     654    683 ; in our table which is (UNKNOWN).
                                        ;                     655    684 ;
    LD  HL,CMDADR                       ;cfb4  21 c1 cf       656    685 ;now, look thru our address table for command (A).
    LD  E,A                             ;cfb7  5f             657    686 ;set (DE) to command number.
    LD  D,0                             ;cfb8  16 00          658    687 
    ADD HL,DE                           ;cfba  19             659    688 
    ADD HL,DE                           ;cfbb  19             660    689 ;(HL)=(CMDADR)+2*(command number).
    LD  A,(HL)                          ;cfbc  7e             661    690 ;now pick out this address.
    INC HL                              ;cfbd  23             662    691 
    LD  H,(HL)                          ;cfbe  66             663    692 
    LD  L,A                             ;cfbf  6f             664    693 
    JP  (HL)                            ;cfc0  e9             665    694 ;now execute it.
                                        ;                     666    695 ;
                                        ;                     667    696 ;   CP/M command address table.
                                        ;                     668    697 ;
CMDADR: DEFW    DIRECT,ERASE,TYPE,SAVE  ;cfc1  77 d0 1f d1    669    698 
                                        ;cfc5  5d d1 ad d1    669    699
    DEFW    RENAME,USER,UNKNOWN         ;cfc9  10 d2 8e d2    670    700 
                                        ;cfcd  a5 d2          670    701
                                        ;                     671    702 ;
                                        ;                     672    703 ;   Halt the system. Reason for this is unknown at present.
                                        ;                     673    704 ;
HALT:   LD  HL,76F3H                    ;cfcf  21 f3 76       674    705 ;'DI HLT' instructions.
    LD  (CBASE),HL                      ;cfd2  22 00 cc       675    706 
    LD  HL,CBASE                        ;cfd5  21 00 cc       676    707 
    JP  (HL)                            ;cfd8  e9             677    708 
                                        ;                     678    709 ;
                                        ;                     679    710 ;   Read error while TYPEing a file.
                                        ;                     680    711 ;
RDERROR:LD  BC,RDERR                    ;cfd9  01 df cf       681    712 
    JP  PLINE                           ;cfdc  c3 a7 cc       682    713 
RDERR:  DEFB    'Read error',0          ;cfdf  52 65 61 64    683    714 
                                        ;cfe3  20 65 72 72    683    715
                                        ;cfe7  6f 72 00       683    716
                                        ;                     684    717 ;
                                        ;                     685    718 ;   Required file was not located.
                                        ;                     686    719 ;
NONE:   LD  BC,NOFILE                   ;cfea  01 f0 cf       687    720 
    JP  PLINE                           ;cfed  c3 a7 cc       688    721 
NOFILE: DEFB    'No file',0             ;cff0  4e 6f 20 66    689    722 
                                        ;cff4  69 6c 65 00    689    723
                                        ;                     690    724 ;
                                        ;                     691    725 ;   Decode a command of the form 'A>filename number{ filename}.
                                        ;                     692    726 ; Note that a drive specifier is not allowed on the first file
                                        ;                     693    727 ; name. On return, the number is in register (A). Any error
                                        ;                     694    728 ; causes 'filename?' to be printed and the command is aborted.
                                        ;                     695    729 ;
DECODE: CALL    CONVFST                 ;cff8  cd 5e ce       696    730 ;convert filename.
    LD  A,(CHGDRV)                      ;cffb  3a f0 d3       697    731 ;do not allow a drive to be specified.
    OR  A                               ;cffe  b7             698    732 
    JP  NZ,SYNERR                       ;cfff  c2 09 ce       699    733 
    LD  HL,FCB+1                        ;d002  21 ce d3       700    734 ;convert number now.
    LD  BC,11                           ;d005  01 0b 00       701    735 ;(B)=sum register, (C)=max digit count.
DECODE1:LD  A,(HL)                      ;d008  7e             702    736 
    CP  ' '                             ;d009  fe 20          703    737 ;a space terminates the numeral.
    JP  Z,DECODE3                       ;d00b  ca 33 d0       704    738 
    INC HL                              ;d00e  23             705    739 
    SUB '0'                             ;d00f  d6 30          706    740 ;make binary from ascii.
    CP  10                              ;d011  fe 0a          707    741 ;legal digit?
    JP  NC,SYNERR                       ;d013  d2 09 ce       708    742 
    LD  D,A                             ;d016  57             709    743 ;yes, save it in (D).
    LD  A,B                             ;d017  78             710    744 ;compute (B)=(B)*10 and check for overflow.
    AND 0E0H                            ;d018  e6 e0          711    745 
    JP  NZ,SYNERR                       ;d01a  c2 09 ce       712    746 
    LD  A,B                             ;d01d  78             713    747 
    RLCA                                ;d01e  07             714    748 
    RLCA                                ;d01f  07             715    749 
    RLCA                                ;d020  07             716    750 ;(A)=(B)*8
    ADD A,B                             ;d021  80             717    751 ;.......*9
    JP  C,SYNERR                        ;d022  da 09 ce       718    752 
    ADD A,B                             ;d025  80             719    753 ;.......*10
    JP  C,SYNERR                        ;d026  da 09 ce       720    754 
    ADD A,D                             ;d029  82             721    755 ;add in new digit now.
DECODE2:JP  C,SYNERR                    ;d02a  da 09 ce       722    756 
    LD  B,A                             ;d02d  47             723    757 ;and save result.
    DEC C                               ;d02e  0d             724    758 ;only look at 11 digits.
    JP  NZ,DECODE1                      ;d02f  c2 08 d0       725    759 
    RET                                 ;d032  c9             726    760 
DECODE3:LD  A,(HL)                      ;d033  7e             727    761 ;spaces must follow (why?).
    CP  ' '                             ;d034  fe 20          728    762 
    JP  NZ,SYNERR                       ;d036  c2 09 ce       729    763 
    INC HL                              ;d039  23             730    764 
DECODE4:DEC C                           ;d03a  0d             731    765 
    JP  NZ,DECODE3                      ;d03b  c2 33 d0       732    766 
    LD  A,B                             ;d03e  78             733    767 ;set (A)=the numeric value entered.
    RET                                 ;d03f  c9             734    768 
                                        ;                     735    769 ;
                                        ;                     736    770 ;   Move 3 bytes from (HL) to (DE). Note that there is only
                                        ;                     737    771 ; one reference to this at (A2D5h).
                                        ;                     738    772 ;
MOVE3:  LD  B,3                         ;d040  06 03          739    773 
                                        ;                     740    774 ;
                                        ;                     741    775 ;   Move (B) bytes from (HL) to (DE).
                                        ;                     742    776 ;
HL2DE:  LD  A,(HL)                      ;d042  7e             743    777 
    LD  (DE),A                          ;d043  12             744    778 
    INC HL                              ;d044  23             745    779 
    INC DE                              ;d045  13             746    780 
    DEC B                               ;d046  05             747    781 
    JP  NZ,HL2DE                        ;d047  c2 42 d0       748    782 
    RET                                 ;d04a  c9             749    783 
                                        ;                     750    784 ;
                                        ;                     751    785 ;   Compute (HL)=(TBUFF)+(A)+(C) and get the byte that's here.
                                        ;                     752    786 ;
EXTRACT:LD  HL,TBUFF                    ;d04b  21 80 00       753    787 
    ADD A,C                             ;d04e  81             754    788 
    CALL    ADDHL                       ;d04f  cd 59 ce       755    789 
    LD  A,(HL)                          ;d052  7e             756    790 
    RET                                 ;d053  c9             757    791 
                                        ;                     758    792 ;
                                        ;                     759    793 ;  Check drive specified. If it means a change, then the new
                                        ;                     760    794 ; drive will be selected. In any case, the drive byte of the
                                        ;                     761    795 ; fcb will be set to null (means use current drive).
                                        ;                     762    796 ;
DSELECT:XOR A                           ;d054  af             763    797 ;null out first byte of fcb.
    LD  (FCB),A                         ;d055  32 cd d3       764    798 
    LD  A,(CHGDRV)                      ;d058  3a f0 d3       765    799 ;a drive change indicated?
    OR  A                               ;d05b  b7             766    800 
    RET Z                               ;d05c  c8             767    801 
    DEC A                               ;d05d  3d             768    802 ;yes, is it the same as the current drive?
    LD  HL,CDRIVE                       ;d05e  21 ef d3       769    803 
    CP  (HL)                            ;d061  be             770    804 
    RET Z                               ;d062  c8             771    805 
    JP  DSKSEL                          ;d063  c3 bd cc       772    806 ;no. Select it then.
                                        ;                     773    807 ;
                                        ;                     774    808 ;   Check the drive selection and reset it to the previous
                                        ;                     775    809 ; drive if it was changed for the preceeding command.
                                        ;                     776    810 ;
RESETDR:LD  A,(CHGDRV)                  ;d066  3a f0 d3       777    811 ;drive change indicated?
    OR  A                               ;d069  b7             778    812 
    RET Z                               ;d06a  c8             779    813 
    DEC A                               ;d06b  3d             780    814 ;yes, was it a different drive?
    LD  HL,CDRIVE                       ;d06c  21 ef d3       781    815 
    CP  (HL)                            ;d06f  be             782    816 
    RET Z                               ;d070  c8             783    817 
    LD  A,(CDRIVE)                      ;d071  3a ef d3       784    818 ;yes, re-select our old drive.
    JP  DSKSEL                          ;d074  c3 bd cc       785    819 
                                        ;                     786    820 ;
                                        ;                     787    821 ;**************************************************************
                                        ;                     788    822 ;*
                                        ;                     789    823 ;*           D I R E C T O R Y   C O M M A N D
                                        ;                     790    824 ;*
                                        ;                     791    825 ;**************************************************************
                                        ;                     792    826 ;
DIRECT: CALL    CONVFST                 ;d077  cd 5e ce       793    827 ;convert file name.
    CALL    DSELECT                     ;d07a  cd 54 d0       794    828 ;select indicated drive.
    LD  HL,FCB+1                        ;d07d  21 ce d3       795    829 ;was any file indicated?
    LD  A,(HL)                          ;d080  7e             796    830 
    CP  ' '                             ;d081  fe 20          797    831 
    JP  NZ,DIRECT2                      ;d083  c2 8f d0       798    832 
    LD  B,11                            ;d086  06 0b          799    833 ;no. Fill field with '?' - same as *.*.
DIRECT1:LD  (HL),'?'                    ;d088  36 3f          800    834 
    INC HL                              ;d08a  23             801    835 
    DEC B                               ;d08b  05             802    836 
    JP  NZ,DIRECT1                      ;d08c  c2 88 d0       803    837 
DIRECT2:LD  E,0                         ;d08f  1e 00          804    838 ;set initial cursor position.
    PUSH    DE                          ;d091  d5             805    839 
    CALL    SRCHFCB                     ;d092  cd e9 cc       806    840 ;get first file name.
    CALL    Z,NONE                      ;d095  cc ea cf       807    841 ;none found at all?
DIRECT3:JP  Z,DIRECT9                   ;d098  ca 1b d1       808    842 ;terminate if no more names.
    LD  A,(RTNCODE)                     ;d09b  3a ee d3       809    843 ;get file's position in segment (0-3).
    RRCA                                ;d09e  0f             810    844 
    RRCA                                ;d09f  0f             811    845 
    RRCA                                ;d0a0  0f             812    846 
    AND 60H                             ;d0a1  e6 60          813    847 ;(A)=position*32
    LD  C,A                             ;d0a3  4f             814    848 
    LD  A,10                            ;d0a4  3e 0a          815    849 
    CALL    EXTRACT                     ;d0a6  cd 4b d0       816    850 ;extract the tenth entry in fcb.
    RLA                                 ;d0a9  17             817    851 ;check system file status bit.
    JP  C,DIRECT8                       ;d0aa  da 0f d1       818    852 ;we don't list them.
    POP DE                              ;d0ad  d1             819    853 
    LD  A,E                             ;d0ae  7b             820    854 ;bump name count.
    INC E                               ;d0af  1c             821    855 
    PUSH    DE                          ;d0b0  d5             822    856 
    AND 03H                             ;d0b1  e6 03          823    857 ;at end of line?
    PUSH    AF                          ;d0b3  f5             824    858 
    JP  NZ,DIRECT4                      ;d0b4  c2 cc d0       825    859 
    CALL    CRLF                        ;d0b7  cd 98 cc       826    860 ;yes, end this line and start another.
    PUSH    BC                          ;d0ba  c5             827    861 
    CALL    GETDSK                      ;d0bb  cd d0 cd       828    862 ;start line with ('A:').
    POP BC                              ;d0be  c1             829    863 
    ADD A,'A'                           ;d0bf  c6 41          830    864 
    CALL    PRINTB                      ;d0c1  cd 92 cc       831    865 
    LD  A,':'                           ;d0c4  3e 3a          832    866 
    CALL    PRINTB                      ;d0c6  cd 92 cc       833    867 
    JP  DIRECT5                         ;d0c9  c3 d4 d0       834    868 
DIRECT4:CALL    SPACE                   ;d0cc  cd a2 cc       835    869 ;add seperator between file names.
    LD  A,':'                           ;d0cf  3e 3a          836    870 
    CALL    PRINTB                      ;d0d1  cd 92 cc       837    871 
DIRECT5:CALL    SPACE                   ;d0d4  cd a2 cc       838    872 
    LD  B,1                             ;d0d7  06 01          839    873 ;'extract' each file name character at a time.
DIRECT6:LD  A,B                         ;d0d9  78             840    874 
    CALL    EXTRACT                     ;d0da  cd 4b d0       841    875 
    AND 7FH                             ;d0dd  e6 7f          842    876 ;strip bit 7 (status bit).
    CP  ' '                             ;d0df  fe 20          843    877 ;are we at the end of the name?
    JP  NZ,DRECT65                      ;d0e1  c2 f9 d0       844    878 
    POP AF                              ;d0e4  f1             845    879 ;yes, don't print spaces at the end of a line.
    PUSH    AF                          ;d0e5  f5             846    880 
    CP  3                               ;d0e6  fe 03          847    881 
    JP  NZ,DRECT63                      ;d0e8  c2 f7 d0       848    882 
    LD  A,9                             ;d0eb  3e 09          849    883 ;first check for no extension.
    CALL    EXTRACT                     ;d0ed  cd 4b d0       850    884 
    AND 7FH                             ;d0f0  e6 7f          851    885 
    CP  ' '                             ;d0f2  fe 20          852    886 
    JP  Z,DIRECT7                       ;d0f4  ca 0e d1       853    887 ;don't print spaces.
DRECT63:LD  A,' '                       ;d0f7  3e 20          854    888 ;else print them.
DRECT65:CALL    PRINTB                  ;d0f9  cd 92 cc       855    889 
    INC B                               ;d0fc  04             856    890 ;bump to next character psoition.
    LD  A,B                             ;d0fd  78             857    891 
    CP  12                              ;d0fe  fe 0c          858    892 ;end of the name?
    JP  NC,DIRECT7                      ;d100  d2 0e d1       859    893 
    CP  9                               ;d103  fe 09          860    894 ;nope, starting extension?
    JP  NZ,DIRECT6                      ;d105  c2 d9 d0       861    895 
    CALL    SPACE                       ;d108  cd a2 cc       862    896 ;yes, add seperating space.
    JP  DIRECT6                         ;d10b  c3 d9 d0       863    897 
DIRECT7:POP AF                          ;d10e  f1             864    898 ;get the next file name.
DIRECT8:CALL    CHKCON                  ;d10f  cd c2 cd       865    899 ;first check console, quit on anything.
    JP  NZ,DIRECT9                      ;d112  c2 1b d1       866    900 
    CALL    SRCHNXT                     ;d115  cd e4 cc       867    901 ;get next name.
    JP  DIRECT3                         ;d118  c3 98 d0       868    902 ;and continue with our list.
DIRECT9:POP DE                          ;d11b  d1             869    903 ;restore the stack and return to command level.
    JP  GETBACK                         ;d11c  c3 86 d3       870    904 
                                        ;                     871    905 ;
                                        ;                     872    906 ;**************************************************************
                                        ;                     873    907 ;*
                                        ;                     874    908 ;*                E R A S E   C O M M A N D
                                        ;                     875    909 ;*
                                        ;                     876    910 ;**************************************************************
                                        ;                     877    911 ;
ERASE:  CALL    CONVFST                 ;d11f  cd 5e ce       878    912 ;convert file name.
    CP  11                              ;d122  fe 0b          879    913 ;was '*.*' entered?
    JP  NZ,ERASE1                       ;d124  c2 42 d1       880    914 
    LD  BC,YESNO                        ;d127  01 52 d1       881    915 ;yes, ask for confirmation.
    CALL    PLINE                       ;d12a  cd a7 cc       882    916 
    CALL    GETINP                      ;d12d  cd 39 cd       883    917 
    LD  HL,INBUFF+1                     ;d130  21 07 cc       884    918 
    DEC (HL)                            ;d133  35             885    919 ;must be exactly 'y'.
    JP  NZ,CMMND1                       ;d134  c2 82 cf       886    920 
    INC HL                              ;d137  23             887    921 
    LD  A,(HL)                          ;d138  7e             888    922 
    CP  'Y'                             ;d139  fe 59          889    923 
    JP  NZ,CMMND1                       ;d13b  c2 82 cf       890    924 
    INC HL                              ;d13e  23             891    925 
    LD  (INPOINT),HL                    ;d13f  22 88 cc       892    926 ;save input line pointer.
ERASE1: CALL    DSELECT                 ;d142  cd 54 d0       893    927 ;select desired disk.
    LD  DE,FCB                          ;d145  11 cd d3       894    928 
    CALL    DELETE                      ;d148  cd ef cc       895    929 ;delete the file.
    INC A                               ;d14b  3c             896    930 
    CALL    Z,NONE                      ;d14c  cc ea cf       897    931 ;not there?
    JP  GETBACK                         ;d14f  c3 86 d3       898    932 ;return to command level now.
YESNO:  DEFB    'All (y/n)?',0          ;d152  41 6c 6c 20    899    933 
                                        ;d156  28 79 2f 6e    899    934
                                        ;d15a  29 3f 00       899    935
                                        ;                     900    936 ;
                                        ;                     901    937 ;**************************************************************
                                        ;                     902    938 ;*
                                        ;                     903    939 ;*            T Y P E   C O M M A N D
                                        ;                     904    940 ;*
                                        ;                     905    941 ;**************************************************************
                                        ;                     906    942 ;
TYPE:   CALL    CONVFST                 ;d15d  cd 5e ce       907    943 ;convert file name.
    JP  NZ,SYNERR                       ;d160  c2 09 ce       908    944 ;wild cards not allowed.
    CALL    DSELECT                     ;d163  cd 54 d0       909    945 ;select indicated drive.
    CALL    OPENFCB                     ;d166  cd d0 cc       910    946 ;open the file.
    JP  Z,TYPE5                         ;d169  ca a7 d1       911    947 ;not there?
    CALL    CRLF                        ;d16c  cd 98 cc       912    948 ;ok, start a new line on the screen.
    LD  HL,NBYTES                       ;d16f  21 f1 d3       913    949 ;initialize byte counter.
    LD  (HL),0FFH                       ;d172  36 ff          914    950 ;set to read first sector.
TYPE1:  LD  HL,NBYTES                   ;d174  21 f1 d3       915    951 
TYPE2:  LD  A,(HL)                      ;d177  7e             916    952 ;have we written the entire sector?
    CP  128                             ;d178  fe 80          917    953 
    JP  C,TYPE3                         ;d17a  da 87 d1       918    954 
    PUSH    HL                          ;d17d  e5             919    955 ;yes, read in the next one.
    CALL    READFCB                     ;d17e  cd fe cc       920    956 
    POP HL                              ;d181  e1             921    957 
    JP  NZ,TYPE4                        ;d182  c2 a0 d1       922    958 ;end or error?
    XOR A                               ;d185  af             923    959 ;ok, clear byte counter.
    LD  (HL),A                          ;d186  77             924    960 
TYPE3:  INC (HL)                        ;d187  34             925    961 ;count this byte.
    LD  HL,TBUFF                        ;d188  21 80 00       926    962 ;and get the (A)th one from the buffer (TBUFF).
    CALL    ADDHL                       ;d18b  cd 59 ce       927    963 
    LD  A,(HL)                          ;d18e  7e             928    964 
    CP  CNTRLZ                          ;d18f  fe 1a          929    965 ;end of file mark?
    JP  Z,GETBACK                       ;d191  ca 86 d3       930    966 
    CALL    PRINT                       ;d194  cd 8c cc       931    967 ;no, print it.
    CALL    CHKCON                      ;d197  cd c2 cd       932    968 ;check console, quit if anything ready.
    JP  NZ,GETBACK                      ;d19a  c2 86 d3       933    969 
    JP  TYPE1                           ;d19d  c3 74 d1       934    970 
                                        ;                     935    971 ;
                                        ;                     936    972 ;   Get here on an end of file or read error.
                                        ;                     937    973 ;
TYPE4:  DEC A                           ;d1a0  3d             938    974 ;read error?
    JP  Z,GETBACK                       ;d1a1  ca 86 d3       939    975 
    CALL    RDERROR                     ;d1a4  cd d9 cf       940    976 ;yes, print message.
TYPE5:  CALL    RESETDR                 ;d1a7  cd 66 d0       941    977 ;and reset proper drive
    JP  SYNERR                          ;d1aa  c3 09 ce       942    978 ;now print file name with problem.
                                        ;                     943    979 ;
                                        ;                     944    980 ;**************************************************************
                                        ;                     945    981 ;*
                                        ;                     946    982 ;*            S A V E   C O M M A N D
                                        ;                     947    983 ;*
                                        ;                     948    984 ;**************************************************************
                                        ;                     949    985 ;
SAVE:   CALL    DECODE                  ;d1ad  cd f8 cf       950    986 ;get numeric number that follows SAVE.
    PUSH    AF                          ;d1b0  f5             951    987 ;save number of pages to write.
    CALL    CONVFST                     ;d1b1  cd 5e ce       952    988 ;convert file name.
    JP  NZ,SYNERR                       ;d1b4  c2 09 ce       953    989 ;wild cards not allowed.
    CALL    DSELECT                     ;d1b7  cd 54 d0       954    990 ;select specified drive.
    LD  DE,FCB                          ;d1ba  11 cd d3       955    991 ;now delete this file.
    PUSH    DE                          ;d1bd  d5             956    992 
    CALL    DELETE                      ;d1be  cd ef cc       957    993 
    POP DE                              ;d1c1  d1             958    994 
    CALL    CREATE                      ;d1c2  cd 09 cd       959    995 ;and create it again.
    JP  Z,SAVE3                         ;d1c5  ca fb d1       960    996 ;can't create?
    XOR A                               ;d1c8  af             961    997 ;clear record number byte.
    LD  (FCB+32),A                      ;d1c9  32 ed d3       962    998 
    POP AF                              ;d1cc  f1             963    999 ;convert pages to sectors.
    LD  L,A                             ;d1cd  6f             964   1000 
    LD  H,0                             ;d1ce  26 00          965   1001 
    ADD HL,HL                           ;d1d0  29             966   1002 ;(HL)=number of sectors to write.
    LD  DE,TBASE                        ;d1d1  11 00 01       967   1003 ;and we start from here.
SAVE1:  LD  A,H                         ;d1d4  7c             968   1004 ;done yet?
    OR  L                               ;d1d5  b5             969   1005 
    JP  Z,SAVE2                         ;d1d6  ca f1 d1       970   1006 
    DEC HL                              ;d1d9  2b             971   1007 ;nope, count this and compute the start
    PUSH    HL                          ;d1da  e5             972   1008 ;of the next 128 byte sector.
    LD  HL,128                          ;d1db  21 80 00       973   1009 
    ADD HL,DE                           ;d1de  19             974   1010 
    PUSH    HL                          ;d1df  e5             975   1011 ;save it and set the transfer address.
    CALL    DMASET                      ;d1e0  cd d8 cd       976   1012 
    LD  DE,FCB                          ;d1e3  11 cd d3       977   1013 ;write out this sector now.
    CALL    WRTREC                      ;d1e6  cd 04 cd       978   1014 
    POP DE                              ;d1e9  d1             979   1015 ;reset (DE) to the start of the last sector.
    POP HL                              ;d1ea  e1             980   1016 ;restore sector count.
    JP  NZ,SAVE3                        ;d1eb  c2 fb d1       981   1017 ;write error?
    JP  SAVE1                           ;d1ee  c3 d4 d1       982   1018 
                                        ;                     983   1019 ;
                                        ;                     984   1020 ;   Get here after writing all of the file.
                                        ;                     985   1021 ;
SAVE2:  LD  DE,FCB                      ;d1f1  11 cd d3       986   1022 ;now close the file.
    CALL    CLOSE                       ;d1f4  cd da cc       987   1023 
    INC A                               ;d1f7  3c             988   1024 ;did it close ok?
    JP  NZ,SAVE4                        ;d1f8  c2 01 d2       989   1025 
                                        ;                     990   1026 ;
                                        ;                     991   1027 ;   Print out error message (no space).
                                        ;                     992   1028 ;
SAVE3:  LD  BC,NOSPACE                  ;d1fb  01 07 d2       993   1029 
    CALL    PLINE                       ;d1fe  cd a7 cc       994   1030 
SAVE4:  CALL    STDDMA                  ;d201  cd d5 cd       995   1031 ;reset the standard dma address.
    JP  GETBACK                         ;d204  c3 86 d3       996   1032 
NOSPACE:DEFB    'No space',0            ;d207  4e 6f 20 73    997   1033 
                                        ;d20b  70 61 63 65    997   1034
                                        ;d20f  00             997   1035
                                        ;                     998   1036 ;
                                        ;                     999   1037 ;**************************************************************
                                        ;                    1000   1038 ;*
                                        ;                    1001   1039 ;*           R E N A M E   C O M M A N D
                                        ;                    1002   1040 ;*
                                        ;                    1003   1041 ;**************************************************************
                                        ;                    1004   1042 ;
RENAME: CALL    CONVFST                 ;d210  cd 5e ce      1005   1043 ;convert first file name.
    JP  NZ,SYNERR                       ;d213  c2 09 ce      1006   1044 ;wild cards not allowed.
    LD  A,(CHGDRV)                      ;d216  3a f0 d3      1007   1045 ;remember any change in drives specified.
    PUSH    AF                          ;d219  f5            1008   1046 
    CALL    DSELECT                     ;d21a  cd 54 d0      1009   1047 ;and select this drive.
    CALL    SRCHFCB                     ;d21d  cd e9 cc      1010   1048 ;is this file present?
    JP  NZ,RENAME6                      ;d220  c2 79 d2      1011   1049 ;yes, print error message.
    LD  HL,FCB                          ;d223  21 cd d3      1012   1050 ;yes, move this name into second slot.
    LD  DE,FCB+16                       ;d226  11 dd d3      1013   1051 
    LD  B,16                            ;d229  06 10         1014   1052 
    CALL    HL2DE                       ;d22b  cd 42 d0      1015   1053 
    LD  HL,(INPOINT)                    ;d22e  2a 88 cc      1016   1054 ;get input pointer.
    EX  DE,HL                           ;d231  eb            1017   1055 
    CALL    NONBLANK                    ;d232  cd 4f ce      1018   1056 ;get next non blank character.
    CP  '='                             ;d235  fe 3d         1019   1057 ;only allow an '=' or '_' seperator.
    JP  Z,RENAME1                       ;d237  ca 3f d2      1020   1058 
    CP  '_'                             ;d23a  fe 5f         1021   1059 
    JP  NZ,RENAME5                      ;d23c  c2 73 d2      1022   1060 
RENAME1:EX  DE,HL                       ;d23f  eb            1023   1061 
    INC HL                              ;d240  23            1024   1062 ;ok, skip seperator.
    LD  (INPOINT),HL                    ;d241  22 88 cc      1025   1063 ;save input line pointer.
    CALL    CONVFST                     ;d244  cd 5e ce      1026   1064 ;convert this second file name now.
    JP  NZ,RENAME5                      ;d247  c2 73 d2      1027   1065 ;again, no wild cards.
    POP AF                              ;d24a  f1            1028   1066 ;if a drive was specified, then it
    LD  B,A                             ;d24b  47            1029   1067 ;must be the same as before.
    LD  HL,CHGDRV                       ;d24c  21 f0 d3      1030   1068 
    LD  A,(HL)                          ;d24f  7e            1031   1069 
    OR  A                               ;d250  b7            1032   1070 
    JP  Z,RENAME2                       ;d251  ca 59 d2      1033   1071 
    CP  B                               ;d254  b8            1034   1072 
    LD  (HL),B                          ;d255  70            1035   1073 
    JP  NZ,RENAME5                      ;d256  c2 73 d2      1036   1074 ;they were different, error.
RENAME2:LD  (HL),B                      ;d259  70            1037   1075 ;	reset as per the first file specification.
    XOR A                               ;d25a  af            1038   1076 
    LD  (FCB),A                         ;d25b  32 cd d3      1039   1077 ;clear the drive byte of the fcb.
RENAME3:CALL    SRCHFCB                 ;d25e  cd e9 cc      1040   1078 ;and go look for second file.
    JP  Z,RENAME4                       ;d261  ca 6d d2      1041   1079 ;doesn't exist?
    LD  DE,FCB                          ;d264  11 cd d3      1042   1080 
    CALL    RENAM                       ;d267  cd 0e cd      1043   1081 ;ok, rename the file.
    JP  GETBACK                         ;d26a  c3 86 d3      1044   1082 
                                        ;                    1045   1083 ;
                                        ;                    1046   1084 ;   Process rename errors here.
                                        ;                    1047   1085 ;
RENAME4:CALL    NONE                    ;d26d  cd ea cf      1048   1086 ;file not there.
    JP  GETBACK                         ;d270  c3 86 d3      1049   1087 
RENAME5:CALL    RESETDR                 ;d273  cd 66 d0      1050   1088 ;bad command format.
    JP  SYNERR                          ;d276  c3 09 ce      1051   1089 
RENAME6:LD  BC,EXISTS                   ;d279  01 82 d2      1052   1090 ;destination file already exists.
    CALL    PLINE                       ;d27c  cd a7 cc      1053   1091 
    JP  GETBACK                         ;d27f  c3 86 d3      1054   1092 
EXISTS: DEFB    'File exists',0         ;d282  46 69 6c 65   1055   1093 
                                        ;d286  20 65 78 69   1055   1094
                                        ;d28a  73 74 73 00   1055   1095
                                        ;                    1056   1096 ;
                                        ;                    1057   1097 ;**************************************************************
                                        ;                    1058   1098 ;*
                                        ;                    1059   1099 ;*             U S E R   C O M M A N D
                                        ;                    1060   1100 ;*
                                        ;                    1061   1101 ;**************************************************************
                                        ;                    1062   1102 ;
USER:   CALL    DECODE                  ;d28e  cd f8 cf      1063   1103 ;get numeric value following command.
    CP  16                              ;d291  fe 10         1064   1104 ;legal user number?
    JP  NC,SYNERR                       ;d293  d2 09 ce      1065   1105 
    LD  E,A                             ;d296  5f            1066   1106 ;yes but is there anything else?
    LD  A,(FCB+1)                       ;d297  3a ce d3      1067   1107 
    CP  ' '                             ;d29a  fe 20         1068   1108 
    JP  Z,SYNERR                        ;d29c  ca 09 ce      1069   1109 ;yes, that is not allowed.
    CALL    GETSETUC                    ;d29f  cd 15 cd      1070   1110 ;ok, set user code.
    JP  GETBACK1                        ;d2a2  c3 89 d3      1071   1111 
                                        ;                    1072   1112 ;
                                        ;                    1073   1113 ;**************************************************************
                                        ;                    1074   1114 ;*
                                        ;                    1075   1115 ;*        T R A N S I A N T   P R O G R A M   C O M M A N D
                                        ;                    1076   1116 ;*
                                        ;                    1077   1117 ;**************************************************************
                                        ;                    1078   1118 ;
UNKNOWN:CALL    VERIFY                  ;d2a5  cd f5 cd      1079   1119 ;check for valid system (why?).
    LD  A,(FCB+1)                       ;d2a8  3a ce d3      1080   1120 ;anything to execute?
    CP  ' '                             ;d2ab  fe 20         1081   1121 
    JP  NZ,UNKWN1                       ;d2ad  c2 c4 d2      1082   1122 
    LD  A,(CHGDRV)                      ;d2b0  3a f0 d3      1083   1123 ;nope, only a drive change?
    OR  A                               ;d2b3  b7            1084   1124 
    JP  Z,GETBACK1                      ;d2b4  ca 89 d3      1085   1125 ;neither???
    DEC A                               ;d2b7  3d            1086   1126 
    LD  (CDRIVE),A                      ;d2b8  32 ef d3      1087   1127 ;ok, store new drive.
    CALL    MOVECD                      ;d2bb  cd 29 cd      1088   1128 ;set (TDRIVE) also.
    CALL    DSKSEL                      ;d2be  cd bd cc      1089   1129 ;and select this drive.
    JP  GETBACK1                        ;d2c1  c3 89 d3      1090   1130 ;then return.
                                        ;                    1091   1131 ;
                                        ;                    1092   1132 ;   Here a file name was typed. Prepare to execute it.
                                        ;                    1093   1133 ;
UNKWN1: LD  DE,FCB+9                    ;d2c4  11 d6 d3      1094   1134 ;an extension specified?
    LD  A,(DE)                          ;d2c7  1a            1095   1135 
    CP  ' '                             ;d2c8  fe 20         1096   1136 
    JP  NZ,SYNERR                       ;d2ca  c2 09 ce      1097   1137 ;yes, not allowed.
UNKWN2: PUSH    DE                      ;d2cd  d5            1098   1138 
    CALL    DSELECT                     ;d2ce  cd 54 d0      1099   1139 ;select specified drive.
    POP DE                              ;d2d1  d1            1100   1140 
    LD  HL,COMFILE                      ;d2d2  21 83 d3      1101   1141 ;set the extension to 'COM'.
    CALL    MOVE3                       ;d2d5  cd 40 d0      1102   1142 
    CALL    OPENFCB                     ;d2d8  cd d0 cc      1103   1143 ;and open this file.
    JP  Z,UNKWN9                        ;d2db  ca 6b d3      1104   1144 ;not present?
                                        ;                    1105   1145 ;
                                        ;                    1106   1146 ;   Load in the program.
                                        ;                    1107   1147 ;
    LD  HL,TBASE                        ;d2de  21 00 01      1108   1148 ;store the program starting here.
UNKWN3: PUSH    HL                      ;d2e1  e5            1109   1149 
    EX  DE,HL                           ;d2e2  eb            1110   1150 
    CALL    DMASET                      ;d2e3  cd d8 cd      1111   1151 ;set transfer address.
    LD  DE,FCB                          ;d2e6  11 cd d3      1112   1152 ;and read the next record.
    CALL    RDREC                       ;d2e9  cd f9 cc      1113   1153 
    JP  NZ,UNKWN4                       ;d2ec  c2 01 d3      1114   1154 ;end of file or read error?
    POP HL                              ;d2ef  e1            1115   1155 ;nope, bump pointer for next sector.
    LD  DE,128                          ;d2f0  11 80 00      1116   1156 
    ADD HL,DE                           ;d2f3  19            1117   1157 
    LD  DE,CBASE                        ;d2f4  11 00 cc      1118   1158 ;enough room for the whole file?
    LD  A,L                             ;d2f7  7d            1119   1159 
    SUB E                               ;d2f8  93            1120   1160 
    LD  A,H                             ;d2f9  7c            1121   1161 
    SBC A,D                             ;d2fa  9a            1122   1162 
    JP  NC,UNKWN0                       ;d2fb  d2 71 d3      1123   1163 ;no, it can't fit.
    JP  UNKWN3                          ;d2fe  c3 e1 d2      1124   1164 
                                        ;                    1125   1165 ;
                                        ;                    1126   1166 ;   Get here after finished reading.
                                        ;                    1127   1167 ;
UNKWN4: POP HL                          ;d301  e1            1128   1168 
    DEC A                               ;d302  3d            1129   1169 ;normal end of file?
    JP  NZ,UNKWN0                       ;d303  c2 71 d3      1130   1170 
    CALL    RESETDR                     ;d306  cd 66 d0      1131   1171 ;yes, reset previous drive.
    CALL    CONVFST                     ;d309  cd 5e ce      1132   1172 ;convert the first file name that follows
    LD  HL,CHGDRV                       ;d30c  21 f0 d3      1133   1173 ;command name.
    PUSH    HL                          ;d30f  e5            1134   1174 
    LD  A,(HL)                          ;d310  7e            1135   1175 ;set drive code in default fcb.
    LD  (FCB),A                         ;d311  32 cd d3      1136   1176 
    LD  A,16                            ;d314  3e 10         1137   1177 ;put second name 16 bytes later.
    CALL    CONVERT                     ;d316  cd 60 ce      1138   1178 ;convert second file name.
    POP HL                              ;d319  e1            1139   1179 
    LD  A,(HL)                          ;d31a  7e            1140   1180 ;and set the drive for this second file.
    LD  (FCB+16),A                      ;d31b  32 dd d3      1141   1181 
    XOR A                               ;d31e  af            1142   1182 ;clear record byte in fcb.
    LD  (FCB+32),A                      ;d31f  32 ed d3      1143   1183 
    LD  DE,TFCB                         ;d322  11 5c 00      1144   1184 ;move it into place at(005Ch).
    LD  HL,FCB                          ;d325  21 cd d3      1145   1185 
    LD  B,33                            ;d328  06 21         1146   1186 
    CALL    HL2DE                       ;d32a  cd 42 d0      1147   1187 
    LD  HL,INBUFF+2                     ;d32d  21 08 cc      1148   1188 ;now move the remainder of the input
UNKWN5: LD  A,(HL)                      ;d330  7e            1149   1189 ;line down to (0080h). Look for a non blank.
    OR  A                               ;d331  b7            1150   1190 ;or a null.
    JP  Z,UNKWN6                        ;d332  ca 3e d3      1151   1191 
    CP  ' '                             ;d335  fe 20         1152   1192 
    JP  Z,UNKWN6                        ;d337  ca 3e d3      1153   1193 
    INC HL                              ;d33a  23            1154   1194 
    JP  UNKWN5                          ;d33b  c3 30 d3      1155   1195 
                                        ;                    1156   1196 ;
                                        ;                    1157   1197 ;   Do the line move now. It ends in a null byte.
                                        ;                    1158   1198 ;
UNKWN6: LD  B,0                         ;d33e  06 00         1159   1199 ;keep a character count.
    LD  DE,TBUFF+1                      ;d340  11 81 00      1160   1200 ;data gets put here.
UNKWN7: LD  A,(HL)                      ;d343  7e            1161   1201 ;move it now.
    LD  (DE),A                          ;d344  12            1162   1202 
    OR  A                               ;d345  b7            1163   1203 
    JP  Z,UNKWN8                        ;d346  ca 4f d3      1164   1204 
    INC B                               ;d349  04            1165   1205 
    INC HL                              ;d34a  23            1166   1206 
    INC DE                              ;d34b  13            1167   1207 
    JP  UNKWN7                          ;d34c  c3 43 d3      1168   1208 
UNKWN8: LD  A,B                         ;d34f  78            1169   1209 ;now store the character count.
    LD  (TBUFF),A                       ;d350  32 80 00      1170   1210 
    CALL    CRLF                        ;d353  cd 98 cc      1171   1211 ;clean up the screen.
    CALL    STDDMA                      ;d356  cd d5 cd      1172   1212 ;set standard transfer address.
    CALL    SETCDRV                     ;d359  cd 1a cd      1173   1213 ;reset current drive.
    CALL    TBASE                       ;d35c  cd 00 01      1174   1214 ;and execute the program.
                                        ;                    1175   1215 ;
                                        ;                    1176   1216 ;   Transiant programs return here (or reboot).
                                        ;                    1177   1217 ;
    LD  SP,BATCH                        ;d35f  31 ab d3      1178   1218 ;set stack first off.
    CALL    MOVECD                      ;d362  cd 29 cd      1179   1219 ;move current drive into place (TDRIVE).
    CALL    DSKSEL                      ;d365  cd bd cc      1180   1220 ;and reselect it.
    JP  CMMND1                          ;d368  c3 82 cf      1181   1221 ;back to comand mode.
                                        ;                    1182   1222 ;
                                        ;                    1183   1223 ;   Get here if some error occured.
                                        ;                    1184   1224 ;
UNKWN9: CALL    RESETDR                 ;d36b  cd 66 d0      1185   1225 ;inproper format.
    JP  SYNERR                          ;d36e  c3 09 ce      1186   1226 
UNKWN0: LD  BC,BADLOAD                  ;d371  01 7a d3      1187   1227 ;read error or won't fit.
    CALL    PLINE                       ;d374  cd a7 cc      1188   1228 
    JP  GETBACK                         ;d377  c3 86 d3      1189   1229 
BADLOAD:DEFB    'Bad load',0            ;d37a  42 61 64 20   1190   1230 
                                        ;d37e  6c 6f 61 64   1190   1231
                                        ;d382  00            1190   1232
COMFILE:DEFB    'COM'                   ;d383  43 4f 4d      1191   1233 ;command file extension.
                                        ;                    1192   1234 ;
                                        ;                    1193   1235 ;   Get here to return to command level. We will reset the
                                        ;                    1194   1236 ; previous active drive and then either return to command
                                        ;                    1195   1237 ; level directly or print error message and then return.
                                        ;                    1196   1238 ;
GETBACK:CALL    RESETDR                 ;d386  cd 66 d0      1197   1239 ;reset previous drive.
GETBACK1: CALL  CONVFST                 ;d389  cd 5e ce      1198   1240 ;convert first name in (FCB).
    LD  A,(FCB+1)                       ;d38c  3a ce d3      1199   1241 ;if this was just a drive change request,
    SUB ' '                             ;d38f  d6 20         1200   1242 ;make sure it was valid.
    LD  HL,CHGDRV                       ;d391  21 f0 d3      1201   1243 
    OR  (HL)                            ;d394  b6            1202   1244 
    JP  NZ,SYNERR                       ;d395  c2 09 ce      1203   1245 
    JP  CMMND1                          ;d398  c3 82 cf      1204   1246 ;ok, return to command level.
                                        ;                    1205   1247 ;
                                        ;                    1206   1248 ;   ccp stack area.
                                        ;                    1207   1249 ;
    DEFB    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;d39b  00 00 00 00   1208   1250 
                                        ;d39f  00 00 00 00   1208   1251
                                        ;d3a3  00 00 00 00   1208   1252
                                        ;d3a7  00 00 00 00   1208   1253
CCPSTACK EQU    $                       ;d3ab                1209   1254 ;end of ccp stack area.
                                        ;                    1210   1255 ;
                                        ;                    1211   1256 ;   Batch (or SUBMIT) processing information storage.
                                        ;                    1212   1257 ;
BATCH:  DEFB    0                       ;d3ab  00            1213   1258 ;batch mode flag (0=not active).
BATCHFCB: DEFB  0,'$$$     SUB',0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;d3ac  00 24 24 24   1214   1259 
                                        ;d3b0  20 20 20 20   1214   1260
                                        ;d3b4  20 53 55 42   1214   1261
                                        ;d3b8  00 00 00 00   1214   1262
                                        ;d3bc  00 00 00 00   1214   1263
                                        ;d3c0  00 00 00 00   1214   1264
                                        ;d3c4  00 00 00 00   1214   1265
                                        ;d3c8  00 00 00 00   1214   1266
                                        ;d3cc  00            1214   1267
                                        ;                    1215   1268 ;
                                        ;                    1216   1269 ;   File control block setup by the CCP.
                                        ;                    1217   1270 ;
FCB:    DEFB    0,'           ',0,0,0,0,0,'           ',0,0,0,0,0;d3cd  00 20 20 20   1218   1271 
                                        ;d3d1  20 20 20 20   1218   1272
                                        ;d3d5  20 20 20 20   1218   1273
                                        ;d3d9  00 00 00 00   1218   1274
                                        ;d3dd  00 20 20 20   1218   1275
                                        ;d3e1  20 20 20 20   1218   1276
                                        ;d3e5  20 20 20 20   1218   1277
                                        ;d3e9  00 00 00 00   1218   1278
                                        ;d3ed  00            1218   1279
RTNCODE:DEFB    0                       ;d3ee  00            1219   1280 ;status returned from bdos call.
CDRIVE: DEFB    0                       ;d3ef  00            1220   1281 ;currently active drive.
CHGDRV: DEFB    0                       ;d3f0  00            1221   1282 ;change in drives flag (0=no change).
NBYTES: DEFW    0                       ;d3f1  00 00         1222   1283 ;byte counter used by TYPE.
                                        ;                    1223   1284 ;
                                        ;                    1224   1285 ;   Room for expansion?
                                        ;                    1225   1286 ;
    DEFB    0,0,0,0,0,0,0,0,0,0,0,0,0   ;d3f3  00 00 00 00   1226   1287 
                                        ;d3f7  00 00 00 00   1226   1288
                                        ;d3fb  00 00 00 00   1226   1289
                                        ;d3ff  00            1226   1290
                                        ;                    1227   1291 ;
                                        ;                    1228   1292 ;   Note that the following six bytes must match those at
                                        ;                    1229   1293 ; (PATTRN1) or cp/m will HALT. Why?
                                        ;                    1230   1294 ;
PATTRN2:DEFB    0,22,0,0,0,0            ;d400  00 16 00 00   1231   1295 ;(* serial number bytes *).
                                        ;d404  00 00         1231   1296
                                        ;                    1232   1297 ;
                                        ;                    1233   1298 ;**************************************************************
                                        ;                    1234   1299 ;*
                                        ;                    1235   1300 ;*                    B D O S   E N T R Y
                                        ;                    1236   1301 ;*
                                        ;                    1237   1302 ;**************************************************************
                                        ;                    1238   1303 ;
FBASE:  JP  FBASE1                      ;d406  c3 11 d4      1239   1304 
                                        ;                    1240   1305 ;
                                        ;                    1241   1306 ;   Bdos error table.
                                        ;                    1242   1307 ;
BADSCTR:DEFW    ERROR1                  ;d409  99 d4         1243   1308 ;bad sector on read or write.
BADSLCT:DEFW    ERROR2                  ;d40b  a5 d4         1244   1309 ;bad disk select.
RODISK: DEFW    ERROR3                  ;d40d  ab d4         1245   1310 ;disk is read only.
ROFILE: DEFW    ERROR4                  ;d40f  b1 d4         1246   1311 ;file is read only.
                                        ;                    1247   1312 ;
                                        ;                    1248   1313 ;   Entry into bdos. (DE) or (E) are the parameters passed. The
                                        ;                    1249   1314 ; function number desired is in register (C).
                                        ;                    1250   1315 ;
FBASE1: EX  DE,HL                       ;d411  eb            1251   1316 ;save the (DE) parameters.
    LD  (PARAMS),HL                     ;d412  22 43 d7      1252   1317 
    EX  DE,HL                           ;d415  eb            1253   1318 
    LD  A,E                             ;d416  7b            1254   1319 ;and save register (E) in particular.
    LD  (EPARAM),A                      ;d417  32 d6 e1      1255   1320 
    LD  HL,0                            ;d41a  21 00 00      1256   1321 
    LD  (STATUS),HL                     ;d41d  22 45 d7      1257   1322 ;clear return status.
    ADD HL,SP                           ;d420  39            1258   1323 
    LD  (USRSTACK),HL                   ;d421  22 0f d7      1259   1324 ;save users stack pointer.
    LD  SP,STKAREA                      ;d424  31 41 d7      1260   1325 ;and set our own.
    XOR A                               ;d427  af            1261   1326 ;clear auto select storage space.
    LD  (AUTOFLAG),A                    ;d428  32 e0 e1      1262   1327 
    LD  (AUTO),A                        ;d42b  32 de e1      1263   1328 
    LD  HL,GOBACK                       ;d42e  21 74 e1      1264   1329 ;set return address.
    PUSH    HL                          ;d431  e5            1265   1330 
    LD  A,C                             ;d432  79            1266   1331 ;get function number.
    CP  NFUNCTS                         ;d433  fe 29         1267   1332 ;valid function number?
    RET NC                              ;d435  d0            1268   1333 
    LD  C,E                             ;d436  4b            1269   1334 ;keep single register function here.
    LD  HL,FUNCTNS                      ;d437  21 47 d4      1270   1335 ;now look thru the function table.
    LD  E,A                             ;d43a  5f            1271   1336 
    LD  D,0                             ;d43b  16 00         1272   1337 ;(DE)=function number.
    ADD HL,DE                           ;d43d  19            1273   1338 
    ADD HL,DE                           ;d43e  19            1274   1339 ;(HL)=(start of table)+2*(function number).
    LD  E,(HL)                          ;d43f  5e            1275   1340 
    INC HL                              ;d440  23            1276   1341 
    LD  D,(HL)                          ;d441  56            1277   1342 ;now (DE)=address for this function.
    LD  HL,(PARAMS)                     ;d442  2a 43 d7      1278   1343 ;retrieve parameters.
    EX  DE,HL                           ;d445  eb            1279   1344 ;now (DE) has the original parameters.
    JP  (HL)                            ;d446  e9            1280   1345 ;execute desired function.
                                        ;                    1281   1346 ;
                                        ;                    1282   1347 ;   BDOS function jump table.
                                        ;                    1283   1348 ;
NFUNCTS EQU 41                          ;0029                1284   1349 ;number of functions in followin table.
                                        ;                    1285   1350 ;
FUNCTNS:DEFW    WBOOT,GETCON,OUTCON,GETRDR,PUNCH,LIST,DIRCIO,GETIOB;d447  03 e2 c8 d6   1286   1351 
                                        ;d44b  90 d5 ce d6   1286   1352
                                        ;d44f  12 e2 0f e2   1286   1353
                                        ;d453  d4 d6 ed d6   1286   1354
    DEFW    SETIOB,PRTSTR,RDBUFF,GETCSTS,GETVER,RSTDSK,SETDSK,OPENFIL;d457  f3 d6 f8 d6   1287   1355 
                                        ;d45b  e1 d5 fe d6   1287   1356
                                        ;d45f  7e e0 83 e0   1287   1357
                                        ;d463  45 e0 9c e0   1287   1358
    DEFW    CLOSEFIL,GETFST,GETNXT,DELFILE,READSEQ,WRTSEQ,FCREATE;d467  a5 e0 ab e0   1288   1359 
                                        ;d46b  c8 e0 d7 e0   1288   1360
                                        ;d46f  e0 e0 e6 e0   1288   1361
                                        ;d473  ec e0         1288   1362
    DEFW    RENFILE,GETLOG,GETCRNT,PUTDMA,GETALOC,WRTPRTD,GETROV,SETATTR;d475  f5 e0 fe e0   1289   1363 
                                        ;d479  04 e1 0a e1   1289   1364
                                        ;d47d  11 e1 2c d9   1289   1365
                                        ;d481  17 e1 1d e1   1289   1366
    DEFW    GETPARM,GETUSER,RDRANDOM,WTRANDOM,FILESIZE,SETRAN,LOGOFF,RTN;d485  26 e1 2d e1   1290   1367 
                                        ;d489  41 e1 47 e1   1290   1368
                                        ;d48d  4d e1 0e e0   1290   1369
                                        ;d491  53 e1 04 d7   1290   1370
    DEFW    RTN,WTSPECL                 ;d495  04 d7 9b e1   1291   1371 
                                        ;                    1292   1372 ;
                                        ;                    1293   1373 ;   Bdos error message section.
                                        ;                    1294   1374 ;
ERROR1: LD  HL,BADSEC                   ;d499  21 ca d4      1295   1375 ;bad sector message.
    CALL    PRTERR                      ;d49c  cd e5 d4      1296   1376 ;print it and get a 1 char responce.
    CP  CNTRLC                          ;d49f  fe 03         1297   1377 ;re-boot request (control-c)?
    JP  Z,0                             ;d4a1  ca 00 00      1298   1378 ;yes.
    RET                                 ;d4a4  c9            1299   1379 ;no, return to retry i/o function.
                                        ;                    1300   1380 ;
ERROR2: LD  HL,BADSEL                   ;d4a5  21 d5 d4      1301   1381 ;bad drive selected.
    JP  ERROR5                          ;d4a8  c3 b4 d4      1302   1382 
                                        ;                    1303   1383 ;
ERROR3: LD  HL,DISKRO                   ;d4ab  21 e1 d4      1304   1384 ;disk is read only.
    JP  ERROR5                          ;d4ae  c3 b4 d4      1305   1385 
                                        ;                    1306   1386 ;
ERROR4: LD  HL,FILERO                   ;d4b1  21 dc d4      1307   1387 ;file is read only.
                                        ;                    1308   1388 ;
ERROR5: CALL    PRTERR                  ;d4b4  cd e5 d4      1309   1389 
    JP  0                               ;d4b7  c3 00 00      1310   1390 ;always reboot on these errors.
                                        ;                    1311   1391 ;
BDOSERR:DEFB    'Bdos Err On '          ;d4ba  42 64 6f 73   1312   1392 
                                        ;d4be  20 45 72 72   1312   1393
                                        ;d4c2  20 4f 6e 20   1312   1394
BDOSDRV:DEFB    ' : $'                  ;d4c6  20 3a 20 24   1313   1395 
BADSEC: DEFB    'Bad Sector$'           ;d4ca  42 61 64 20   1314   1396 
                                        ;d4ce  53 65 63 74   1314   1397
                                        ;d4d2  6f 72 24      1314   1398
BADSEL: DEFB    'Select$'               ;d4d5  53 65 6c 65   1315   1399 
                                        ;d4d9  63 74 24      1315   1400
FILERO: DEFB    'File '                 ;d4dc  46 69 6c 65   1316   1401 
                                        ;d4e0  20            1316   1402
DISKRO: DEFB    'R/O$'                  ;d4e1  52 2f 4f 24   1317   1403 
                                        ;                    1318   1404 ;
                                        ;                    1319   1405 ;   Print bdos error message.
                                        ;                    1320   1406 ;
PRTERR: PUSH    HL                      ;d4e5  e5            1321   1407 ;save second message pointer.
    CALL    OUTCRLF                     ;d4e6  cd c9 d5      1322   1408 ;send (cr)(lf).
    LD  A,(ACTIVE)                      ;d4e9  3a 42 d7      1323   1409 ;get active drive.
    ADD A,'A'                           ;d4ec  c6 41         1324   1410 ;make ascii.
    LD  (BDOSDRV),A                     ;d4ee  32 c6 d4      1325   1411 ;and put in message.
    LD  BC,BDOSERR                      ;d4f1  01 ba d4      1326   1412 ;and print it.
    CALL    PRTMESG                     ;d4f4  cd d3 d5      1327   1413 
    POP BC                              ;d4f7  c1            1328   1414 ;print second message line now.
    CALL    PRTMESG                     ;d4f8  cd d3 d5      1329   1415 
                                        ;                    1330   1416 ;
                                        ;                    1331   1417 ;   Get an input character. We will check our 1 character
                                        ;                    1332   1418 ; buffer first. This may be set by the console status routine.
                                        ;                    1333   1419 ;
GETCHAR:LD  HL,CHARBUF                  ;d4fb  21 0e d7      1334   1420 ;check character buffer.
    LD  A,(HL)                          ;d4fe  7e            1335   1421 ;anything present already?
    LD  (HL),0                          ;d4ff  36 00         1336   1422 ;...either case clear it.
    OR  A                               ;d501  b7            1337   1423 
    RET NZ                              ;d502  c0            1338   1424 ;yes, use it.
    JP  CONIN                           ;d503  c3 09 e2      1339   1425 ;nope, go get a character responce.
                                        ;                    1340   1426 ;
                                        ;                    1341   1427 ;   Input and echo a character.
                                        ;                    1342   1428 ;
GETECHO:CALL    GETCHAR                 ;d506  cd fb d4      1343   1429 ;input a character.
    CALL    CHKCHAR                     ;d509  cd 14 d5      1344   1430 ;carriage control?
    RET C                               ;d50c  d8            1345   1431 ;no, a regular control char so don't echo.
    PUSH    AF                          ;d50d  f5            1346   1432 ;ok, save character now.
    LD  C,A                             ;d50e  4f            1347   1433 
    CALL    OUTCON                      ;d50f  cd 90 d5      1348   1434 ;and echo it.
    POP AF                              ;d512  f1            1349   1435 ;get character and return.
    RET                                 ;d513  c9            1350   1436 
                                        ;                    1351   1437 ;
                                        ;                    1352   1438 ;   Check character in (A). Set the zero flag on a carriage
                                        ;                    1353   1439 ; control character and the carry flag on any other control
                                        ;                    1354   1440 ; character.
                                        ;                    1355   1441 ;
CHKCHAR:CP  CR                          ;d514  fe 0d         1356   1442 ;check for carriage return, line feed, backspace,
    RET Z                               ;d516  c8            1357   1443 ;or a tab.
    CP  LF                              ;d517  fe 0a         1358   1444 
    RET Z                               ;d519  c8            1359   1445 
    CP  TAB                             ;d51a  fe 09         1360   1446 
    RET Z                               ;d51c  c8            1361   1447 
    CP  BS                              ;d51d  fe 08         1362   1448 
    RET Z                               ;d51f  c8            1363   1449 
    CP  ' '                             ;d520  fe 20         1364   1450 ;other control char? Set carry flag.
    RET                                 ;d522  c9            1365   1451 
                                        ;                    1366   1452 ;
                                        ;                    1367   1453 ;   Check the console during output. Halt on a control-s, then
                                        ;                    1368   1454 ; reboot on a control-c. If anything else is ready, clear the
                                        ;                    1369   1455 ; zero flag and return (the calling routine may want to do
                                        ;                    1370   1456 ; something).
                                        ;                    1371   1457 ;
CKCONSOL: LD    A,(CHARBUF)             ;d523  3a 0e d7      1372   1458 ;check buffer.
    OR  A                               ;d526  b7            1373   1459 ;if anything, just return without checking.
    JP  NZ,CKCON2                       ;d527  c2 45 d5      1374   1460 
    CALL    CONST                       ;d52a  cd 06 e2      1375   1461 ;nothing in buffer. Check console.
    AND 01H                             ;d52d  e6 01         1376   1462 ;look at bit 0.
    RET Z                               ;d52f  c8            1377   1463 ;return if nothing.
    CALL    CONIN                       ;d530  cd 09 e2      1378   1464 ;ok, get it.
    CP  CNTRLS                          ;d533  fe 13         1379   1465 ;if not control-s, return with zero cleared.
    JP  NZ,CKCON1                       ;d535  c2 42 d5      1380   1466 
    CALL    CONIN                       ;d538  cd 09 e2      1381   1467 ;halt processing until another char
    CP  CNTRLC                          ;d53b  fe 03         1382   1468 ;is typed. Control-c?
    JP  Z,0                             ;d53d  ca 00 00      1383   1469 ;yes, reboot now.
    XOR A                               ;d540  af            1384   1470 ;no, just pretend nothing was ever ready.
    RET                                 ;d541  c9            1385   1471 
CKCON1: LD  (CHARBUF),A                 ;d542  32 0e d7      1386   1472 ;save character in buffer for later processing.
CKCON2: LD  A,1                         ;d545  3e 01         1387   1473 ;set (A) to non zero to mean something is ready.
    RET                                 ;d547  c9            1388   1474 
                                        ;                    1389   1475 ;
                                        ;                    1390   1476 ;   Output (C) to the screen. If the printer flip-flop flag
                                        ;                    1391   1477 ; is set, we will send character to printer also. The console
                                        ;                    1392   1478 ; will be checked in the process.
                                        ;                    1393   1479 ;
OUTCHAR:LD  A,(OUTFLAG)                 ;d548  3a 0a d7      1394   1480 ;check output flag.
    OR  A                               ;d54b  b7            1395   1481 ;anything and we won't generate output.
    JP  NZ,OUTCHR1                      ;d54c  c2 62 d5      1396   1482 
    PUSH    BC                          ;d54f  c5            1397   1483 
    CALL    CKCONSOL                    ;d550  cd 23 d5      1398   1484 ;check console (we don't care whats there).
    POP BC                              ;d553  c1            1399   1485 
    PUSH    BC                          ;d554  c5            1400   1486 
    CALL    CONOUT                      ;d555  cd 0c e2      1401   1487 ;output (C) to the screen.
    POP BC                              ;d558  c1            1402   1488 
    PUSH    BC                          ;d559  c5            1403   1489 
    LD  A,(PRTFLAG)                     ;d55a  3a 0d d7      1404   1490 ;check printer flip-flop flag.
    OR  A                               ;d55d  b7            1405   1491 
    CALL    NZ,LIST                     ;d55e  c4 0f e2      1406   1492 ;print it also if non-zero.
    POP BC                              ;d561  c1            1407   1493 
OUTCHR1:LD  A,C                         ;d562  79            1408   1494 ;update cursors position.
    LD  HL,CURPOS                       ;d563  21 0c d7      1409   1495 
    CP  DEL                             ;d566  fe 7f         1410   1496 ;rubouts don't do anything here.
    RET Z                               ;d568  c8            1411   1497 
    INC (HL)                            ;d569  34            1412   1498 ;bump line pointer.
    CP  ' '                             ;d56a  fe 20         1413   1499 ;and return if a normal character.
    RET NC                              ;d56c  d0            1414   1500 
    DEC (HL)                            ;d56d  35            1415   1501 ;restore and check for the start of the line.
    LD  A,(HL)                          ;d56e  7e            1416   1502 
    OR  A                               ;d56f  b7            1417   1503 
    RET Z                               ;d570  c8            1418   1504 ;ingnore control characters at the start of the line.
    LD  A,C                             ;d571  79            1419   1505 
    CP  BS                              ;d572  fe 08         1420   1506 ;is it a backspace?
    JP  NZ,OUTCHR2                      ;d574  c2 79 d5      1421   1507 
    DEC (HL)                            ;d577  35            1422   1508 ;yes, backup pointer.
    RET                                 ;d578  c9            1423   1509 
OUTCHR2:CP  LF                          ;d579  fe 0a         1424   1510 ;is it a line feed?
    RET NZ                              ;d57b  c0            1425   1511 ;ignore anything else.
    LD  (HL),0                          ;d57c  36 00         1426   1512 ;reset pointer to start of line.
    RET                                 ;d57e  c9            1427   1513 
                                        ;                    1428   1514 ;
                                        ;                    1429   1515 ;   Output (A) to the screen. If it is a control character
                                        ;                    1430   1516 ; (other than carriage control), use ^x format.
                                        ;                    1431   1517 ;
SHOWIT: LD  A,C                         ;d57f  79            1432   1518 
    CALL    CHKCHAR                     ;d580  cd 14 d5      1433   1519 ;check character.
    JP  NC,OUTCON                       ;d583  d2 90 d5      1434   1520 ;not a control, use normal output.
    PUSH    AF                          ;d586  f5            1435   1521 
    LD  C,'^'                           ;d587  0e 5e         1436   1522 ;for a control character, preceed it with '^'.
    CALL    OUTCHAR                     ;d589  cd 48 d5      1437   1523 
    POP AF                              ;d58c  f1            1438   1524 
    OR  '@'                             ;d58d  f6 40         1439   1525 ;and then use the letter equivelant.
    LD  C,A                             ;d58f  4f            1440   1526 
                                        ;                    1441   1527 ;
                                        ;                    1442   1528 ;   Function to output (C) to the console device and expand tabs
                                        ;                    1443   1529 ; if necessary.
                                        ;                    1444   1530 ;
OUTCON: LD  A,C                         ;d590  79            1445   1531 
    CP  TAB                             ;d591  fe 09         1446   1532 ;is it a tab?
    JP  NZ,OUTCHAR                      ;d593  c2 48 d5      1447   1533 ;use regular output.
OUTCON1:LD  C,' '                       ;d596  0e 20         1448   1534 ;yes it is, use spaces instead.
    CALL    OUTCHAR                     ;d598  cd 48 d5      1449   1535 
    LD  A,(CURPOS)                      ;d59b  3a 0c d7      1450   1536 ;go until the cursor is at a multiple of 8
                                        ;                    1451   1537 
    AND 07H                             ;d59e  e6 07         1452   1538 ;position.
    JP  NZ,OUTCON1                      ;d5a0  c2 96 d5      1453   1539 
    RET                                 ;d5a3  c9            1454   1540 
                                        ;                    1455   1541 ;
                                        ;                    1456   1542 ;   Echo a backspace character. Erase the prevoius character
                                        ;                    1457   1543 ; on the screen.
                                        ;                    1458   1544 ;
BACKUP: CALL    BACKUP1                 ;d5a4  cd ac d5      1459   1545 ;backup the screen 1 place.
    LD  C,' '                           ;d5a7  0e 20         1460   1546 ;then blank that character.
    CALL    CONOUT                      ;d5a9  cd 0c e2      1461   1547 
BACKUP1:LD  C,BS                        ;d5ac  0e 08         1462   1548 ;then back space once more.
    JP  CONOUT                          ;d5ae  c3 0c e2      1463   1549 
                                        ;                    1464   1550 ;
                                        ;                    1465   1551 ;   Signal a deleted line. Print a '#' at the end and start
                                        ;                    1466   1552 ; over.
                                        ;                    1467   1553 ;
NEWLINE:LD  C,'#'                       ;d5b1  0e 23         1468   1554 
    CALL    OUTCHAR                     ;d5b3  cd 48 d5      1469   1555 ;print this.
    CALL    OUTCRLF                     ;d5b6  cd c9 d5      1470   1556 ;start new line.
NEWLN1: LD  A,(CURPOS)                  ;d5b9  3a 0c d7      1471   1557 ;move the cursor to the starting position.
    LD  HL,STARTING                     ;d5bc  21 0b d7      1472   1558 
    CP  (HL)                            ;d5bf  be            1473   1559 
    RET NC                              ;d5c0  d0            1474   1560 ;there yet?
    LD  C,' '                           ;d5c1  0e 20         1475   1561 
    CALL    OUTCHAR                     ;d5c3  cd 48 d5      1476   1562 ;nope, keep going.
    JP  NEWLN1                          ;d5c6  c3 b9 d5      1477   1563 
                                        ;                    1478   1564 ;
                                        ;                    1479   1565 ;   Output a (cr) (lf) to the console device (screen).
                                        ;                    1480   1566 ;
OUTCRLF:LD  C,CR                        ;d5c9  0e 0d         1481   1567 
    CALL    OUTCHAR                     ;d5cb  cd 48 d5      1482   1568 
    LD  C,LF                            ;d5ce  0e 0a         1483   1569 
    JP  OUTCHAR                         ;d5d0  c3 48 d5      1484   1570 
                                        ;                    1485   1571 ;
                                        ;                    1486   1572 ;   Print message pointed to by (BC). It will end with a '$'.
                                        ;                    1487   1573 ;
PRTMESG:LD  A,(BC)                      ;d5d3  0a            1488   1574 ;check for terminating character.
    CP  '$'                             ;d5d4  fe 24         1489   1575 
    RET Z                               ;d5d6  c8            1490   1576 
    INC BC                              ;d5d7  03            1491   1577 
    PUSH    BC                          ;d5d8  c5            1492   1578 ;otherwise, bump pointer and print it.
    LD  C,A                             ;d5d9  4f            1493   1579 
    CALL    OUTCON                      ;d5da  cd 90 d5      1494   1580 
    POP BC                              ;d5dd  c1            1495   1581 
    JP  PRTMESG                         ;d5de  c3 d3 d5      1496   1582 
                                        ;                    1497   1583 ;
                                        ;                    1498   1584 ;   Function to execute a buffered read.
                                        ;                    1499   1585 ;
RDBUFF: LD  A,(CURPOS)                  ;d5e1  3a 0c d7      1500   1586 ;use present location as starting one.
    LD  (STARTING),A                    ;d5e4  32 0b d7      1501   1587 
    LD  HL,(PARAMS)                     ;d5e7  2a 43 d7      1502   1588 ;get the maximum buffer space.
    LD  C,(HL)                          ;d5ea  4e            1503   1589 
    INC HL                              ;d5eb  23            1504   1590 ;point to first available space.
    PUSH    HL                          ;d5ec  e5            1505   1591 ;and save.
    LD  B,0                             ;d5ed  06 00         1506   1592 ;keep a character count.
RDBUF1: PUSH    BC                      ;d5ef  c5            1507   1593 
    PUSH    HL                          ;d5f0  e5            1508   1594 
RDBUF2: CALL    GETCHAR                 ;d5f1  cd fb d4      1509   1595 ;get the next input character.
    AND 7FH                             ;d5f4  e6 7f         1510   1596 ;strip bit 7.
    POP HL                              ;d5f6  e1            1511   1597 ;reset registers.
    POP BC                              ;d5f7  c1            1512   1598 
    CP  CR                              ;d5f8  fe 0d         1513   1599 ;en of the line?
    JP  Z,RDBUF17                       ;d5fa  ca c1 d6      1514   1600 
    CP  LF                              ;d5fd  fe 0a         1515   1601 
    JP  Z,RDBUF17                       ;d5ff  ca c1 d6      1516   1602 
    CP  BS                              ;d602  fe 08         1517   1603 ;how about a backspace?
    JP  NZ,RDBUF3                       ;d604  c2 16 d6      1518   1604 
    LD  A,B                             ;d607  78            1519   1605 ;yes, but ignore at the beginning of the line.
    OR  A                               ;d608  b7            1520   1606 
    JP  Z,RDBUF1                        ;d609  ca ef d5      1521   1607 
    DEC B                               ;d60c  05            1522   1608 ;ok, update counter.
    LD  A,(CURPOS)                      ;d60d  3a 0c d7      1523   1609 ;if we backspace to the start of the line,
    LD  (OUTFLAG),A                     ;d610  32 0a d7      1524   1610 ;treat as a cancel (control-x).
    JP  RDBUF10                         ;d613  c3 70 d6      1525   1611 
RDBUF3: CP  DEL                         ;d616  fe 7f         1526   1612 ;user typed a rubout?
    JP  NZ,RDBUF4                       ;d618  c2 26 d6      1527   1613 
    LD  A,B                             ;d61b  78            1528   1614 ;ignore at the start of the line.
    OR  A                               ;d61c  b7            1529   1615 
    JP  Z,RDBUF1                        ;d61d  ca ef d5      1530   1616 
    LD  A,(HL)                          ;d620  7e            1531   1617 ;ok, echo the prevoius character.
    DEC B                               ;d621  05            1532   1618 ;and reset pointers (counters).
    DEC HL                              ;d622  2b            1533   1619 
    JP  RDBUF15                         ;d623  c3 a9 d6      1534   1620 
RDBUF4: CP  CNTRLE                      ;d626  fe 05         1535   1621 ;physical end of line?
    JP  NZ,RDBUF5                       ;d628  c2 37 d6      1536   1622 
    PUSH    BC                          ;d62b  c5            1537   1623 ;yes, do it.
    PUSH    HL                          ;d62c  e5            1538   1624 
    CALL    OUTCRLF                     ;d62d  cd c9 d5      1539   1625 
    XOR A                               ;d630  af            1540   1626 ;and update starting position.
    LD  (STARTING),A                    ;d631  32 0b d7      1541   1627 
    JP  RDBUF2                          ;d634  c3 f1 d5      1542   1628 
RDBUF5: CP  CNTRLP                      ;d637  fe 10         1543   1629 ;control-p?
    JP  NZ,RDBUF6                       ;d639  c2 48 d6      1544   1630 
    PUSH    HL                          ;d63c  e5            1545   1631 ;yes, flip the print flag filp-flop byte.
    LD  HL,PRTFLAG                      ;d63d  21 0d d7      1546   1632 
    LD  A,1                             ;d640  3e 01         1547   1633 ;PRTFLAG=1-PRTFLAG
    SUB (HL)                            ;d642  96            1548   1634 
    LD  (HL),A                          ;d643  77            1549   1635 
    POP HL                              ;d644  e1            1550   1636 
    JP  RDBUF1                          ;d645  c3 ef d5      1551   1637 
RDBUF6: CP  CNTRLX                      ;d648  fe 18         1552   1638 ;control-x (cancel)?
    JP  NZ,RDBUF8                       ;d64a  c2 5f d6      1553   1639 
    POP HL                              ;d64d  e1            1554   1640 
RDBUF7: LD  A,(STARTING)                ;d64e  3a 0b d7      1555   1641 ;yes, backup the cursor to here.
    LD  HL,CURPOS                       ;d651  21 0c d7      1556   1642 
    CP  (HL)                            ;d654  be            1557   1643 
    JP  NC,RDBUFF                       ;d655  d2 e1 d5      1558   1644 ;done yet?
    DEC (HL)                            ;d658  35            1559   1645 ;no, decrement pointer and output back up one space.
    CALL    BACKUP                      ;d659  cd a4 d5      1560   1646 
    JP  RDBUF7                          ;d65c  c3 4e d6      1561   1647 
RDBUF8: CP  CNTRLU                      ;d65f  fe 15         1562   1648 ;cntrol-u (cancel line)?
    JP  NZ,RDBUF9                       ;d661  c2 6b d6      1563   1649 
    CALL    NEWLINE                     ;d664  cd b1 d5      1564   1650 ;start a new line.
    POP HL                              ;d667  e1            1565   1651 
    JP  RDBUFF                          ;d668  c3 e1 d5      1566   1652 
RDBUF9: CP  CNTRLR                      ;d66b  fe 12         1567   1653 ;control-r?
    JP  NZ,RDBUF14                      ;d66d  c2 a6 d6      1568   1654 
RDBUF10:PUSH    BC                      ;d670  c5            1569   1655 ;yes, start a new line and retype the old one.
    CALL    NEWLINE                     ;d671  cd b1 d5      1570   1656 
    POP BC                              ;d674  c1            1571   1657 
    POP HL                              ;d675  e1            1572   1658 
    PUSH    HL                          ;d676  e5            1573   1659 
    PUSH    BC                          ;d677  c5            1574   1660 
RDBUF11:LD  A,B                         ;d678  78            1575   1661 ;done whole line yet?
    OR  A                               ;d679  b7            1576   1662 
    JP  Z,RDBUF12                       ;d67a  ca 8a d6      1577   1663 
    INC HL                              ;d67d  23            1578   1664 ;nope, get next character.
    LD  C,(HL)                          ;d67e  4e            1579   1665 
    DEC B                               ;d67f  05            1580   1666 ;count it.
    PUSH    BC                          ;d680  c5            1581   1667 
    PUSH    HL                          ;d681  e5            1582   1668 
    CALL    SHOWIT                      ;d682  cd 7f d5      1583   1669 ;and display it.
    POP HL                              ;d685  e1            1584   1670 
    POP BC                              ;d686  c1            1585   1671 
    JP  RDBUF11                         ;d687  c3 78 d6      1586   1672 
RDBUF12:PUSH    HL                      ;d68a  e5            1587   1673 ;done with line. If we were displaying
    LD  A,(OUTFLAG)                     ;d68b  3a 0a d7      1588   1674 ;then update cursor position.
    OR  A                               ;d68e  b7            1589   1675 
    JP  Z,RDBUF2                        ;d68f  ca f1 d5      1590   1676 
    LD  HL,CURPOS                       ;d692  21 0c d7      1591   1677 ;because this line is shorter, we must
    SUB (HL)                            ;d695  96            1592   1678 ;back up the cursor (not the screen however)
    LD  (OUTFLAG),A                     ;d696  32 0a d7      1593   1679 ;some number of positions.
RDBUF13:CALL    BACKUP                  ;d699  cd a4 d5      1594   1680 ;note that as long as (OUTFLAG) is non
    LD  HL,OUTFLAG                      ;d69c  21 0a d7      1595   1681 ;zero, the screen will not be changed.
    DEC (HL)                            ;d69f  35            1596   1682 
    JP  NZ,RDBUF13                      ;d6a0  c2 99 d6      1597   1683 
    JP  RDBUF2                          ;d6a3  c3 f1 d5      1598   1684 ;now just get the next character.
                                        ;                    1599   1685 ;
                                        ;                    1600   1686 ;   Just a normal character, put this in our buffer and echo.
                                        ;                    1601   1687 ;
RDBUF14:INC HL                          ;d6a6  23            1602   1688 
    LD  (HL),A                          ;d6a7  77            1603   1689 ;store character.
    INC B                               ;d6a8  04            1604   1690 ;and count it.
RDBUF15:PUSH    BC                      ;d6a9  c5            1605   1691 
    PUSH    HL                          ;d6aa  e5            1606   1692 
    LD  C,A                             ;d6ab  4f            1607   1693 ;echo it now.
    CALL    SHOWIT                      ;d6ac  cd 7f d5      1608   1694 
    POP HL                              ;d6af  e1            1609   1695 
    POP BC                              ;d6b0  c1            1610   1696 
    LD  A,(HL)                          ;d6b1  7e            1611   1697 ;was it an abort request?
    CP  CNTRLC                          ;d6b2  fe 03         1612   1698 ;control-c abort?
    LD  A,B                             ;d6b4  78            1613   1699 
    JP  NZ,RDBUF16                      ;d6b5  c2 bd d6      1614   1700 
    CP  1                               ;d6b8  fe 01         1615   1701 ;only if at start of line.
    JP  Z,0                             ;d6ba  ca 00 00      1616   1702 
RDBUF16:CP  C                           ;d6bd  b9            1617   1703 ;nope, have we filled the buffer?
    JP  C,RDBUF1                        ;d6be  da ef d5      1618   1704 
RDBUF17:POP HL                          ;d6c1  e1            1619   1705 ;yes end the line and return.
    LD  (HL),B                          ;d6c2  70            1620   1706 
    LD  C,CR                            ;d6c3  0e 0d         1621   1707 
    JP  OUTCHAR                         ;d6c5  c3 48 d5      1622   1708 ;output (cr) and return.
                                        ;                    1623   1709 ;
                                        ;                    1624   1710 ;   Function to get a character from the console device.
                                        ;                    1625   1711 ;
GETCON: CALL    GETECHO                 ;d6c8  cd 06 d5      1626   1712 ;get and echo.
    JP  SETSTAT                         ;d6cb  c3 01 d7      1627   1713 ;save status and return.
                                        ;                    1628   1714 ;
                                        ;                    1629   1715 ;   Function to get a character from the tape reader device.
                                        ;                    1630   1716 ;
GETRDR: CALL    READER                  ;d6ce  cd 15 e2      1631   1717 ;get a character from reader, set status and return.
    JP  SETSTAT                         ;d6d1  c3 01 d7      1632   1718 
                                        ;                    1633   1719 ;
                                        ;                    1634   1720 ;  Function to perform direct console i/o. If (C) contains (FF)
                                        ;                    1635   1721 ; then this is an input request. If (C) contains (FE) then
                                        ;                    1636   1722 ; this is a status request. Otherwise we are to output (C).
                                        ;                    1637   1723 ;
DIRCIO: LD  A,C                         ;d6d4  79            1638   1724 ;test for (FF).
    INC A                               ;d6d5  3c            1639   1725 
    JP  Z,DIRC1                         ;d6d6  ca e0 d6      1640   1726 
    INC A                               ;d6d9  3c            1641   1727 ;test for (FE).
    JP  Z,CONST                         ;d6da  ca 06 e2      1642   1728 
    JP  CONOUT                          ;d6dd  c3 0c e2      1643   1729 ;just output (C).
DIRC1:  CALL    CONST                   ;d6e0  cd 06 e2      1644   1730 ;this is an input request.
    OR  A                               ;d6e3  b7            1645   1731 
    JP  Z,GOBACK1                       ;d6e4  ca 91 e1      1646   1732 ;not ready? Just return (directly).
    CALL    CONIN                       ;d6e7  cd 09 e2      1647   1733 ;yes, get character.
    JP  SETSTAT                         ;d6ea  c3 01 d7      1648   1734 ;set status and return.
                                        ;                    1649   1735 ;
                                        ;                    1650   1736 ;   Function to return the i/o byte.
                                        ;                    1651   1737 ;
GETIOB: LD  A,(IOBYTE)                  ;d6ed  3a 03 00      1652   1738 
    JP  SETSTAT                         ;d6f0  c3 01 d7      1653   1739 
                                        ;                    1654   1740 ;
                                        ;                    1655   1741 ;   Function to set the i/o byte.
                                        ;                    1656   1742 ;
SETIOB: LD  HL,IOBYTE                   ;d6f3  21 03 00      1657   1743 
    LD  (HL),C                          ;d6f6  71            1658   1744 
    RET                                 ;d6f7  c9            1659   1745 
                                        ;                    1660   1746 ;
                                        ;                    1661   1747 ;   Function to print the character string pointed to by (DE)
                                        ;                    1662   1748 ; on the console device. The string ends with a '$'.
                                        ;                    1663   1749 ;
PRTSTR: EX  DE,HL                       ;d6f8  eb            1664   1750 
    LD  C,L                             ;d6f9  4d            1665   1751 
    LD  B,H                             ;d6fa  44            1666   1752 ;now (BC) points to it.
    JP  PRTMESG                         ;d6fb  c3 d3 d5      1667   1753 
                                        ;                    1668   1754 ;
                                        ;                    1669   1755 ;   Function to interigate the console device.
                                        ;                    1670   1756 ;
GETCSTS:CALL    CKCONSOL                ;d6fe  cd 23 d5      1671   1757 
                                        ;                    1672   1758 ;
                                        ;                    1673   1759 ;   Get here to set the status and return to the cleanup
                                        ;                    1674   1760 ; section. Then back to the user.
                                        ;                    1675   1761 ;
SETSTAT:LD  (STATUS),A                  ;d701  32 45 d7      1676   1762 
RTN:    RET                             ;d704  c9            1677   1763 
                                        ;                    1678   1764 ;
                                        ;                    1679   1765 ;   Set the status to 1 (read or write error code).
                                        ;                    1680   1766 ;
IOERR1: LD  A,1                         ;d705  3e 01         1681   1767 
    JP  SETSTAT                         ;d707  c3 01 d7      1682   1768 
                                        ;                    1683   1769 ;
OUTFLAG:DEFB    0                       ;d70a  00            1684   1770 ;output flag (non zero means no output).
STARTING: DEFB  2                       ;d70b  02            1685   1771 ;starting position for cursor.
CURPOS: DEFB    0                       ;d70c  00            1686   1772 ;cursor position (0=start of line).
PRTFLAG:DEFB    0                       ;d70d  00            1687   1773 ;printer flag (control-p toggle). List if non zero.
CHARBUF:DEFB    0                       ;d70e  00            1688   1774 ;single input character buffer.
                                        ;                    1689   1775 ;
                                        ;                    1690   1776 ;   Stack area for BDOS calls.
                                        ;                    1691   1777 ;
USRSTACK: DEFW  0                       ;d70f  00 00         1692   1778 ;save users stack pointer here.
                                        ;                    1693   1779 ;
    DEFB    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;d711  00 00 00 00   1694   1780 
                                        ;d715  00 00 00 00   1694   1781
                                        ;d719  00 00 00 00   1694   1782
                                        ;d71d  00 00 00 00   1694   1783
                                        ;d721  00 00 00 00   1694   1784
                                        ;d725  00 00 00 00   1694   1785
    DEFB    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;d729  00 00 00 00   1695   1786 
                                        ;d72d  00 00 00 00   1695   1787
                                        ;d731  00 00 00 00   1695   1788
                                        ;d735  00 00 00 00   1695   1789
                                        ;d739  00 00 00 00   1695   1790
                                        ;d73d  00 00 00 00   1695   1791
STKAREA EQU $                           ;d741                1696   1792 ;end of stack area.
                                        ;                    1697   1793 ;
USERNO: DEFB    0                       ;d741  00            1698   1794 ;current user number.
ACTIVE: DEFB    0                       ;d742  00            1699   1795 ;currently active drive.
PARAMS: DEFW    0                       ;d743  00 00         1700   1796 ;save (DE) parameters here on entry.
STATUS: DEFW    0                       ;d745  00 00         1701   1797 ;status returned from bdos function.
                                        ;                    1702   1798 ;
                                        ;                    1703   1799 ;   Select error occured, jump to error routine.
                                        ;                    1704   1800 ;
SLCTERR:LD  HL,BADSLCT                  ;d747  21 0b d4      1705   1801 
                                        ;                    1706   1802 ;
                                        ;                    1707   1803 ;   Jump to (HL) indirectly.
                                        ;                    1708   1804 ;
JUMPHL: LD  E,(HL)                      ;d74a  5e            1709   1805 
    INC HL                              ;d74b  23            1710   1806 
    LD  D,(HL)                          ;d74c  56            1711   1807 ;now (DE) contain the desired address.
    EX  DE,HL                           ;d74d  eb            1712   1808 
    JP  (HL)                            ;d74e  e9            1713   1809 
                                        ;                    1714   1810 ;
                                        ;                    1715   1811 ;   Block move. (DE) to (HL), (C) bytes total.
                                        ;                    1716   1812 ;
DE2HL:  INC C                           ;d74f  0c            1717   1813 ;is count down to zero?
DE2HL1: DEC C                           ;d750  0d            1718   1814 
    RET Z                               ;d751  c8            1719   1815 ;yes, we are done.
    LD  A,(DE)                          ;d752  1a            1720   1816 ;no, move one more byte.
    LD  (HL),A                          ;d753  77            1721   1817 
    INC DE                              ;d754  13            1722   1818 
    INC HL                              ;d755  23            1723   1819 
    JP  DE2HL1                          ;d756  c3 50 d7      1724   1820 ;and repeat.
                                        ;                    1725   1821 ;
                                        ;                    1726   1822 ;   Select the desired drive.
                                        ;                    1727   1823 ;
SELECT: LD  A,(ACTIVE)                  ;d759  3a 42 d7      1728   1824 ;get active disk.
    LD  C,A                             ;d75c  4f            1729   1825 
    CALL    SELDSK                      ;d75d  cd 1b e2      1730   1826 ;select it.
    LD  A,H                             ;d760  7c            1731   1827 ;valid drive?
    OR  L                               ;d761  b5            1732   1828 ;valid drive?
    RET Z                               ;d762  c8            1733   1829 ;return if not.
                                        ;                    1734   1830 ;
                                        ;                    1735   1831 ;   Here, the BIOS returned the address of the parameter block
                                        ;                    1736   1832 ; in (HL). We will extract the necessary pointers and save them.
                                        ;                    1737   1833 ;
    LD  E,(HL)                          ;d763  5e            1738   1834 ;yes, get address of translation table into (DE).
    INC HL                              ;d764  23            1739   1835 
    LD  D,(HL)                          ;d765  56            1740   1836 
    INC HL                              ;d766  23            1741   1837 
    LD  (SCRATCH1),HL                   ;d767  22 b3 e1      1742   1838 ;save pointers to scratch areas.
    INC HL                              ;d76a  23            1743   1839 
    INC HL                              ;d76b  23            1744   1840 
    LD  (SCRATCH2),HL                   ;d76c  22 b5 e1      1745   1841 ;ditto.
    INC HL                              ;d76f  23            1746   1842 
    INC HL                              ;d770  23            1747   1843 
    LD  (SCRATCH3),HL                   ;d771  22 b7 e1      1748   1844 ;ditto.
    INC HL                              ;d774  23            1749   1845 
    INC HL                              ;d775  23            1750   1846 
    EX  DE,HL                           ;d776  eb            1751   1847 ;now save the translation table address.
    LD  (XLATE),HL                      ;d777  22 d0 e1      1752   1848 
    LD  HL,DIRBUF                       ;d77a  21 b9 e1      1753   1849 ;put the next 8 bytes here.
    LD  C,8                             ;d77d  0e 08         1754   1850 ;they consist of the directory buffer
    CALL    DE2HL                       ;d77f  cd 4f d7      1755   1851 ;pointer, parameter block pointer,
    LD  HL,(DISKPB)                     ;d782  2a bb e1      1756   1852 ;check and allocation vectors.
    EX  DE,HL                           ;d785  eb            1757   1853 
    LD  HL,SECTORS                      ;d786  21 c1 e1      1758   1854 ;move parameter block into our ram.
    LD  C,15                            ;d789  0e 0f         1759   1855 ;it is 15 bytes long.
    CALL    DE2HL                       ;d78b  cd 4f d7      1760   1856 
    LD  HL,(DSKSIZE)                    ;d78e  2a c6 e1      1761   1857 ;check disk size.
    LD  A,H                             ;d791  7c            1762   1858 ;more than 256 blocks on this?
    LD  HL,BIGDISK                      ;d792  21 dd e1      1763   1859 
    LD  (HL),0FFH                       ;d795  36 ff         1764   1860 ;set to samll.
    OR  A                               ;d797  b7            1765   1861 
    JP  Z,SELECT1                       ;d798  ca 9d d7      1766   1862 
    LD  (HL),0                          ;d79b  36 00         1767   1863 ;wrong, set to large.
SELECT1:LD  A,0FFH                      ;d79d  3e ff         1768   1864 ;clear the zero flag.
    OR  A                               ;d79f  b7            1769   1865 
    RET                                 ;d7a0  c9            1770   1866 
                                        ;                    1771   1867 ;
                                        ;                    1772   1868 ;   Routine to home the disk track head and clear pointers.
                                        ;                    1773   1869 ;
HOMEDRV:CALL    HOME                    ;d7a1  cd 18 e2      1774   1870 ;home the head.
    XOR A                               ;d7a4  af            1775   1871 
    LD  HL,(SCRATCH2)                   ;d7a5  2a b5 e1      1776   1872 ;set our track pointer also.
    LD  (HL),A                          ;d7a8  77            1777   1873 
    INC HL                              ;d7a9  23            1778   1874 
    LD  (HL),A                          ;d7aa  77            1779   1875 
    LD  HL,(SCRATCH3)                   ;d7ab  2a b7 e1      1780   1876 ;and our sector pointer.
    LD  (HL),A                          ;d7ae  77            1781   1877 
    INC HL                              ;d7af  23            1782   1878 
    LD  (HL),A                          ;d7b0  77            1783   1879 
    RET                                 ;d7b1  c9            1784   1880 
                                        ;                    1785   1881 ;
                                        ;                    1786   1882 ;   Do the actual disk read and check the error return status.
                                        ;                    1787   1883 ;
DOREAD: CALL    READ                    ;d7b2  cd 27 e2      1788   1884 
    JP  IORET                           ;d7b5  c3 bb d7      1789   1885 
                                        ;                    1790   1886 ;
                                        ;                    1791   1887 ;   Do the actual disk write and handle any bios error.
                                        ;                    1792   1888 ;
DOWRITE:CALL    WRITE                   ;d7b8  cd 2a e2      1793   1889 
IORET:  OR  A                           ;d7bb  b7            1794   1890 
    RET Z                               ;d7bc  c8            1795   1891 ;return unless an error occured.
    LD  HL,BADSCTR                      ;d7bd  21 09 d4      1796   1892 ;bad read/write on this sector.
    JP  JUMPHL                          ;d7c0  c3 4a d7      1797   1893 
                                        ;                    1798   1894 ;
                                        ;                    1799   1895 ;   Routine to select the track and sector that the desired
                                        ;                    1800   1896 ; block number falls in.
                                        ;                    1801   1897 ;
TRKSEC: LD  HL,(FILEPOS)                ;d7c3  2a ea e1      1802   1898 ;get position of last accessed file
    LD  C,2                             ;d7c6  0e 02         1803   1899 ;in directory and compute sector #.
    CALL    SHIFTR                      ;d7c8  cd ea d8      1804   1900 ;sector #=file-position/4.
    LD  (BLKNMBR),HL                    ;d7cb  22 e5 e1      1805   1901 ;save this as the block number of interest.
    LD  (CKSUMTBL),HL                   ;d7ce  22 ec e1      1806   1902 ;what's it doing here too?
                                        ;                    1807   1903 ;
                                        ;                    1808   1904 ;   if the sector number has already been set (BLKNMBR), enter
                                        ;                    1809   1905 ; at this point.
                                        ;                    1810   1906 ;
TRKSEC1:LD  HL,BLKNMBR                  ;d7d1  21 e5 e1      1811   1907 
    LD  C,(HL)                          ;d7d4  4e            1812   1908 ;move sector number into (BC).
    INC HL                              ;d7d5  23            1813   1909 
    LD  B,(HL)                          ;d7d6  46            1814   1910 
    LD  HL,(SCRATCH3)                   ;d7d7  2a b7 e1      1815   1911 ;get current sector number and
    LD  E,(HL)                          ;d7da  5e            1816   1912 ;move this into (DE).
    INC HL                              ;d7db  23            1817   1913 
    LD  D,(HL)                          ;d7dc  56            1818   1914 
    LD  HL,(SCRATCH2)                   ;d7dd  2a b5 e1      1819   1915 ;get current track number.
    LD  A,(HL)                          ;d7e0  7e            1820   1916 ;and this into (HL).
    INC HL                              ;d7e1  23            1821   1917 
    LD  H,(HL)                          ;d7e2  66            1822   1918 
    LD  L,A                             ;d7e3  6f            1823   1919 
TRKSEC2:LD  A,C                         ;d7e4  79            1824   1920 ;is desired sector before current one?
    SUB E                               ;d7e5  93            1825   1921 
    LD  A,B                             ;d7e6  78            1826   1922 
    SBC A,D                             ;d7e7  9a            1827   1923 
    JP  NC,TRKSEC3                      ;d7e8  d2 fa d7      1828   1924 
    PUSH    HL                          ;d7eb  e5            1829   1925 ;yes, decrement sectors by one track.
    LD  HL,(SECTORS)                    ;d7ec  2a c1 e1      1830   1926 ;get sectors per track.
    LD  A,E                             ;d7ef  7b            1831   1927 
    SUB L                               ;d7f0  95            1832   1928 
    LD  E,A                             ;d7f1  5f            1833   1929 
    LD  A,D                             ;d7f2  7a            1834   1930 
    SBC A,H                             ;d7f3  9c            1835   1931 
    LD  D,A                             ;d7f4  57            1836   1932 ;now we have backed up one full track.
    POP HL                              ;d7f5  e1            1837   1933 
    DEC HL                              ;d7f6  2b            1838   1934 ;adjust track counter.
    JP  TRKSEC2                         ;d7f7  c3 e4 d7      1839   1935 
TRKSEC3:PUSH    HL                      ;d7fa  e5            1840   1936 ;desired sector is after current one.
    LD  HL,(SECTORS)                    ;d7fb  2a c1 e1      1841   1937 ;get sectors per track.
    ADD HL,DE                           ;d7fe  19            1842   1938 ;bump sector pointer to next track.
    JP  C,TRKSEC4                       ;d7ff  da 0f d8      1843   1939 
    LD  A,C                             ;d802  79            1844   1940 ;is desired sector now before current one?
    SUB L                               ;d803  95            1845   1941 
    LD  A,B                             ;d804  78            1846   1942 
    SBC A,H                             ;d805  9c            1847   1943 
    JP  C,TRKSEC4                       ;d806  da 0f d8      1848   1944 
    EX  DE,HL                           ;d809  eb            1849   1945 ;not yes, increment track counter
    POP HL                              ;d80a  e1            1850   1946 ;and continue until it is.
    INC HL                              ;d80b  23            1851   1947 
    JP  TRKSEC3                         ;d80c  c3 fa d7      1852   1948 
                                        ;                    1853   1949 ;
                                        ;                    1854   1950 ;   here we have determined the track number that contains the
                                        ;                    1855   1951 ; desired sector.
                                        ;                    1856   1952 ;
TRKSEC4:POP HL                          ;d80f  e1            1857   1953 ;get track number (HL).
    PUSH    BC                          ;d810  c5            1858   1954 
    PUSH    DE                          ;d811  d5            1859   1955 
    PUSH    HL                          ;d812  e5            1860   1956 
    EX  DE,HL                           ;d813  eb            1861   1957 
    LD  HL,(OFFSET)                     ;d814  2a ce e1      1862   1958 ;adjust for first track offset.
    ADD HL,DE                           ;d817  19            1863   1959 
    LD  B,H                             ;d818  44            1864   1960 
    LD  C,L                             ;d819  4d            1865   1961 
    CALL    SETTRK                      ;d81a  cd 1e e2      1866   1962 ;select this track.
    POP DE                              ;d81d  d1            1867   1963 ;reset current track pointer.
    LD  HL,(SCRATCH2)                   ;d81e  2a b5 e1      1868   1964 
    LD  (HL),E                          ;d821  73            1869   1965 
    INC HL                              ;d822  23            1870   1966 
    LD  (HL),D                          ;d823  72            1871   1967 
    POP DE                              ;d824  d1            1872   1968 
    LD  HL,(SCRATCH3)                   ;d825  2a b7 e1      1873   1969 ;reset the first sector on this track.
    LD  (HL),E                          ;d828  73            1874   1970 
    INC HL                              ;d829  23            1875   1971 
    LD  (HL),D                          ;d82a  72            1876   1972 
    POP BC                              ;d82b  c1            1877   1973 
    LD  A,C                             ;d82c  79            1878   1974 ;now subtract the desired one.
    SUB E                               ;d82d  93            1879   1975 ;to make it relative (1-# sectors/track).
    LD  C,A                             ;d82e  4f            1880   1976 
    LD  A,B                             ;d82f  78            1881   1977 
    SBC A,D                             ;d830  9a            1882   1978 
    LD  B,A                             ;d831  47            1883   1979 
    LD  HL,(XLATE)                      ;d832  2a d0 e1      1884   1980 ;translate this sector according to this table.
    EX  DE,HL                           ;d835  eb            1885   1981 
    CALL    SECTRN                      ;d836  cd 30 e2      1886   1982 ;let the bios translate it.
    LD  C,L                             ;d839  4d            1887   1983 
    LD  B,H                             ;d83a  44            1888   1984 
    JP  SETSEC                          ;d83b  c3 21 e2      1889   1985 ;and select it.
                                        ;                    1890   1986 ;
                                        ;                    1891   1987 ;   Compute block number from record number (SAVNREC) and
                                        ;                    1892   1988 ; extent number (SAVEXT).
                                        ;                    1893   1989 ;
GETBLOCK: LD    HL,BLKSHFT              ;d83e  21 c3 e1      1894   1990 ;get logical to physical conversion.
    LD  C,(HL)                          ;d841  4e            1895   1991 ;note that this is base 2 log of ratio.
    LD  A,(SAVNREC)                     ;d842  3a e3 e1      1896   1992 ;get record number.
GETBLK1:OR  A                           ;d845  b7            1897   1993 ;compute (A)=(A)/2^BLKSHFT.
    RRA                                 ;d846  1f            1898   1994 
    DEC C                               ;d847  0d            1899   1995 
    JP  NZ,GETBLK1                      ;d848  c2 45 d8      1900   1996 
    LD  B,A                             ;d84b  47            1901   1997 ;save result in (B).
    LD  A,8                             ;d84c  3e 08         1902   1998 
    SUB (HL)                            ;d84e  96            1903   1999 
    LD  C,A                             ;d84f  4f            1904   2000 ;compute (C)=8-BLKSHFT.
    LD  A,(SAVEXT)                      ;d850  3a e2 e1      1905   2001 
GETBLK2:DEC C                           ;d853  0d            1906   2002 ;compute (A)=SAVEXT*2^(8-BLKSHFT).
    JP  Z,GETBLK3                       ;d854  ca 5c d8      1907   2003 
    OR  A                               ;d857  b7            1908   2004 
    RLA                                 ;d858  17            1909   2005 
    JP  GETBLK2                         ;d859  c3 53 d8      1910   2006 
GETBLK3:ADD A,B                         ;d85c  80            1911   2007 
    RET                                 ;d85d  c9            1912   2008 
                                        ;                    1913   2009 ;
                                        ;                    1914   2010 ;   Routine to extract the (BC) block byte from the fcb pointed
                                        ;                    1915   2011 ; to by (PARAMS). If this is a big-disk, then these are 16 bit
                                        ;                    1916   2012 ; block numbers, else they are 8 bit numbers.
                                        ;                    1917   2013 ; Number is returned in (HL).
                                        ;                    1918   2014 ;
EXTBLK: LD  HL,(PARAMS)                 ;d85e  2a 43 d7      1919   2015 ;get fcb address.
    LD  DE,16                           ;d861  11 10 00      1920   2016 ;block numbers start 16 bytes into fcb.
    ADD HL,DE                           ;d864  19            1921   2017 
    ADD HL,BC                           ;d865  09            1922   2018 
    LD  A,(BIGDISK)                     ;d866  3a dd e1      1923   2019 ;are we using a big-disk?
    OR  A                               ;d869  b7            1924   2020 
    JP  Z,EXTBLK1                       ;d86a  ca 71 d8      1925   2021 
    LD  L,(HL)                          ;d86d  6e            1926   2022 ;no, extract an 8 bit number from the fcb.
    LD  H,0                             ;d86e  26 00         1927   2023 
    RET                                 ;d870  c9            1928   2024 
EXTBLK1:ADD HL,BC                       ;d871  09            1929   2025 ;yes, extract a 16 bit number.
    LD  E,(HL)                          ;d872  5e            1930   2026 
    INC HL                              ;d873  23            1931   2027 
    LD  D,(HL)                          ;d874  56            1932   2028 
    EX  DE,HL                           ;d875  eb            1933   2029 ;return in (HL).
    RET                                 ;d876  c9            1934   2030 
                                        ;                    1935   2031 ;
                                        ;                    1936   2032 ;   Compute block number.
                                        ;                    1937   2033 ;
COMBLK: CALL    GETBLOCK                ;d877  cd 3e d8      1938   2034 
    LD  C,A                             ;d87a  4f            1939   2035 
    LD  B,0                             ;d87b  06 00         1940   2036 
    CALL    EXTBLK                      ;d87d  cd 5e d8      1941   2037 
    LD  (BLKNMBR),HL                    ;d880  22 e5 e1      1942   2038 
    RET                                 ;d883  c9            1943   2039 
                                        ;                    1944   2040 ;
                                        ;                    1945   2041 ;   Check for a zero block number (unused).
                                        ;                    1946   2042 ;
CHKBLK: LD  HL,(BLKNMBR)                ;d884  2a e5 e1      1947   2043 
    LD  A,L                             ;d887  7d            1948   2044 ;is it zero?
    OR  H                               ;d888  b4            1949   2045 
    RET                                 ;d889  c9            1950   2046 
                                        ;                    1951   2047 ;
                                        ;                    1952   2048 ;   Adjust physical block (BLKNMBR) and convert to logical
                                        ;                    1953   2049 ; sector (LOGSECT). This is the starting sector of this block.
                                        ;                    1954   2050 ; The actual sector of interest is then added to this and the
                                        ;                    1955   2051 ; resulting sector number is stored back in (BLKNMBR). This
                                        ;                    1956   2052 ; will still have to be adjusted for the track number.
                                        ;                    1957   2053 ;
LOGICAL:LD  A,(BLKSHFT)                 ;d88a  3a c3 e1      1958   2054 ;get log2(physical/logical sectors).
    LD  HL,(BLKNMBR)                    ;d88d  2a e5 e1      1959   2055 ;get physical sector desired.
LOGICL1:ADD HL,HL                       ;d890  29            1960   2056 ;compute logical sector number.
    DEC A                               ;d891  3d            1961   2057 ;note logical sectors are 128 bytes long.
    JP  NZ,LOGICL1                      ;d892  c2 90 d8      1962   2058 
    LD  (LOGSECT),HL                    ;d895  22 e7 e1      1963   2059 ;save logical sector.
    LD  A,(BLKMASK)                     ;d898  3a c4 e1      1964   2060 ;get block mask.
    LD  C,A                             ;d89b  4f            1965   2061 
    LD  A,(SAVNREC)                     ;d89c  3a e3 e1      1966   2062 ;get next sector to access.
    AND C                               ;d89f  a1            1967   2063 ;extract the relative position within physical block.
    OR  L                               ;d8a0  b5            1968   2064 ;and add it too logical sector.
    LD  L,A                             ;d8a1  6f            1969   2065 
    LD  (BLKNMBR),HL                    ;d8a2  22 e5 e1      1970   2066 ;and store.
    RET                                 ;d8a5  c9            1971   2067 
                                        ;                    1972   2068 ;
                                        ;                    1973   2069 ;   Set (HL) to point to extent byte in fcb.
                                        ;                    1974   2070 ;
SETEXT: LD  HL,(PARAMS)                 ;d8a6  2a 43 d7      1975   2071 
    LD  DE,12                           ;d8a9  11 0c 00      1976   2072 ;it is the twelth byte.
    ADD HL,DE                           ;d8ac  19            1977   2073 
    RET                                 ;d8ad  c9            1978   2074 
                                        ;                    1979   2075 ;
                                        ;                    1980   2076 ;   Set (HL) to point to record count byte in fcb and (DE) to
                                        ;                    1981   2077 ; next record number byte.
                                        ;                    1982   2078 ;
SETHLDE:LD  HL,(PARAMS)                 ;d8ae  2a 43 d7      1983   2079 
    LD  DE,15                           ;d8b1  11 0f 00      1984   2080 ;record count byte (#15).
    ADD HL,DE                           ;d8b4  19            1985   2081 
    EX  DE,HL                           ;d8b5  eb            1986   2082 
    LD  HL,17                           ;d8b6  21 11 00      1987   2083 ;next record number (#32).
    ADD HL,DE                           ;d8b9  19            1988   2084 
    RET                                 ;d8ba  c9            1989   2085 
                                        ;                    1990   2086 ;
                                        ;                    1991   2087 ;   Save current file data from fcb.
                                        ;                    1992   2088 ;
STRDATA:CALL    SETHLDE                 ;d8bb  cd ae d8      1993   2089 
    LD  A,(HL)                          ;d8be  7e            1994   2090 ;get and store record count byte.
    LD  (SAVNREC),A                     ;d8bf  32 e3 e1      1995   2091 
    EX  DE,HL                           ;d8c2  eb            1996   2092 
    LD  A,(HL)                          ;d8c3  7e            1997   2093 ;get and store next record number byte.
    LD  (SAVNXT),A                      ;d8c4  32 e1 e1      1998   2094 
    CALL    SETEXT                      ;d8c7  cd a6 d8      1999   2095 ;point to extent byte.
    LD  A,(EXTMASK)                     ;d8ca  3a c5 e1      2000   2096 ;get extent mask.
    AND (HL)                            ;d8cd  a6            2001   2097 
    LD  (SAVEXT),A                      ;d8ce  32 e2 e1      2002   2098 ;and save extent here.
    RET                                 ;d8d1  c9            2003   2099 
                                        ;                    2004   2100 ;
                                        ;                    2005   2101 ;   Set the next record to access. If (MODE) is set to 2, then
                                        ;                    2006   2102 ; the last record byte (SAVNREC) has the correct number to access.
                                        ;                    2007   2103 ; For sequential access, (MODE) will be equal to 1.
                                        ;                    2008   2104 ;
SETNREC:CALL    SETHLDE                 ;d8d2  cd ae d8      2009   2105 
    LD  A,(MODE)                        ;d8d5  3a d5 e1      2010   2106 ;get sequential flag (=1).
    CP  2                               ;d8d8  fe 02         2011   2107 ;a 2 indicates that no adder is needed.
    JP  NZ,STNREC1                      ;d8da  c2 de d8      2012   2108 
    XOR A                               ;d8dd  af            2013   2109 ;clear adder (random access?).
STNREC1:LD  C,A                         ;d8de  4f            2014   2110 
    LD  A,(SAVNREC)                     ;d8df  3a e3 e1      2015   2111 ;get last record number.
    ADD A,C                             ;d8e2  81            2016   2112 ;increment record count.
    LD  (HL),A                          ;d8e3  77            2017   2113 ;and set fcb's next record byte.
    EX  DE,HL                           ;d8e4  eb            2018   2114 
    LD  A,(SAVNXT)                      ;d8e5  3a e1 e1      2019   2115 ;get next record byte from storage.
    LD  (HL),A                          ;d8e8  77            2020   2116 ;and put this into fcb as number of records used.
    RET                                 ;d8e9  c9            2021   2117 
                                        ;                    2022   2118 ;
                                        ;                    2023   2119 ;   Shift (HL) right (C) bits.
                                        ;                    2024   2120 ;
SHIFTR: INC C                           ;d8ea  0c            2025   2121 
SHIFTR1:DEC C                           ;d8eb  0d            2026   2122 
    RET Z                               ;d8ec  c8            2027   2123 
    LD  A,H                             ;d8ed  7c            2028   2124 
    OR  A                               ;d8ee  b7            2029   2125 
    RRA                                 ;d8ef  1f            2030   2126 
    LD  H,A                             ;d8f0  67            2031   2127 
    LD  A,L                             ;d8f1  7d            2032   2128 
    RRA                                 ;d8f2  1f            2033   2129 
    LD  L,A                             ;d8f3  6f            2034   2130 
    JP  SHIFTR1                         ;d8f4  c3 eb d8      2035   2131 
                                        ;                    2036   2132 ;
                                        ;                    2037   2133 ;   Compute the check-sum for the directory buffer. Return
                                        ;                    2038   2134 ; integer sum in (A).
                                        ;                    2039   2135 ;
CHECKSUM: LD    C,128                   ;d8f7  0e 80         2040   2136 ;length of buffer.
    LD  HL,(DIRBUF)                     ;d8f9  2a b9 e1      2041   2137 ;get its location.
    XOR A                               ;d8fc  af            2042   2138 ;clear summation byte.
CHKSUM1:ADD A,(HL)                      ;d8fd  86            2043   2139 ;and compute sum ignoring carries.
    INC HL                              ;d8fe  23            2044   2140 
    DEC C                               ;d8ff  0d            2045   2141 
    JP  NZ,CHKSUM1                      ;d900  c2 fd d8      2046   2142 
    RET                                 ;d903  c9            2047   2143 
                                        ;                    2048   2144 ;
                                        ;                    2049   2145 ;   Shift (HL) left (C) bits.
                                        ;                    2050   2146 ;
SHIFTL: INC C                           ;d904  0c            2051   2147 
SHIFTL1:DEC C                           ;d905  0d            2052   2148 
    RET Z                               ;d906  c8            2053   2149 
    ADD HL,HL                           ;d907  29            2054   2150 ;shift left 1 bit.
    JP  SHIFTL1                         ;d908  c3 05 d9      2055   2151 
                                        ;                    2056   2152 ;
                                        ;                    2057   2153 ;   Routine to set a bit in a 16 bit value contained in (BC).
                                        ;                    2058   2154 ; The bit set depends on the current drive selection.
                                        ;                    2059   2155 ;
SETBIT: PUSH    BC                      ;d90b  c5            2060   2156 ;save 16 bit word.
    LD  A,(ACTIVE)                      ;d90c  3a 42 d7      2061   2157 ;get active drive.
    LD  C,A                             ;d90f  4f            2062   2158 
    LD  HL,1                            ;d910  21 01 00      2063   2159 
    CALL    SHIFTL                      ;d913  cd 04 d9      2064   2160 ;shift bit 0 into place.
    POP BC                              ;d916  c1            2065   2161 ;now 'or' this with the original word.
    LD  A,C                             ;d917  79            2066   2162 
    OR  L                               ;d918  b5            2067   2163 
    LD  L,A                             ;d919  6f            2068   2164 ;low byte done, do high byte.
    LD  A,B                             ;d91a  78            2069   2165 
    OR  H                               ;d91b  b4            2070   2166 
    LD  H,A                             ;d91c  67            2071   2167 
    RET                                 ;d91d  c9            2072   2168 
                                        ;                    2073   2169 ;
                                        ;                    2074   2170 ;   Extract the write protect status bit for the current drive.
                                        ;                    2075   2171 ; The result is returned in (A), bit 0.
                                        ;                    2076   2172 ;
GETWPRT:LD  HL,(WRTPRT)                 ;d91e  2a ad e1      2077   2173 ;get status bytes.
    LD  A,(ACTIVE)                      ;d921  3a 42 d7      2078   2174 ;which drive is current?
    LD  C,A                             ;d924  4f            2079   2175 
    CALL    SHIFTR                      ;d925  cd ea d8      2080   2176 ;shift status such that bit 0 is the
    LD  A,L                             ;d928  7d            2081   2177 ;one of interest for this drive.
    AND 01H                             ;d929  e6 01         2082   2178 ;and isolate it.
    RET                                 ;d92b  c9            2083   2179 
                                        ;                    2084   2180 ;
                                        ;                    2085   2181 ;   Function to write protect the current disk.
                                        ;                    2086   2182 ;
WRTPRTD:LD  HL,WRTPRT                   ;d92c  21 ad e1      2087   2183 ;point to status word.
    LD  C,(HL)                          ;d92f  4e            2088   2184 ;set (BC) equal to the status.
    INC HL                              ;d930  23            2089   2185 
    LD  B,(HL)                          ;d931  46            2090   2186 
    CALL    SETBIT                      ;d932  cd 0b d9      2091   2187 ;and set this bit according to current drive.
    LD  (WRTPRT),HL                     ;d935  22 ad e1      2092   2188 ;then save.
    LD  HL,(DIRSIZE)                    ;d938  2a c8 e1      2093   2189 ;now save directory size limit.
    INC HL                              ;d93b  23            2094   2190 ;remember the last one.
    EX  DE,HL                           ;d93c  eb            2095   2191 
    LD  HL,(SCRATCH1)                   ;d93d  2a b3 e1      2096   2192 ;and store it here.
    LD  (HL),E                          ;d940  73            2097   2193 ;put low byte.
    INC HL                              ;d941  23            2098   2194 
    LD  (HL),D                          ;d942  72            2099   2195 ;then high byte.
    RET                                 ;d943  c9            2100   2196 
                                        ;                    2101   2197 ;
                                        ;                    2102   2198 ;   Check for a read only file.
                                        ;                    2103   2199 ;
CHKROFL:CALL    FCB2HL                  ;d944  cd 5e d9      2104   2200 ;set (HL) to file entry in directory buffer.
CKROF1: LD  DE,9                        ;d947  11 09 00      2105   2201 ;look at bit 7 of the ninth byte.
    ADD HL,DE                           ;d94a  19            2106   2202 
    LD  A,(HL)                          ;d94b  7e            2107   2203 
    RLA                                 ;d94c  17            2108   2204 
    RET NC                              ;d94d  d0            2109   2205 ;return if ok.
    LD  HL,ROFILE                       ;d94e  21 0f d4      2110   2206 ;else, print error message and terminate.
    JP  JUMPHL                          ;d951  c3 4a d7      2111   2207 
                                        ;                    2112   2208 ;
                                        ;                    2113   2209 ;   Check the write protect status of the active disk.
                                        ;                    2114   2210 ;
CHKWPRT:CALL    GETWPRT                 ;d954  cd 1e d9      2115   2211 
    RET Z                               ;d957  c8            2116   2212 ;return if ok.
    LD  HL,RODISK                       ;d958  21 0d d4      2117   2213 ;else print message and terminate.
    JP  JUMPHL                          ;d95b  c3 4a d7      2118   2214 
                                        ;                    2119   2215 ;
                                        ;                    2120   2216 ;   Routine to set (HL) pointing to the proper entry in the
                                        ;                    2121   2217 ; directory buffer.
                                        ;                    2122   2218 ;
FCB2HL: LD  HL,(DIRBUF)                 ;d95e  2a b9 e1      2123   2219 ;get address of buffer.
    LD  A,(FCBPOS)                      ;d961  3a e9 e1      2124   2220 ;relative position of file.
                                        ;                    2125   2221 ;
                                        ;                    2126   2222 ;   Routine to add (A) to (HL).
                                        ;                    2127   2223 ;
ADDA2HL:ADD A,L                         ;d964  85            2128   2224 
    LD  L,A                             ;d965  6f            2129   2225 
    RET NC                              ;d966  d0            2130   2226 
    INC H                               ;d967  24            2131   2227 ;take care of any carry.
    RET                                 ;d968  c9            2132   2228 
                                        ;                    2133   2229 ;
                                        ;                    2134   2230 ;   Routine to get the 's2' byte from the fcb supplied in
                                        ;                    2135   2231 ; the initial parameter specification.
                                        ;                    2136   2232 ;
GETS2:  LD  HL,(PARAMS)                 ;d969  2a 43 d7      2137   2233 ;get address of fcb.
    LD  DE,14                           ;d96c  11 0e 00      2138   2234 ;relative position of 's2'.
    ADD HL,DE                           ;d96f  19            2139   2235 
    LD  A,(HL)                          ;d970  7e            2140   2236 ;extract this byte.
    RET                                 ;d971  c9            2141   2237 
                                        ;                    2142   2238 ;
                                        ;                    2143   2239 ;   Clear the 's2' byte in the fcb.
                                        ;                    2144   2240 ;
CLEARS2:CALL    GETS2                   ;d972  cd 69 d9      2145   2241 ;this sets (HL) pointing to it.
    LD  (HL),0                          ;d975  36 00         2146   2242 ;now clear it.
    RET                                 ;d977  c9            2147   2243 
                                        ;                    2148   2244 ;
                                        ;                    2149   2245 ;   Set bit 7 in the 's2' byte of the fcb.
                                        ;                    2150   2246 ;
SETS2B7:CALL    GETS2                   ;d978  cd 69 d9      2151   2247 ;get the byte.
    OR  80H                             ;d97b  f6 80         2152   2248 ;and set bit 7.
    LD  (HL),A                          ;d97d  77            2153   2249 ;then store.
    RET                                 ;d97e  c9            2154   2250 
                                        ;                    2155   2251 ;
                                        ;                    2156   2252 ;   Compare (FILEPOS) with (SCRATCH1) and set flags based on
                                        ;                    2157   2253 ; the difference. This checks to see if there are more file
                                        ;                    2158   2254 ; names in the directory. We are at (FILEPOS) and there are
                                        ;                    2159   2255 ; (SCRATCH1) of them to check.
                                        ;                    2160   2256 ;
MOREFLS:LD  HL,(FILEPOS)                ;d97f  2a ea e1      2161   2257 ;we are here.
    EX  DE,HL                           ;d982  eb            2162   2258 
    LD  HL,(SCRATCH1)                   ;d983  2a b3 e1      2163   2259 ;and don't go past here.
    LD  A,E                             ;d986  7b            2164   2260 ;compute difference but don't keep.
    SUB (HL)                            ;d987  96            2165   2261 
    INC HL                              ;d988  23            2166   2262 
    LD  A,D                             ;d989  7a            2167   2263 
    SBC A,(HL)                          ;d98a  9e            2168   2264 ;set carry if no more names.
    RET                                 ;d98b  c9            2169   2265 
                                        ;                    2170   2266 ;
                                        ;                    2171   2267 ;   Call this routine to prevent (SCRATCH1) from being greater
                                        ;                    2172   2268 ; than (FILEPOS).
                                        ;                    2173   2269 ;
CHKNMBR:CALL    MOREFLS                 ;d98c  cd 7f d9      2174   2270 ;SCRATCH1 too big?
    RET C                               ;d98f  d8            2175   2271 
    INC DE                              ;d990  13            2176   2272 ;yes, reset it to (FILEPOS).
    LD  (HL),D                          ;d991  72            2177   2273 
    DEC HL                              ;d992  2b            2178   2274 
    LD  (HL),E                          ;d993  73            2179   2275 
    RET                                 ;d994  c9            2180   2276 
                                        ;                    2181   2277 ;
                                        ;                    2182   2278 ;   Compute (HL)=(DE)-(HL)
                                        ;                    2183   2279 ;
SUBHL:  LD  A,E                         ;d995  7b            2184   2280 ;compute difference.
    SUB L                               ;d996  95            2185   2281 
    LD  L,A                             ;d997  6f            2186   2282 ;store low byte.
    LD  A,D                             ;d998  7a            2187   2283 
    SBC A,H                             ;d999  9c            2188   2284 
    LD  H,A                             ;d99a  67            2189   2285 ;and then high byte.
    RET                                 ;d99b  c9            2190   2286 
                                        ;                    2191   2287 ;
                                        ;                    2192   2288 ;   Set the directory checksum byte.
                                        ;                    2193   2289 ;
SETDIR: LD  C,0FFH                      ;d99c  0e ff         2194   2290 
                                        ;                    2195   2291 ;
                                        ;                    2196   2292 ;   Routine to set or compare the directory checksum byte. If
                                        ;                    2197   2293 ; (C)=0ffh, then this will set the checksum byte. Else the byte
                                        ;                    2198   2294 ; will be checked. If the check fails (the disk has been changed),
                                        ;                    2199   2295 ; then this disk will be write protected.
                                        ;                    2200   2296 ;
CHECKDIR: LD    HL,(CKSUMTBL)           ;d99e  2a ec e1      2201   2297 
    EX  DE,HL                           ;d9a1  eb            2202   2298 
    LD  HL,(ALLOC1)                     ;d9a2  2a cc e1      2203   2299 
    CALL    SUBHL                       ;d9a5  cd 95 d9      2204   2300 
    RET NC                              ;d9a8  d0            2205   2301 ;ok if (CKSUMTBL) > (ALLOC1), so return.
    PUSH    BC                          ;d9a9  c5            2206   2302 
    CALL    CHECKSUM                    ;d9aa  cd f7 d8      2207   2303 ;else compute checksum.
    LD  HL,(CHKVECT)                    ;d9ad  2a bd e1      2208   2304 ;get address of checksum table.
    EX  DE,HL                           ;d9b0  eb            2209   2305 
    LD  HL,(CKSUMTBL)                   ;d9b1  2a ec e1      2210   2306 
    ADD HL,DE                           ;d9b4  19            2211   2307 ;set (HL) to point to byte for this drive.
    POP BC                              ;d9b5  c1            2212   2308 
    INC C                               ;d9b6  0c            2213   2309 ;set or check ?
    JP  Z,CHKDIR1                       ;d9b7  ca c4 d9      2214   2310 
    CP  (HL)                            ;d9ba  be            2215   2311 ;check them.
    RET Z                               ;d9bb  c8            2216   2312 ;return if they are the same.
    CALL    MOREFLS                     ;d9bc  cd 7f d9      2217   2313 ;not the same, do we care?
    RET NC                              ;d9bf  d0            2218   2314 
    CALL    WRTPRTD                     ;d9c0  cd 2c d9      2219   2315 ;yes, mark this as write protected.
    RET                                 ;d9c3  c9            2220   2316 
CHKDIR1:LD  (HL),A                      ;d9c4  77            2221   2317 ;just set the byte.
    RET                                 ;d9c5  c9            2222   2318 
                                        ;                    2223   2319 ;
                                        ;                    2224   2320 ;   Do a write to the directory of the current disk.
                                        ;                    2225   2321 ;
DIRWRITE: CALL  SETDIR                  ;d9c6  cd 9c d9      2226   2322 ;set checksum byte.
    CALL    DIRDMA                      ;d9c9  cd e0 d9      2227   2323 ;set directory dma address.
    LD  C,1                             ;d9cc  0e 01         2228   2324 ;tell the bios to actually write.
    CALL    DOWRITE                     ;d9ce  cd b8 d7      2229   2325 ;then do the write.
    JP  DEFDMA                          ;d9d1  c3 da d9      2230   2326 
                                        ;                    2231   2327 ;
                                        ;                    2232   2328 ;   Read from the directory.
                                        ;                    2233   2329 ;
DIRREAD:CALL    DIRDMA                  ;d9d4  cd e0 d9      2234   2330 ;set the directory dma address.
    CALL    DOREAD                      ;d9d7  cd b2 d7      2235   2331 ;and read it.
                                        ;                    2236   2332 ;
                                        ;                    2237   2333 ;   Routine to set the dma address to the users choice.
                                        ;                    2238   2334 ;
DEFDMA: LD  HL,USERDMA                  ;d9da  21 b1 e1      2239   2335 ;reset the default dma address and return.
    JP  DIRDMA1                         ;d9dd  c3 e3 d9      2240   2336 
                                        ;                    2241   2337 ;
                                        ;                    2242   2338 ;   Routine to set the dma address for directory work.
                                        ;                    2243   2339 ;
DIRDMA: LD  HL,DIRBUF                   ;d9e0  21 b9 e1      2244   2340 
                                        ;                    2245   2341 ;
                                        ;                    2246   2342 ;   Set the dma address. On entry, (HL) points to
                                        ;                    2247   2343 ; word containing the desired dma address.
                                        ;                    2248   2344 ;
DIRDMA1:LD  C,(HL)                      ;d9e3  4e            2249   2345 
    INC HL                              ;d9e4  23            2250   2346 
    LD  B,(HL)                          ;d9e5  46            2251   2347 ;setup (BC) and go to the bios to set it.
    JP  SETDMA                          ;d9e6  c3 24 e2      2252   2348 
                                        ;                    2253   2349 ;
                                        ;                    2254   2350 ;   Move the directory buffer into user's dma space.
                                        ;                    2255   2351 ;
MOVEDIR:LD  HL,(DIRBUF)                 ;d9e9  2a b9 e1      2256   2352 ;buffer is located here, and
    EX  DE,HL                           ;d9ec  eb            2257   2353 
    LD  HL,(USERDMA)                    ;d9ed  2a b1 e1      2258   2354 ; put it here.
    LD  C,128                           ;d9f0  0e 80         2259   2355 ;this is its length.
    JP  DE2HL                           ;d9f2  c3 4f d7      2260   2356 ;move it now and return.
                                        ;                    2261   2357 ;
                                        ;                    2262   2358 ;   Check (FILEPOS) and set the zero flag if it equals 0ffffh.
                                        ;                    2263   2359 ;
CKFILPOS: LD    HL,FILEPOS              ;d9f5  21 ea e1      2264   2360 
    LD  A,(HL)                          ;d9f8  7e            2265   2361 
    INC HL                              ;d9f9  23            2266   2362 
    CP  (HL)                            ;d9fa  be            2267   2363 ;are both bytes the same?
    RET NZ                              ;d9fb  c0            2268   2364 
    INC A                               ;d9fc  3c            2269   2365 ;yes, but are they each 0ffh?
    RET                                 ;d9fd  c9            2270   2366 
                                        ;                    2271   2367 ;
                                        ;                    2272   2368 ;   Set location (FILEPOS) to 0ffffh.
                                        ;                    2273   2369 ;
STFILPOS: LD    HL,0FFFFH               ;d9fe  21 ff ff      2274   2370 
    LD  (FILEPOS),HL                    ;da01  22 ea e1      2275   2371 
    RET                                 ;da04  c9            2276   2372 
                                        ;                    2277   2373 ;
                                        ;                    2278   2374 ;   Move on to the next file position within the current
                                        ;                    2279   2375 ; directory buffer. If no more exist, set pointer to 0ffffh
                                        ;                    2280   2376 ; and the calling routine will check for this. Enter with (C)
                                        ;                    2281   2377 ; equal to 0ffh to cause the checksum byte to be set, else we
                                        ;                    2282   2378 ; will check this disk and set write protect if checksums are
                                        ;                    2283   2379 ; not the same (applies only if another directory sector must
                                        ;                    2284   2380 ; be read).
                                        ;                    2285   2381 ;
NXENTRY:LD  HL,(DIRSIZE)                ;da05  2a c8 e1      2286   2382 ;get directory entry size limit.
    EX  DE,HL                           ;da08  eb            2287   2383 
    LD  HL,(FILEPOS)                    ;da09  2a ea e1      2288   2384 ;get current count.
    INC HL                              ;da0c  23            2289   2385 ;go on to the next one.
    LD  (FILEPOS),HL                    ;da0d  22 ea e1      2290   2386 
    CALL    SUBHL                       ;da10  cd 95 d9      2291   2387 ;(HL)=(DIRSIZE)-(FILEPOS)
    JP  NC,NXENT1                       ;da13  d2 19 da      2292   2388 ;is there more room left?
    JP  STFILPOS                        ;da16  c3 fe d9      2293   2389 ;no. Set this flag and return.
NXENT1: LD  A,(FILEPOS)                 ;da19  3a ea e1      2294   2390 ;get file position within directory.
    AND 03H                             ;da1c  e6 03         2295   2391 ;only look within this sector (only 4 entries fit).
    LD  B,5                             ;da1e  06 05         2296   2392 ;convert to relative position (32 bytes each).
NXENT2: ADD A,A                         ;da20  87            2297   2393 ;note that this is not efficient code.
    DEC B                               ;da21  05            2298   2394 ;5 'ADD A's would be better.
    JP  NZ,NXENT2                       ;da22  c2 20 da      2299   2395 
    LD  (FCBPOS),A                      ;da25  32 e9 e1      2300   2396 ;save it as position of fcb.
    OR  A                               ;da28  b7            2301   2397 
    RET NZ                              ;da29  c0            2302   2398 ;return if we are within buffer.
    PUSH    BC                          ;da2a  c5            2303   2399 
    CALL    TRKSEC                      ;da2b  cd c3 d7      2304   2400 ;we need the next directory sector.
    CALL    DIRREAD                     ;da2e  cd d4 d9      2305   2401 
    POP BC                              ;da31  c1            2306   2402 
    JP  CHECKDIR                        ;da32  c3 9e d9      2307   2403 
                                        ;                    2308   2404 ;
                                        ;                    2309   2405 ;   Routine to to get a bit from the disk space allocation
                                        ;                    2310   2406 ; map. It is returned in (A), bit position 0. On entry to here,
                                        ;                    2311   2407 ; set (BC) to the block number on the disk to check.
                                        ;                    2312   2408 ; On return, (D) will contain the original bit position for
                                        ;                    2313   2409 ; this block number and (HL) will point to the address for it.
                                        ;                    2314   2410 ;
CKBITMAP: LD    A,C                     ;da35  79            2315   2411 ;determine bit number of interest.
    AND 07H                             ;da36  e6 07         2316   2412 ;compute (D)=(E)=(C and 7)+1.
    INC A                               ;da38  3c            2317   2413 
    LD  E,A                             ;da39  5f            2318   2414 ;save particular bit number.
    LD  D,A                             ;da3a  57            2319   2415 
                                        ;                    2320   2416 ;
                                        ;                    2321   2417 ;   compute (BC)=(BC)/8.
                                        ;                    2322   2418 ;
    LD  A,C                             ;da3b  79            2323   2419 
    RRCA                                ;da3c  0f            2324   2420 ;now shift right 3 bits.
    RRCA                                ;da3d  0f            2325   2421 
    RRCA                                ;da3e  0f            2326   2422 
    AND 1FH                             ;da3f  e6 1f         2327   2423 ;and clear bits 7,6,5.
    LD  C,A                             ;da41  4f            2328   2424 
    LD  A,B                             ;da42  78            2329   2425 
    ADD A,A                             ;da43  87            2330   2426 ;now shift (B) into bits 7,6,5.
    ADD A,A                             ;da44  87            2331   2427 
    ADD A,A                             ;da45  87            2332   2428 
    ADD A,A                             ;da46  87            2333   2429 
    ADD A,A                             ;da47  87            2334   2430 
    OR  C                               ;da48  b1            2335   2431 ;and add in (C).
    LD  C,A                             ;da49  4f            2336   2432 ;ok, (C) ha been completed.
    LD  A,B                             ;da4a  78            2337   2433 ;is there a better way of doing this?
    RRCA                                ;da4b  0f            2338   2434 
    RRCA                                ;da4c  0f            2339   2435 
    RRCA                                ;da4d  0f            2340   2436 
    AND 1FH                             ;da4e  e6 1f         2341   2437 
    LD  B,A                             ;da50  47            2342   2438 ;and now (B) is completed.
                                        ;                    2343   2439 ;
                                        ;                    2344   2440 ;   use this as an offset into the disk space allocation
                                        ;                    2345   2441 ; table.
                                        ;                    2346   2442 ;
    LD  HL,(ALOCVECT)                   ;da51  2a bf e1      2347   2443 
    ADD HL,BC                           ;da54  09            2348   2444 
    LD  A,(HL)                          ;da55  7e            2349   2445 ;now get correct byte.
CKBMAP1:RLCA                            ;da56  07            2350   2446 ;get correct bit into position 0.
    DEC E                               ;da57  1d            2351   2447 
    JP  NZ,CKBMAP1                      ;da58  c2 56 da      2352   2448 
    RET                                 ;da5b  c9            2353   2449 
                                        ;                    2354   2450 ;
                                        ;                    2355   2451 ;   Set or clear the bit map such that block number (BC) will be marked
                                        ;                    2356   2452 ; as used. On entry, if (E)=0 then this bit will be cleared, if it equals
                                        ;                    2357   2453 ; 1 then it will be set (don't use anyother values).
                                        ;                    2358   2454 ;
STBITMAP: PUSH  DE                      ;da5c  d5            2359   2455 
    CALL    CKBITMAP                    ;da5d  cd 35 da      2360   2456 ;get the byte of interest.
    AND 0FEH                            ;da60  e6 fe         2361   2457 ;clear the affected bit.
    POP BC                              ;da62  c1            2362   2458 
    OR  C                               ;da63  b1            2363   2459 ;and now set it acording to (C).
                                        ;                    2364   2460 ;
                                        ;                    2365   2461 ;  entry to restore the original bit position and then store
                                        ;                    2366   2462 ; in table. (A) contains the value, (D) contains the bit
                                        ;                    2367   2463 ; position (1-8), and (HL) points to the address within the
                                        ;                    2368   2464 ; space allocation table for this byte.
                                        ;                    2369   2465 ;
STBMAP1:RRCA                            ;da64  0f            2370   2466 ;restore original bit position.
    DEC D                               ;da65  15            2371   2467 
    JP  NZ,STBMAP1                      ;da66  c2 64 da      2372   2468 
    LD  (HL),A                          ;da69  77            2373   2469 ;and stor byte in table.
    RET                                 ;da6a  c9            2374   2470 
                                        ;                    2375   2471 ;
                                        ;                    2376   2472 ;   Set/clear space used bits in allocation map for this file.
                                        ;                    2377   2473 ; On entry, (C)=1 to set the map and (C)=0 to clear it.
                                        ;                    2378   2474 ;
SETFILE:CALL    FCB2HL                  ;da6b  cd 5e d9      2379   2475 ;get address of fcb
    LD  DE,16                           ;da6e  11 10 00      2380   2476 
    ADD HL,DE                           ;da71  19            2381   2477 ;get to block number bytes.
    PUSH    BC                          ;da72  c5            2382   2478 
    LD  C,17                            ;da73  0e 11         2383   2479 ;check all 17 bytes (max) of table.
SETFL1: POP DE                          ;da75  d1            2384   2480 
    DEC C                               ;da76  0d            2385   2481 ;done all bytes yet?
    RET Z                               ;da77  c8            2386   2482 
    PUSH    DE                          ;da78  d5            2387   2483 
    LD  A,(BIGDISK)                     ;da79  3a dd e1      2388   2484 ;check disk size for 16 bit block numbers.
    OR  A                               ;da7c  b7            2389   2485 
    JP  Z,SETFL2                        ;da7d  ca 88 da      2390   2486 
    PUSH    BC                          ;da80  c5            2391   2487 ;only 8 bit numbers. set (BC) to this one.
    PUSH    HL                          ;da81  e5            2392   2488 
    LD  C,(HL)                          ;da82  4e            2393   2489 ;get low byte from table, always
    LD  B,0                             ;da83  06 00         2394   2490 ;set high byte to zero.
    JP  SETFL3                          ;da85  c3 8e da      2395   2491 
SETFL2: DEC C                           ;da88  0d            2396   2492 ;for 16 bit block numbers, adjust counter.
    PUSH    BC                          ;da89  c5            2397   2493 
    LD  C,(HL)                          ;da8a  4e            2398   2494 ;now get both the low and high bytes.
    INC HL                              ;da8b  23            2399   2495 
    LD  B,(HL)                          ;da8c  46            2400   2496 
    PUSH    HL                          ;da8d  e5            2401   2497 
SETFL3: LD  A,C                         ;da8e  79            2402   2498 ;block used?
    OR  B                               ;da8f  b0            2403   2499 
    JP  Z,SETFL4                        ;da90  ca 9d da      2404   2500 
    LD  HL,(DSKSIZE)                    ;da93  2a c6 e1      2405   2501 ;is this block number within the
    LD  A,L                             ;da96  7d            2406   2502 ;space on the disk?
    SUB C                               ;da97  91            2407   2503 
    LD  A,H                             ;da98  7c            2408   2504 
    SBC A,B                             ;da99  98            2409   2505 
    CALL    NC,STBITMAP                 ;da9a  d4 5c da      2410   2506 ;yes, set the proper bit.
SETFL4: POP HL                          ;da9d  e1            2411   2507 ;point to next block number in fcb.
    INC HL                              ;da9e  23            2412   2508 
    POP BC                              ;da9f  c1            2413   2509 
    JP  SETFL1                          ;daa0  c3 75 da      2414   2510 
                                        ;                    2415   2511 ;
                                        ;                    2416   2512 ;   Construct the space used allocation bit map for the active
                                        ;                    2417   2513 ; drive. If a file name starts with '$' and it is under the
                                        ;                    2418   2514 ; current user number, then (STATUS) is set to minus 1. Otherwise
                                        ;                    2419   2515 ; it is not set at all.
                                        ;                    2420   2516 ;
BITMAP: LD  HL,(DSKSIZE)                ;daa3  2a c6 e1      2421   2517 ;compute size of allocation table.
    LD  C,3                             ;daa6  0e 03         2422   2518 
    CALL    SHIFTR                      ;daa8  cd ea d8      2423   2519 ;(HL)=(HL)/8.
    INC HL                              ;daab  23            2424   2520 ;at lease 1 byte.
    LD  B,H                             ;daac  44            2425   2521 
    LD  C,L                             ;daad  4d            2426   2522 ;set (BC) to the allocation table length.
                                        ;                    2427   2523 ;
                                        ;                    2428   2524 ;   Initialize the bitmap for this drive. Right now, the first
                                        ;                    2429   2525 ; two bytes are specified by the disk parameter block. However
                                        ;                    2430   2526 ; a patch could be entered here if it were necessary to setup
                                        ;                    2431   2527 ; this table in a special mannor. For example, the bios could
                                        ;                    2432   2528 ; determine locations of 'bad blocks' and set them as already
                                        ;                    2433   2529 ; 'used' in the map.
                                        ;                    2434   2530 ;
    LD  HL,(ALOCVECT)                   ;daae  2a bf e1      2435   2531 ;now zero out the table now.
BITMAP1:LD  (HL),0                      ;dab1  36 00         2436   2532 
    INC HL                              ;dab3  23            2437   2533 
    DEC BC                              ;dab4  0b            2438   2534 
    LD  A,B                             ;dab5  78            2439   2535 
    OR  C                               ;dab6  b1            2440   2536 
    JP  NZ,BITMAP1                      ;dab7  c2 b1 da      2441   2537 
    LD  HL,(ALLOC0)                     ;daba  2a ca e1      2442   2538 ;get initial space used by directory.
    EX  DE,HL                           ;dabd  eb            2443   2539 
    LD  HL,(ALOCVECT)                   ;dabe  2a bf e1      2444   2540 ;and put this into map.
    LD  (HL),E                          ;dac1  73            2445   2541 
    INC HL                              ;dac2  23            2446   2542 
    LD  (HL),D                          ;dac3  72            2447   2543 
                                        ;                    2448   2544 ;
                                        ;                    2449   2545 ;   End of initialization portion.
                                        ;                    2450   2546 ;
    CALL    HOMEDRV                     ;dac4  cd a1 d7      2451   2547 ;now home the drive.
    LD  HL,(SCRATCH1)                   ;dac7  2a b3 e1      2452   2548 
    LD  (HL),3                          ;daca  36 03         2453   2549 ;force next directory request to read
    INC HL                              ;dacc  23            2454   2550 ;in a sector.
    LD  (HL),0                          ;dacd  36 00         2455   2551 
    CALL    STFILPOS                    ;dacf  cd fe d9      2456   2552 ;clear initial file position also.
BITMAP2:LD  C,0FFH                      ;dad2  0e ff         2457   2553 ;read next file name in directory
    CALL    NXENTRY                     ;dad4  cd 05 da      2458   2554 ;and set checksum byte.
    CALL    CKFILPOS                    ;dad7  cd f5 d9      2459   2555 ;is there another file?
    RET Z                               ;dada  c8            2460   2556 
    CALL    FCB2HL                      ;dadb  cd 5e d9      2461   2557 ;yes, get its address.
    LD  A,0E5H                          ;dade  3e e5         2462   2558 
    CP  (HL)                            ;dae0  be            2463   2559 ;empty file entry?
    JP  Z,BITMAP2                       ;dae1  ca d2 da      2464   2560 
    LD  A,(USERNO)                      ;dae4  3a 41 d7      2465   2561 ;no, correct user number?
    CP  (HL)                            ;dae7  be            2466   2562 
    JP  NZ,BITMAP3                      ;dae8  c2 f6 da      2467   2563 
    INC HL                              ;daeb  23            2468   2564 
    LD  A,(HL)                          ;daec  7e            2469   2565 ;yes, does name start with a '$'?
    SUB '$'                             ;daed  d6 24         2470   2566 
    JP  NZ,BITMAP3                      ;daef  c2 f6 da      2471   2567 
    DEC A                               ;daf2  3d            2472   2568 ;yes, set atatus to minus one.
    LD  (STATUS),A                      ;daf3  32 45 d7      2473   2569 
BITMAP3:LD  C,1                         ;daf6  0e 01         2474   2570 ;now set this file's space as used in bit map.
    CALL    SETFILE                     ;daf8  cd 6b da      2475   2571 
    CALL    CHKNMBR                     ;dafb  cd 8c d9      2476   2572 ;keep (SCRATCH1) in bounds.
    JP  BITMAP2                         ;dafe  c3 d2 da      2477   2573 
                                        ;                    2478   2574 ;
                                        ;                    2479   2575 ;   Set the status (STATUS) and return.
                                        ;                    2480   2576 ;
STSTATUS: LD    A,(FNDSTAT)             ;db01  3a d4 e1      2481   2577 
    JP  SETSTAT                         ;db04  c3 01 d7      2482   2578 
                                        ;                    2483   2579 ;
                                        ;                    2484   2580 ;   Check extents in (A) and (C). Set the zero flag if they
                                        ;                    2485   2581 ; are the same. The number of 16k chunks of disk space that
                                        ;                    2486   2582 ; the directory extent covers is expressad is (EXTMASK+1).
                                        ;                    2487   2583 ; No registers are modified.
                                        ;                    2488   2584 ;
SAMEXT: PUSH    BC                      ;db07  c5            2489   2585 
    PUSH    AF                          ;db08  f5            2490   2586 
    LD  A,(EXTMASK)                     ;db09  3a c5 e1      2491   2587 ;get extent mask and use it to
    CPL                                 ;db0c  2f            2492   2588 ;to compare both extent numbers.
    LD  B,A                             ;db0d  47            2493   2589 ;save resulting mask here.
    LD  A,C                             ;db0e  79            2494   2590 ;mask first extent and save in (C).
    AND B                               ;db0f  a0            2495   2591 
    LD  C,A                             ;db10  4f            2496   2592 
    POP AF                              ;db11  f1            2497   2593 ;now mask second extent and compare
    AND B                               ;db12  a0            2498   2594 ;with the first one.
    SUB C                               ;db13  91            2499   2595 
    AND 1FH                             ;db14  e6 1f         2500   2596 ;(* only check buts 0-4 *)
    POP BC                              ;db16  c1            2501   2597 ;the zero flag is set if they are the same.
    RET                                 ;db17  c9            2502   2598 ;restore (BC) and return.
                                        ;                    2503   2599 ;
                                        ;                    2504   2600 ;   Search for the first occurence of a file name. On entry,
                                        ;                    2505   2601 ; register (C) should contain the number of bytes of the fcb
                                        ;                    2506   2602 ; that must match.
                                        ;                    2507   2603 ;
FINDFST:LD  A,0FFH                      ;db18  3e ff         2508   2604 
    LD  (FNDSTAT),A                     ;db1a  32 d4 e1      2509   2605 
    LD  HL,COUNTER                      ;db1d  21 d8 e1      2510   2606 ;save character count.
    LD  (HL),C                          ;db20  71            2511   2607 
    LD  HL,(PARAMS)                     ;db21  2a 43 d7      2512   2608 ;get filename to match.
    LD  (SAVEFCB),HL                    ;db24  22 d9 e1      2513   2609 ;and save.
    CALL    STFILPOS                    ;db27  cd fe d9      2514   2610 ;clear initial file position (set to 0ffffh).
    CALL    HOMEDRV                     ;db2a  cd a1 d7      2515   2611 ;home the drive.
                                        ;                    2516   2612 ;
                                        ;                    2517   2613 ;   Entry to locate the next occurence of a filename within the
                                        ;                    2518   2614 ; directory. The disk is not expected to have been changed. If
                                        ;                    2519   2615 ; it was, then it will be write protected.
                                        ;                    2520   2616 ;
FINDNXT:LD  C,0                         ;db2d  0e 00         2521   2617 ;write protect the disk if changed.
    CALL    NXENTRY                     ;db2f  cd 05 da      2522   2618 ;get next filename entry in directory.
    CALL    CKFILPOS                    ;db32  cd f5 d9      2523   2619 ;is file position = 0ffffh?
    JP  Z,FNDNXT6                       ;db35  ca 94 db      2524   2620 ;yes, exit now then.
    LD  HL,(SAVEFCB)                    ;db38  2a d9 e1      2525   2621 ;set (DE) pointing to filename to match.
    EX  DE,HL                           ;db3b  eb            2526   2622 
    LD  A,(DE)                          ;db3c  1a            2527   2623 
    CP  0E5H                            ;db3d  fe e5         2528   2624 ;empty directory entry?
    JP  Z,FNDNXT1                       ;db3f  ca 4a db      2529   2625 ;(* are we trying to reserect erased entries? *)
    PUSH    DE                          ;db42  d5            2530   2626 
    CALL    MOREFLS                     ;db43  cd 7f d9      2531   2627 ;more files in directory?
    POP DE                              ;db46  d1            2532   2628 
    JP  NC,FNDNXT6                      ;db47  d2 94 db      2533   2629 ;no more. Exit now.
FNDNXT1:CALL    FCB2HL                  ;db4a  cd 5e d9      2534   2630 ;get address of this fcb in directory.
    LD  A,(COUNTER)                     ;db4d  3a d8 e1      2535   2631 ;get number of bytes (characters) to check.
    LD  C,A                             ;db50  4f            2536   2632 
    LD  B,0                             ;db51  06 00         2537   2633 ;initialize byte position counter.
FNDNXT2:LD  A,C                         ;db53  79            2538   2634 ;are we done with the compare?
    OR  A                               ;db54  b7            2539   2635 
    JP  Z,FNDNXT5                       ;db55  ca 83 db      2540   2636 
    LD  A,(DE)                          ;db58  1a            2541   2637 ;no, check next byte.
    CP  '?'                             ;db59  fe 3f         2542   2638 ;don't care about this character?
    JP  Z,FNDNXT4                       ;db5b  ca 7c db      2543   2639 
    LD  A,B                             ;db5e  78            2544   2640 ;get bytes position in fcb.
    CP  13                              ;db5f  fe 0d         2545   2641 ;don't care about the thirteenth byte either.
    JP  Z,FNDNXT4                       ;db61  ca 7c db      2546   2642 
    CP  12                              ;db64  fe 0c         2547   2643 ;extent byte?
    LD  A,(DE)                          ;db66  1a            2548   2644 
    JP  Z,FNDNXT3                       ;db67  ca 73 db      2549   2645 
    SUB (HL)                            ;db6a  96            2550   2646 ;otherwise compare characters.
    AND 7FH                             ;db6b  e6 7f         2551   2647 
    JP  NZ,FINDNXT                      ;db6d  c2 2d db      2552   2648 ;not the same, check next entry.
    JP  FNDNXT4                         ;db70  c3 7c db      2553   2649 ;so far so good, keep checking.
FNDNXT3:PUSH    BC                      ;db73  c5            2554   2650 ;check the extent byte here.
    LD  C,(HL)                          ;db74  4e            2555   2651 
    CALL    SAMEXT                      ;db75  cd 07 db      2556   2652 
    POP BC                              ;db78  c1            2557   2653 
    JP  NZ,FINDNXT                      ;db79  c2 2d db      2558   2654 ;not the same, look some more.
                                        ;                    2559   2655 ;
                                        ;                    2560   2656 ;   So far the names compare. Bump pointers to the next byte
                                        ;                    2561   2657 ; and continue until all (C) characters have been checked.
                                        ;                    2562   2658 ;
FNDNXT4:INC DE                          ;db7c  13            2563   2659 ;bump pointers.
    INC HL                              ;db7d  23            2564   2660 
    INC B                               ;db7e  04            2565   2661 
    DEC C                               ;db7f  0d            2566   2662 ;adjust character counter.
    JP  FNDNXT2                         ;db80  c3 53 db      2567   2663 
FNDNXT5:LD  A,(FILEPOS)                 ;db83  3a ea e1      2568   2664 ;return the position of this entry.
    AND 03H                             ;db86  e6 03         2569   2665 
    LD  (STATUS),A                      ;db88  32 45 d7      2570   2666 
    LD  HL,FNDSTAT                      ;db8b  21 d4 e1      2571   2667 
    LD  A,(HL)                          ;db8e  7e            2572   2668 
    RLA                                 ;db8f  17            2573   2669 
    RET NC                              ;db90  d0            2574   2670 
    XOR A                               ;db91  af            2575   2671 
    LD  (HL),A                          ;db92  77            2576   2672 
    RET                                 ;db93  c9            2577   2673 
                                        ;                    2578   2674 ;
                                        ;                    2579   2675 ;   Filename was not found. Set appropriate status.
                                        ;                    2580   2676 ;
FNDNXT6:CALL    STFILPOS                ;db94  cd fe d9      2581   2677 ;set (FILEPOS) to 0ffffh.
    LD  A,0FFH                          ;db97  3e ff         2582   2678 ;say not located.
    JP  SETSTAT                         ;db99  c3 01 d7      2583   2679 
                                        ;                    2584   2680 ;
                                        ;                    2585   2681 ;   Erase files from the directory. Only the first byte of the
                                        ;                    2586   2682 ; fcb will be affected. It is set to (E5).
                                        ;                    2587   2683 ;
ERAFILE:CALL    CHKWPRT                 ;db9c  cd 54 d9      2588   2684 ;is disk write protected?
    LD  C,12                            ;db9f  0e 0c         2589   2685 ;only compare file names.
    CALL    FINDFST                     ;dba1  cd 18 db      2590   2686 ;get first file name.
ERAFIL1:CALL    CKFILPOS                ;dba4  cd f5 d9      2591   2687 ;any found?
    RET Z                               ;dba7  c8            2592   2688 ;nope, we must be done.
    CALL    CHKROFL                     ;dba8  cd 44 d9      2593   2689 ;is file read only?
    CALL    FCB2HL                      ;dbab  cd 5e d9      2594   2690 ;nope, get address of fcb and
    LD  (HL),0E5H                       ;dbae  36 e5         2595   2691 ;set first byte to 'empty'.
    LD  C,0                             ;dbb0  0e 00         2596   2692 ;clear the space from the bit map.
    CALL    SETFILE                     ;dbb2  cd 6b da      2597   2693 
    CALL    DIRWRITE                    ;dbb5  cd c6 d9      2598   2694 ;now write the directory sector back out.
    CALL    FINDNXT                     ;dbb8  cd 2d db      2599   2695 ;find the next file name.
    JP  ERAFIL1                         ;dbbb  c3 a4 db      2600   2696 ;and repeat process.
                                        ;                    2601   2697 ;
                                        ;                    2602   2698 ;   Look through the space allocation map (bit map) for the
                                        ;                    2603   2699 ; next available block. Start searching at block number (BC-1).
                                        ;                    2604   2700 ; The search procedure is to look for an empty block that is
                                        ;                    2605   2701 ; before the starting block. If not empty, look at a later
                                        ;                    2606   2702 ; block number. In this way, we return the closest empty block
                                        ;                    2607   2703 ; on either side of the 'target' block number. This will speed
                                        ;                    2608   2704 ; access on random devices. For serial devices, this should be
                                        ;                    2609   2705 ; changed to look in the forward direction first and then start
                                        ;                    2610   2706 ; at the front and search some more.
                                        ;                    2611   2707 ;
                                        ;                    2612   2708 ;   On return, (DE)= block number that is empty and (HL) =0
                                        ;                    2613   2709 ; if no empry block was found.
                                        ;                    2614   2710 ;
FNDSPACE: LD    D,B                     ;dbbe  50            2615   2711 ;set (DE) as the block that is checked.
    LD  E,C                             ;dbbf  59            2616   2712 
                                        ;                    2617   2713 ;
                                        ;                    2618   2714 ;   Look before target block. Registers (BC) are used as the lower
                                        ;                    2619   2715 ; pointer and (DE) as the upper pointer.
                                        ;                    2620   2716 ;
FNDSPA1:LD  A,C                         ;dbc0  79            2621   2717 ;is block 0 specified?
    OR  B                               ;dbc1  b0            2622   2718 
    JP  Z,FNDSPA2                       ;dbc2  ca d1 db      2623   2719 
    DEC BC                              ;dbc5  0b            2624   2720 ;nope, check previous block.
    PUSH    DE                          ;dbc6  d5            2625   2721 
    PUSH    BC                          ;dbc7  c5            2626   2722 
    CALL    CKBITMAP                    ;dbc8  cd 35 da      2627   2723 
    RRA                                 ;dbcb  1f            2628   2724 ;is this block empty?
    JP  NC,FNDSPA3                      ;dbcc  d2 ec db      2629   2725 ;yes. use this.
                                        ;                    2630   2726 ;
                                        ;                    2631   2727 ;   Note that the above logic gets the first block that it finds
                                        ;                    2632   2728 ; that is empty. Thus a file could be written 'backward' making
                                        ;                    2633   2729 ; it very slow to access. This could be changed to look for the
                                        ;                    2634   2730 ; first empty block and then continue until the start of this
                                        ;                    2635   2731 ; empty space is located and then used that starting block.
                                        ;                    2636   2732 ; This should help speed up access to some files especially on
                                        ;                    2637   2733 ; a well used disk with lots of fairly small 'holes'.
                                        ;                    2638   2734 ;
    POP BC                              ;dbcf  c1            2639   2735 ;nope, check some more.
    POP DE                              ;dbd0  d1            2640   2736 
                                        ;                    2641   2737 ;
                                        ;                    2642   2738 ;   Now look after target block.
                                        ;                    2643   2739 ;
FNDSPA2:LD  HL,(DSKSIZE)                ;dbd1  2a c6 e1      2644   2740 ;is block (DE) within disk limits?
    LD  A,E                             ;dbd4  7b            2645   2741 
    SUB L                               ;dbd5  95            2646   2742 
    LD  A,D                             ;dbd6  7a            2647   2743 
    SBC A,H                             ;dbd7  9c            2648   2744 
    JP  NC,FNDSPA4                      ;dbd8  d2 f4 db      2649   2745 
    INC DE                              ;dbdb  13            2650   2746 ;yes, move on to next one.
    PUSH    BC                          ;dbdc  c5            2651   2747 
    PUSH    DE                          ;dbdd  d5            2652   2748 
    LD  B,D                             ;dbde  42            2653   2749 
    LD  C,E                             ;dbdf  4b            2654   2750 
    CALL    CKBITMAP                    ;dbe0  cd 35 da      2655   2751 ;check it.
    RRA                                 ;dbe3  1f            2656   2752 ;empty?
    JP  NC,FNDSPA3                      ;dbe4  d2 ec db      2657   2753 
    POP DE                              ;dbe7  d1            2658   2754 ;nope, continue searching.
    POP BC                              ;dbe8  c1            2659   2755 
    JP  FNDSPA1                         ;dbe9  c3 c0 db      2660   2756 
                                        ;                    2661   2757 ;
                                        ;                    2662   2758 ;   Empty block found. Set it as used and return with (HL)
                                        ;                    2663   2759 ; pointing to it (true?).
                                        ;                    2664   2760 ;
FNDSPA3:RLA                             ;dbec  17            2665   2761 ;reset byte.
    INC A                               ;dbed  3c            2666   2762 ;and set bit 0.
    CALL    STBMAP1                     ;dbee  cd 64 da      2667   2763 ;update bit map.
    POP HL                              ;dbf1  e1            2668   2764 ;set return registers.
    POP DE                              ;dbf2  d1            2669   2765 
    RET                                 ;dbf3  c9            2670   2766 
                                        ;                    2671   2767 ;
                                        ;                    2672   2768 ;   Free block was not found. If (BC) is not zero, then we have
                                        ;                    2673   2769 ; not checked all of the disk space.
                                        ;                    2674   2770 ;
FNDSPA4:LD  A,C                         ;dbf4  79            2675   2771 
    OR  B                               ;dbf5  b0            2676   2772 
    JP  NZ,FNDSPA1                      ;dbf6  c2 c0 db      2677   2773 
    LD  HL,0                            ;dbf9  21 00 00      2678   2774 ;set 'not found' status.
    RET                                 ;dbfc  c9            2679   2775 
                                        ;                    2680   2776 ;
                                        ;                    2681   2777 ;   Move a complete fcb entry into the directory and write it.
                                        ;                    2682   2778 ;
FCBSET: LD  C,0                         ;dbfd  0e 00         2683   2779 
    LD  E,32                            ;dbff  1e 20         2684   2780 ;length of each entry.
                                        ;                    2685   2781 ;
                                        ;                    2686   2782 ;   Move (E) bytes from the fcb pointed to by (PARAMS) into
                                        ;                    2687   2783 ; fcb in directory starting at relative byte (C). This updated
                                        ;                    2688   2784 ; directory buffer is then written to the disk.
                                        ;                    2689   2785 ;
UPDATE: PUSH    DE                      ;dc01  d5            2690   2786 
    LD  B,0                             ;dc02  06 00         2691   2787 ;set (BC) to relative byte position.
    LD  HL,(PARAMS)                     ;dc04  2a 43 d7      2692   2788 ;get address of fcb.
    ADD HL,BC                           ;dc07  09            2693   2789 ;compute starting byte.
    EX  DE,HL                           ;dc08  eb            2694   2790 
    CALL    FCB2HL                      ;dc09  cd 5e d9      2695   2791 ;get address of fcb to update in directory.
    POP BC                              ;dc0c  c1            2696   2792 ;set (C) to number of bytes to change.
    CALL    DE2HL                       ;dc0d  cd 4f d7      2697   2793 
UPDATE1:CALL    TRKSEC                  ;dc10  cd c3 d7      2698   2794 ;determine the track and sector affected.
    JP  DIRWRITE                        ;dc13  c3 c6 d9      2699   2795 ;then write this sector out.
                                        ;                    2700   2796 ;
                                        ;                    2701   2797 ;   Routine to change the name of all files on the disk with a
                                        ;                    2702   2798 ; specified name. The fcb contains the current name as the
                                        ;                    2703   2799 ; first 12 characters and the new name 16 bytes into the fcb.
                                        ;                    2704   2800 ;
CHGNAMES: CALL  CHKWPRT                 ;dc16  cd 54 d9      2705   2801 ;check for a write protected disk.
    LD  C,12                            ;dc19  0e 0c         2706   2802 ;match first 12 bytes of fcb only.
    CALL    FINDFST                     ;dc1b  cd 18 db      2707   2803 ;get first name.
    LD  HL,(PARAMS)                     ;dc1e  2a 43 d7      2708   2804 ;get address of fcb.
    LD  A,(HL)                          ;dc21  7e            2709   2805 ;get user number.
    LD  DE,16                           ;dc22  11 10 00      2710   2806 ;move over to desired name.
    ADD HL,DE                           ;dc25  19            2711   2807 
    LD  (HL),A                          ;dc26  77            2712   2808 ;keep same user number.
CHGNAM1:CALL    CKFILPOS                ;dc27  cd f5 d9      2713   2809 ;any matching file found?
    RET Z                               ;dc2a  c8            2714   2810 ;no, we must be done.
    CALL    CHKROFL                     ;dc2b  cd 44 d9      2715   2811 ;check for read only file.
    LD  C,16                            ;dc2e  0e 10         2716   2812 ;start 16 bytes into fcb.
    LD  E,12                            ;dc30  1e 0c         2717   2813 ;and update the first 12 bytes of directory.
    CALL    UPDATE                      ;dc32  cd 01 dc      2718   2814 
    CALL    FINDNXT                     ;dc35  cd 2d db      2719   2815 ;get te next file name.
    JP  CHGNAM1                         ;dc38  c3 27 dc      2720   2816 ;and continue.
                                        ;                    2721   2817 ;
                                        ;                    2722   2818 ;   Update a files attributes. The procedure is to search for
                                        ;                    2723   2819 ; every file with the same name as shown in fcb (ignoring bit 7)
                                        ;                    2724   2820 ; and then to update it (which includes bit 7). No other changes
                                        ;                    2725   2821 ; are made.
                                        ;                    2726   2822 ;
SAVEATTR: LD    C,12                    ;dc3b  0e 0c         2727   2823 ;match first 12 bytes.
    CALL    FINDFST                     ;dc3d  cd 18 db      2728   2824 ;look for first filename.
SAVATR1:CALL    CKFILPOS                ;dc40  cd f5 d9      2729   2825 ;was one found?
    RET Z                               ;dc43  c8            2730   2826 ;nope, we must be done.
    LD  C,0                             ;dc44  0e 00         2731   2827 ;yes, update the first 12 bytes now.
    LD  E,12                            ;dc46  1e 0c         2732   2828 
    CALL    UPDATE                      ;dc48  cd 01 dc      2733   2829 ;update filename and write directory.
    CALL    FINDNXT                     ;dc4b  cd 2d db      2734   2830 ;and get the next file.
    JP  SAVATR1                         ;dc4e  c3 40 dc      2735   2831 ;then continue until done.
                                        ;                    2736   2832 ;
                                        ;                    2737   2833 ;  Open a file (name specified in fcb).
                                        ;                    2738   2834 ;
OPENIT: LD  C,15                        ;dc51  0e 0f         2739   2835 ;compare the first 15 bytes.
    CALL    FINDFST                     ;dc53  cd 18 db      2740   2836 ;get the first one in directory.
    CALL    CKFILPOS                    ;dc56  cd f5 d9      2741   2837 ;any at all?
    RET Z                               ;dc59  c8            2742   2838 
OPENIT1:CALL    SETEXT                  ;dc5a  cd a6 d8      2743   2839 ;point to extent byte within users fcb.
    LD  A,(HL)                          ;dc5d  7e            2744   2840 ;and get it.
    PUSH    AF                          ;dc5e  f5            2745   2841 ;save it and address.
    PUSH    HL                          ;dc5f  e5            2746   2842 
    CALL    FCB2HL                      ;dc60  cd 5e d9      2747   2843 ;point to fcb in directory.
    EX  DE,HL                           ;dc63  eb            2748   2844 
    LD  HL,(PARAMS)                     ;dc64  2a 43 d7      2749   2845 ;this is the users copy.
    LD  C,32                            ;dc67  0e 20         2750   2846 ;move it into users space.
    PUSH    DE                          ;dc69  d5            2751   2847 
    CALL    DE2HL                       ;dc6a  cd 4f d7      2752   2848 
    CALL    SETS2B7                     ;dc6d  cd 78 d9      2753   2849 ;set bit 7 in 's2' byte (unmodified).
    POP DE                              ;dc70  d1            2754   2850 ;now get the extent byte from this fcb.
    LD  HL,12                           ;dc71  21 0c 00      2755   2851 
    ADD HL,DE                           ;dc74  19            2756   2852 
    LD  C,(HL)                          ;dc75  4e            2757   2853 ;into (C).
    LD  HL,15                           ;dc76  21 0f 00      2758   2854 ;now get the record count byte into (B).
    ADD HL,DE                           ;dc79  19            2759   2855 
    LD  B,(HL)                          ;dc7a  46            2760   2856 
    POP HL                              ;dc7b  e1            2761   2857 ;keep the same extent as the user had originally.
    POP AF                              ;dc7c  f1            2762   2858 
    LD  (HL),A                          ;dc7d  77            2763   2859 
    LD  A,C                             ;dc7e  79            2764   2860 ;is it the same as in the directory fcb?
    CP  (HL)                            ;dc7f  be            2765   2861 
    LD  A,B                             ;dc80  78            2766   2862 ;if yes, then use the same record count.
    JP  Z,OPENIT2                       ;dc81  ca 8b dc      2767   2863 
    LD  A,0                             ;dc84  3e 00         2768   2864 ;if the user specified an extent greater than
    JP  C,OPENIT2                       ;dc86  da 8b dc      2769   2865 ;the one in the directory, then set record count to 0.
    LD  A,128                           ;dc89  3e 80         2770   2866 ;otherwise set to maximum.
OPENIT2:LD  HL,(PARAMS)                 ;dc8b  2a 43 d7      2771   2867 ;set record count in users fcb to (A).
    LD  DE,15                           ;dc8e  11 0f 00      2772   2868 
    ADD HL,DE                           ;dc91  19            2773   2869 ;compute relative position.
    LD  (HL),A                          ;dc92  77            2774   2870 ;and set the record count.
    RET                                 ;dc93  c9            2775   2871 
                                        ;                    2776   2872 ;
                                        ;                    2777   2873 ;   Move two bytes from (DE) to (HL) if (and only if) (HL)
                                        ;                    2778   2874 ; point to a zero value (16 bit).
                                        ;                    2779   2875 ;   Return with zero flag set it (DE) was moved. Registers (DE)
                                        ;                    2780   2876 ; and (HL) are not changed. However (A) is.
                                        ;                    2781   2877 ;
MOVEWORD: LD    A,(HL)                  ;dc94  7e            2782   2878 ;check for a zero word.
    INC HL                              ;dc95  23            2783   2879 
    OR  (HL)                            ;dc96  b6            2784   2880 ;both bytes zero?
    DEC HL                              ;dc97  2b            2785   2881 
    RET NZ                              ;dc98  c0            2786   2882 ;nope, just return.
    LD  A,(DE)                          ;dc99  1a            2787   2883 ;yes, move two bytes from (DE) into
    LD  (HL),A                          ;dc9a  77            2788   2884 ;this zero space.
    INC DE                              ;dc9b  13            2789   2885 
    INC HL                              ;dc9c  23            2790   2886 
    LD  A,(DE)                          ;dc9d  1a            2791   2887 
    LD  (HL),A                          ;dc9e  77            2792   2888 
    DEC DE                              ;dc9f  1b            2793   2889 ;don't disturb these registers.
    DEC HL                              ;dca0  2b            2794   2890 
    RET                                 ;dca1  c9            2795   2891 
                                        ;                    2796   2892 ;
                                        ;                    2797   2893 ;   Get here to close a file specified by (fcb).
                                        ;                    2798   2894 ;
CLOSEIT:XOR A                           ;dca2  af            2799   2895 ;clear status and file position bytes.
    LD  (STATUS),A                      ;dca3  32 45 d7      2800   2896 
    LD  (FILEPOS),A                     ;dca6  32 ea e1      2801   2897 
    LD  (FILEPOS+1),A                   ;dca9  32 eb e1      2802   2898 
    CALL    GETWPRT                     ;dcac  cd 1e d9      2803   2899 ;get write protect bit for this drive.
    RET NZ                              ;dcaf  c0            2804   2900 ;just return if it is set.
    CALL    GETS2                       ;dcb0  cd 69 d9      2805   2901 ;else get the 's2' byte.
    AND 80H                             ;dcb3  e6 80         2806   2902 ;and look at bit 7 (file unmodified?).
    RET NZ                              ;dcb5  c0            2807   2903 ;just return if set.
    LD  C,15                            ;dcb6  0e 0f         2808   2904 ;else look up this file in directory.
    CALL    FINDFST                     ;dcb8  cd 18 db      2809   2905 
    CALL    CKFILPOS                    ;dcbb  cd f5 d9      2810   2906 ;was it found?
    RET Z                               ;dcbe  c8            2811   2907 ;just return if not.
    LD  BC,16                           ;dcbf  01 10 00      2812   2908 ;set (HL) pointing to records used section.
    CALL    FCB2HL                      ;dcc2  cd 5e d9      2813   2909 
    ADD HL,BC                           ;dcc5  09            2814   2910 
    EX  DE,HL                           ;dcc6  eb            2815   2911 
    LD  HL,(PARAMS)                     ;dcc7  2a 43 d7      2816   2912 ;do the same for users specified fcb.
    ADD HL,BC                           ;dcca  09            2817   2913 
    LD  C,16                            ;dccb  0e 10         2818   2914 ;this many bytes are present in this extent.
CLOSEIT1: LD    A,(BIGDISK)             ;dccd  3a dd e1      2819   2915 ;8 or 16 bit record numbers?
    OR  A                               ;dcd0  b7            2820   2916 
    JP  Z,CLOSEIT4                      ;dcd1  ca e8 dc      2821   2917 
    LD  A,(HL)                          ;dcd4  7e            2822   2918 ;just 8 bit. Get one from users fcb.
    OR  A                               ;dcd5  b7            2823   2919 
    LD  A,(DE)                          ;dcd6  1a            2824   2920 ;now get one from directory fcb.
    JP  NZ,CLOSEIT2                     ;dcd7  c2 db dc      2825   2921 
    LD  (HL),A                          ;dcda  77            2826   2922 ;users byte was zero. Update from directory.
CLOSEIT2: OR    A                       ;dcdb  b7            2827   2923 
    JP  NZ,CLOSEIT3                     ;dcdc  c2 e1 dc      2828   2924 
    LD  A,(HL)                          ;dcdf  7e            2829   2925 ;directories byte was zero, update from users fcb.
    LD  (DE),A                          ;dce0  12            2830   2926 
CLOSEIT3: CP    (HL)                    ;dce1  be            2831   2927 ;if neither one of these bytes were zero,
    JP  NZ,CLOSEIT7                     ;dce2  c2 1f dd      2832   2928 ;then close error if they are not the same.
    JP  CLOSEIT5                        ;dce5  c3 fd dc      2833   2929 ;ok so far, get to next byte in fcbs.
CLOSEIT4: CALL  MOVEWORD                ;dce8  cd 94 dc      2834   2930 ;update users fcb if it is zero.
    EX  DE,HL                           ;dceb  eb            2835   2931 
    CALL    MOVEWORD                    ;dcec  cd 94 dc      2836   2932 ;update directories fcb if it is zero.
    EX  DE,HL                           ;dcef  eb            2837   2933 
    LD  A,(DE)                          ;dcf0  1a            2838   2934 ;if these two values are no different,
    CP  (HL)                            ;dcf1  be            2839   2935 ;then a close error occured.
    JP  NZ,CLOSEIT7                     ;dcf2  c2 1f dd      2840   2936 
    INC DE                              ;dcf5  13            2841   2937 ;check second byte.
    INC HL                              ;dcf6  23            2842   2938 
    LD  A,(DE)                          ;dcf7  1a            2843   2939 
    CP  (HL)                            ;dcf8  be            2844   2940 
    JP  NZ,CLOSEIT7                     ;dcf9  c2 1f dd      2845   2941 
    DEC C                               ;dcfc  0d            2846   2942 ;remember 16 bit values.
CLOSEIT5: INC   DE                      ;dcfd  13            2847   2943 ;bump to next item in table.
    INC HL                              ;dcfe  23            2848   2944 
    DEC C                               ;dcff  0d            2849   2945 ;there are 16 entries only.
    JP  NZ,CLOSEIT1                     ;dd00  c2 cd dc      2850   2946 ;continue if more to do.
    LD  BC,0FFECH                       ;dd03  01 ec ff      2851   2947 ;backup 20 places (extent byte).
    ADD HL,BC                           ;dd06  09            2852   2948 
    EX  DE,HL                           ;dd07  eb            2853   2949 
    ADD HL,BC                           ;dd08  09            2854   2950 
    LD  A,(DE)                          ;dd09  1a            2855   2951 
    CP  (HL)                            ;dd0a  be            2856   2952 ;directory's extent already greater than the
    JP  C,CLOSEIT6                      ;dd0b  da 17 dd      2857   2953 ;users extent?
    LD  (HL),A                          ;dd0e  77            2858   2954 ;no, update directory extent.
    LD  BC,3                            ;dd0f  01 03 00      2859   2955 ;and update the record count byte in
    ADD HL,BC                           ;dd12  09            2860   2956 ;directories fcb.
    EX  DE,HL                           ;dd13  eb            2861   2957 
    ADD HL,BC                           ;dd14  09            2862   2958 
    LD  A,(HL)                          ;dd15  7e            2863   2959 ;get from user.
    LD  (DE),A                          ;dd16  12            2864   2960 ;and put in directory.
CLOSEIT6: LD    A,0FFH                  ;dd17  3e ff         2865   2961 ;set 'was open and is now closed' byte.
    LD  (CLOSEFLG),A                    ;dd19  32 d2 e1      2866   2962 
    JP  UPDATE1                         ;dd1c  c3 10 dc      2867   2963 ;update the directory now.
CLOSEIT7: LD    HL,STATUS               ;dd1f  21 45 d7      2868   2964 ;set return status and then return.
    DEC (HL)                            ;dd22  35            2869   2965 
    RET                                 ;dd23  c9            2870   2966 
                                        ;                    2871   2967 ;
                                        ;                    2872   2968 ;   Routine to get the next empty space in the directory. It
                                        ;                    2873   2969 ; will then be cleared for use.
                                        ;                    2874   2970 ;
GETEMPTY: CALL  CHKWPRT                 ;dd24  cd 54 d9      2875   2971 ;make sure disk is not write protected.
    LD  HL,(PARAMS)                     ;dd27  2a 43 d7      2876   2972 ;save current parameters (fcb).
    PUSH    HL                          ;dd2a  e5            2877   2973 
    LD  HL,EMPTYFCB                     ;dd2b  21 ac e1      2878   2974 ;use special one for empty space.
    LD  (PARAMS),HL                     ;dd2e  22 43 d7      2879   2975 
    LD  C,1                             ;dd31  0e 01         2880   2976 ;search for first empty spot in directory.
    CALL    FINDFST                     ;dd33  cd 18 db      2881   2977 ;(* only check first byte *)
    CALL    CKFILPOS                    ;dd36  cd f5 d9      2882   2978 ;none?
    POP HL                              ;dd39  e1            2883   2979 
    LD  (PARAMS),HL                     ;dd3a  22 43 d7      2884   2980 ;restore original fcb address.
    RET Z                               ;dd3d  c8            2885   2981 ;return if no more space.
    EX  DE,HL                           ;dd3e  eb            2886   2982 
    LD  HL,15                           ;dd3f  21 0f 00      2887   2983 ;point to number of records for this file.
    ADD HL,DE                           ;dd42  19            2888   2984 
    LD  C,17                            ;dd43  0e 11         2889   2985 ;and clear all of this space.
    XOR A                               ;dd45  af            2890   2986 
GETMT1: LD  (HL),A                      ;dd46  77            2891   2987 
    INC HL                              ;dd47  23            2892   2988 
    DEC C                               ;dd48  0d            2893   2989 
    JP  NZ,GETMT1                       ;dd49  c2 46 dd      2894   2990 
    LD  HL,13                           ;dd4c  21 0d 00      2895   2991 ;clear the 's1' byte also.
    ADD HL,DE                           ;dd4f  19            2896   2992 
    LD  (HL),A                          ;dd50  77            2897   2993 
    CALL    CHKNMBR                     ;dd51  cd 8c d9      2898   2994 ;keep (SCRATCH1) within bounds.
    CALL    FCBSET                      ;dd54  cd fd db      2899   2995 ;write out this fcb entry to directory.
    JP  SETS2B7                         ;dd57  c3 78 d9      2900   2996 ;set 's2' byte bit 7 (unmodified at present).
                                        ;                    2901   2997 ;
                                        ;                    2902   2998 ;   Routine to close the current extent and open the next one
                                        ;                    2903   2999 ; for reading.
                                        ;                    2904   3000 ;
GETNEXT:XOR A                           ;dd5a  af            2905   3001 
    LD  (CLOSEFLG),A                    ;dd5b  32 d2 e1      2906   3002 ;clear close flag.
    CALL    CLOSEIT                     ;dd5e  cd a2 dc      2907   3003 ;close this extent.
    CALL    CKFILPOS                    ;dd61  cd f5 d9      2908   3004 
    RET Z                               ;dd64  c8            2909   3005 ;not there???
    LD  HL,(PARAMS)                     ;dd65  2a 43 d7      2910   3006 ;get extent byte.
    LD  BC,12                           ;dd68  01 0c 00      2911   3007 
    ADD HL,BC                           ;dd6b  09            2912   3008 
    LD  A,(HL)                          ;dd6c  7e            2913   3009 ;and increment it.
    INC A                               ;dd6d  3c            2914   3010 
    AND 1FH                             ;dd6e  e6 1f         2915   3011 ;keep within range 0-31.
    LD  (HL),A                          ;dd70  77            2916   3012 
    JP  Z,GTNEXT1                       ;dd71  ca 83 dd      2917   3013 ;overflow?
    LD  B,A                             ;dd74  47            2918   3014 ;mask extent byte.
    LD  A,(EXTMASK)                     ;dd75  3a c5 e1      2919   3015 
    AND B                               ;dd78  a0            2920   3016 
    LD  HL,CLOSEFLG                     ;dd79  21 d2 e1      2921   3017 ;check close flag (0ffh is ok).
    AND (HL)                            ;dd7c  a6            2922   3018 
    JP  Z,GTNEXT2                       ;dd7d  ca 8e dd      2923   3019 ;if zero, we must read in next extent.
    JP  GTNEXT3                         ;dd80  c3 ac dd      2924   3020 ;else, it is already in memory.
GTNEXT1:LD  BC,2                        ;dd83  01 02 00      2925   3021 ;Point to the 's2' byte.
    ADD HL,BC                           ;dd86  09            2926   3022 
    INC (HL)                            ;dd87  34            2927   3023 ;and bump it.
    LD  A,(HL)                          ;dd88  7e            2928   3024 ;too many extents?
    AND 0FH                             ;dd89  e6 0f         2929   3025 
    JP  Z,GTNEXT5                       ;dd8b  ca b6 dd      2930   3026 ;yes, set error code.
                                        ;                    2931   3027 ;
                                        ;                    2932   3028 ;   Get here to open the next extent.
                                        ;                    2933   3029 ;
GTNEXT2:LD  C,15                        ;dd8e  0e 0f         2934   3030 ;set to check first 15 bytes of fcb.
    CALL    FINDFST                     ;dd90  cd 18 db      2935   3031 ;find the first one.
    CALL    CKFILPOS                    ;dd93  cd f5 d9      2936   3032 ;none available?
    JP  NZ,GTNEXT3                      ;dd96  c2 ac dd      2937   3033 
    LD  A,(RDWRTFLG)                    ;dd99  3a d3 e1      2938   3034 ;no extent present. Can we open an empty one?
    INC A                               ;dd9c  3c            2939   3035 ;0ffh means reading (so not possible).
    JP  Z,GTNEXT5                       ;dd9d  ca b6 dd      2940   3036 ;or an error.
    CALL    GETEMPTY                    ;dda0  cd 24 dd      2941   3037 ;we are writing, get an empty entry.
    CALL    CKFILPOS                    ;dda3  cd f5 d9      2942   3038 ;none?
    JP  Z,GTNEXT5                       ;dda6  ca b6 dd      2943   3039 ;error if true.
    JP  GTNEXT4                         ;dda9  c3 af dd      2944   3040 ;else we are almost done.
GTNEXT3:CALL    OPENIT1                 ;ddac  cd 5a dc      2945   3041 ;open this extent.
GTNEXT4:CALL    STRDATA                 ;ddaf  cd bb d8      2946   3042 ;move in updated data (rec #, extent #, etc.)
    XOR A                               ;ddb2  af            2947   3043 ;clear status and return.
    JP  SETSTAT                         ;ddb3  c3 01 d7      2948   3044 
                                        ;                    2949   3045 ;
                                        ;                    2950   3046 ;   Error in extending the file. Too many extents were needed
                                        ;                    2951   3047 ; or not enough space on the disk.
                                        ;                    2952   3048 ;
GTNEXT5:CALL    IOERR1                  ;ddb6  cd 05 d7      2953   3049 ;set error code, clear bit 7 of 's2'
    JP  SETS2B7                         ;ddb9  c3 78 d9      2954   3050 ;so this is not written on a close.
                                        ;                    2955   3051 ;
                                        ;                    2956   3052 ;   Read a sequential file.
                                        ;                    2957   3053 ;
RDSEQ:  LD  A,1                         ;ddbc  3e 01         2958   3054 ;set sequential access mode.
    LD  (MODE),A                        ;ddbe  32 d5 e1      2959   3055 
RDSEQ1: LD  A,0FFH                      ;ddc1  3e ff         2960   3056 ;don't allow reading unwritten space.
    LD  (RDWRTFLG),A                    ;ddc3  32 d3 e1      2961   3057 
    CALL    STRDATA                     ;ddc6  cd bb d8      2962   3058 ;put rec# and ext# into fcb.
    LD  A,(SAVNREC)                     ;ddc9  3a e3 e1      2963   3059 ;get next record to read.
    LD  HL,SAVNXT                       ;ddcc  21 e1 e1      2964   3060 ;get number of records in extent.
    CP  (HL)                            ;ddcf  be            2965   3061 ;within this extent?
    JP  C,RDSEQ2                        ;ddd0  da e6 dd      2966   3062 
    CP  128                             ;ddd3  fe 80         2967   3063 ;no. Is this extent fully used?
    JP  NZ,RDSEQ3                       ;ddd5  c2 fb dd      2968   3064 ;no. End-of-file.
    CALL    GETNEXT                     ;ddd8  cd 5a dd      2969   3065 ;yes, open the next one.
    XOR A                               ;dddb  af            2970   3066 ;reset next record to read.
    LD  (SAVNREC),A                     ;dddc  32 e3 e1      2971   3067 
    LD  A,(STATUS)                      ;dddf  3a 45 d7      2972   3068 ;check on open, successful?
    OR  A                               ;dde2  b7            2973   3069 
    JP  NZ,RDSEQ3                       ;dde3  c2 fb dd      2974   3070 ;no, error.
RDSEQ2: CALL    COMBLK                  ;dde6  cd 77 d8      2975   3071 ;ok. compute block number to read.
    CALL    CHKBLK                      ;dde9  cd 84 d8      2976   3072 ;check it. Within bounds?
    JP  Z,RDSEQ3                        ;ddec  ca fb dd      2977   3073 ;no, error.
    CALL    LOGICAL                     ;ddef  cd 8a d8      2978   3074 ;convert (BLKNMBR) to logical sector (128 byte).
    CALL    TRKSEC1                     ;ddf2  cd d1 d7      2979   3075 ;set the track and sector for this block #.
    CALL    DOREAD                      ;ddf5  cd b2 d7      2980   3076 ;and read it.
    JP  SETNREC                         ;ddf8  c3 d2 d8      2981   3077 ;and set the next record to be accessed.
                                        ;                    2982   3078 ;
                                        ;                    2983   3079 ;   Read error occured. Set status and return.
                                        ;                    2984   3080 ;
RDSEQ3: JP  IOERR1                      ;ddfb  c3 05 d7      2985   3081 
                                        ;                    2986   3082 ;
                                        ;                    2987   3083 ;   Write the next sequential record.
                                        ;                    2988   3084 ;
WTSEQ:  LD  A,1                         ;ddfe  3e 01         2989   3085 ;set sequential access mode.
    LD  (MODE),A                        ;de00  32 d5 e1      2990   3086 
WTSEQ1: LD  A,0                         ;de03  3e 00         2991   3087 ;allow an addition empty extent to be opened.
    LD  (RDWRTFLG),A                    ;de05  32 d3 e1      2992   3088 
    CALL    CHKWPRT                     ;de08  cd 54 d9      2993   3089 ;check write protect status.
    LD  HL,(PARAMS)                     ;de0b  2a 43 d7      2994   3090 
    CALL    CKROF1                      ;de0e  cd 47 d9      2995   3091 ;check for read only file, (HL) already set to fcb.
    CALL    STRDATA                     ;de11  cd bb d8      2996   3092 ;put updated data into fcb.
    LD  A,(SAVNREC)                     ;de14  3a e3 e1      2997   3093 ;get record number to write.
    CP  128                             ;de17  fe 80         2998   3094 ;within range?
    JP  NC,IOERR1                       ;de19  d2 05 d7      2999   3095 ;no, error(?).
    CALL    COMBLK                      ;de1c  cd 77 d8      3000   3096 ;compute block number.
    CALL    CHKBLK                      ;de1f  cd 84 d8      3001   3097 ;check number.
    LD  C,0                             ;de22  0e 00         3002   3098 ;is there one to write to?
    JP  NZ,WTSEQ6                       ;de24  c2 6e de      3003   3099 ;yes, go do it.
    CALL    GETBLOCK                    ;de27  cd 3e d8      3004   3100 ;get next block number within fcb to use.
    LD  (RELBLOCK),A                    ;de2a  32 d7 e1      3005   3101 ;and save.
    LD  BC,0                            ;de2d  01 00 00      3006   3102 ;start looking for space from the start
    OR  A                               ;de30  b7            3007   3103 ;if none allocated as yet.
    JP  Z,WTSEQ2                        ;de31  ca 3b de      3008   3104 
    LD  C,A                             ;de34  4f            3009   3105 ;extract previous block number from fcb
    DEC BC                              ;de35  0b            3010   3106 ;so we can be closest to it.
    CALL    EXTBLK                      ;de36  cd 5e d8      3011   3107 
    LD  B,H                             ;de39  44            3012   3108 
    LD  C,L                             ;de3a  4d            3013   3109 
WTSEQ2: CALL    FNDSPACE                ;de3b  cd be db      3014   3110 ;find the next empty block nearest number (BC).
    LD  A,L                             ;de3e  7d            3015   3111 ;check for a zero number.
    OR  H                               ;de3f  b4            3016   3112 
    JP  NZ,WTSEQ3                       ;de40  c2 48 de      3017   3113 
    LD  A,2                             ;de43  3e 02         3018   3114 ;no more space?
    JP  SETSTAT                         ;de45  c3 01 d7      3019   3115 
WTSEQ3: LD  (BLKNMBR),HL                ;de48  22 e5 e1      3020   3116 ;save block number to access.
    EX  DE,HL                           ;de4b  eb            3021   3117 ;put block number into (DE).
    LD  HL,(PARAMS)                     ;de4c  2a 43 d7      3022   3118 ;now we must update the fcb for this
    LD  BC,16                           ;de4f  01 10 00      3023   3119 ;newly allocated block.
    ADD HL,BC                           ;de52  09            3024   3120 
    LD  A,(BIGDISK)                     ;de53  3a dd e1      3025   3121 ;8 or 16 bit block numbers?
    OR  A                               ;de56  b7            3026   3122 
    LD  A,(RELBLOCK)                    ;de57  3a d7 e1      3027   3123 ;(* update this entry *)
    JP  Z,WTSEQ4                        ;de5a  ca 64 de      3028   3124 ;zero means 16 bit ones.
    CALL    ADDA2HL                     ;de5d  cd 64 d9      3029   3125 ;(HL)=(HL)+(A)
    LD  (HL),E                          ;de60  73            3030   3126 ;store new block number.
    JP  WTSEQ5                          ;de61  c3 6c de      3031   3127 
WTSEQ4: LD  C,A                         ;de64  4f            3032   3128 ;compute spot in this 16 bit table.
    LD  B,0                             ;de65  06 00         3033   3129 
    ADD HL,BC                           ;de67  09            3034   3130 
    ADD HL,BC                           ;de68  09            3035   3131 
    LD  (HL),E                          ;de69  73            3036   3132 ;stuff block number (DE) there.
    INC HL                              ;de6a  23            3037   3133 
    LD  (HL),D                          ;de6b  72            3038   3134 
WTSEQ5: LD  C,2                         ;de6c  0e 02         3039   3135 ;set (C) to indicate writing to un-used disk space.
WTSEQ6: LD  A,(STATUS)                  ;de6e  3a 45 d7      3040   3136 ;are we ok so far?
    OR  A                               ;de71  b7            3041   3137 
    RET NZ                              ;de72  c0            3042   3138 
    PUSH    BC                          ;de73  c5            3043   3139 ;yes, save write flag for bios (register C).
    CALL    LOGICAL                     ;de74  cd 8a d8      3044   3140 ;convert (BLKNMBR) over to loical sectors.
    LD  A,(MODE)                        ;de77  3a d5 e1      3045   3141 ;get access mode flag (1=sequential,
    DEC A                               ;de7a  3d            3046   3142 ;0=random, 2=special?).
    DEC A                               ;de7b  3d            3047   3143 
    JP  NZ,WTSEQ9                       ;de7c  c2 bb de      3048   3144 
                                        ;                    3049   3145 ;
                                        ;                    3050   3146 ;   Special random i/o from function #40. Maybe for M/PM, but the
                                        ;                    3051   3147 ; current block, if it has not been written to, will be zeroed
                                        ;                    3052   3148 ; out and then written (reason?).
                                        ;                    3053   3149 ;
    POP BC                              ;de7f  c1            3054   3150 
    PUSH    BC                          ;de80  c5            3055   3151 
    LD  A,C                             ;de81  79            3056   3152 ;get write status flag (2=writing unused space).
    DEC A                               ;de82  3d            3057   3153 
    DEC A                               ;de83  3d            3058   3154 
    JP  NZ,WTSEQ9                       ;de84  c2 bb de      3059   3155 
    PUSH    HL                          ;de87  e5            3060   3156 
    LD  HL,(DIRBUF)                     ;de88  2a b9 e1      3061   3157 ;zero out the directory buffer.
    LD  D,A                             ;de8b  57            3062   3158 ;note that (A) is zero here.
WTSEQ7: LD  (HL),A                      ;de8c  77            3063   3159 
    INC HL                              ;de8d  23            3064   3160 
    INC D                               ;de8e  14            3065   3161 ;do 128 bytes.
    JP  P,WTSEQ7                        ;de8f  f2 8c de      3066   3162 
    CALL    DIRDMA                      ;de92  cd e0 d9      3067   3163 ;tell the bios the dma address for directory access.
    LD  HL,(LOGSECT)                    ;de95  2a e7 e1      3068   3164 ;get sector that starts current block.
    LD  C,2                             ;de98  0e 02         3069   3165 ;set 'writing to unused space' flag.
WTSEQ8: LD  (BLKNMBR),HL                ;de9a  22 e5 e1      3070   3166 ;save sector to write.
    PUSH    BC                          ;de9d  c5            3071   3167 
    CALL    TRKSEC1                     ;de9e  cd d1 d7      3072   3168 ;determine its track and sector numbers.
    POP BC                              ;dea1  c1            3073   3169 
    CALL    DOWRITE                     ;dea2  cd b8 d7      3074   3170 ;now write out 128 bytes of zeros.
    LD  HL,(BLKNMBR)                    ;dea5  2a e5 e1      3075   3171 ;get sector number.
    LD  C,0                             ;dea8  0e 00         3076   3172 ;set normal write flag.
    LD  A,(BLKMASK)                     ;deaa  3a c4 e1      3077   3173 ;determine if we have written the entire
    LD  B,A                             ;dead  47            3078   3174 ;physical block.
    AND L                               ;deae  a5            3079   3175 
    CP  B                               ;deaf  b8            3080   3176 
    INC HL                              ;deb0  23            3081   3177 ;prepare for the next one.
    JP  NZ,WTSEQ8                       ;deb1  c2 9a de      3082   3178 ;continue until (BLKMASK+1) sectors written.
    POP HL                              ;deb4  e1            3083   3179 ;reset next sector number.
    LD  (BLKNMBR),HL                    ;deb5  22 e5 e1      3084   3180 
    CALL    DEFDMA                      ;deb8  cd da d9      3085   3181 ;and reset dma address.
                                        ;                    3086   3182 ;
                                        ;                    3087   3183 ;   Normal disk write. Set the desired track and sector then
                                        ;                    3088   3184 ; do the actual write.
                                        ;                    3089   3185 ;
WTSEQ9: CALL    TRKSEC1                 ;debb  cd d1 d7      3090   3186 ;determine track and sector for this write.
    POP BC                              ;debe  c1            3091   3187 ;get write status flag.
    PUSH    BC                          ;debf  c5            3092   3188 
    CALL    DOWRITE                     ;dec0  cd b8 d7      3093   3189 ;and write this out.
    POP BC                              ;dec3  c1            3094   3190 
    LD  A,(SAVNREC)                     ;dec4  3a e3 e1      3095   3191 ;get number of records in file.
    LD  HL,SAVNXT                       ;dec7  21 e1 e1      3096   3192 ;get last record written.
    CP  (HL)                            ;deca  be            3097   3193 
    JP  C,WTSEQ10                       ;decb  da d2 de      3098   3194 
    LD  (HL),A                          ;dece  77            3099   3195 ;we have to update record count.
    INC (HL)                            ;decf  34            3100   3196 
    LD  C,2                             ;ded0  0e 02         3101   3197 
                                        ;                    3102   3198 ;
                                        ;                    3103   3199 ;*   This area has been patched to correct disk update problem
                                        ;                    3104   3200 ;* when using blocking and de-blocking in the BIOS.
                                        ;                    3105   3201 ;
WTSEQ10:NOP                             ;ded2  00            3106   3202 ;was 'dcr c'
    NOP                                 ;ded3  00            3107   3203 ;was 'dcr c'
    LD  HL,0                            ;ded4  21 00 00      3108   3204 ;was 'jnz wtseq99'
                                        ;                    3109   3205 ;
                                        ;                    3110   3206 ; *   End of patch.
                                        ;                    3111   3207 ;
    PUSH    AF                          ;ded7  f5            3112   3208 
    CALL    GETS2                       ;ded8  cd 69 d9      3113   3209 ;set 'extent written to' flag.
    AND 7FH                             ;dedb  e6 7f         3114   3210 ;(* clear bit 7 *)
    LD  (HL),A                          ;dedd  77            3115   3211 
    POP AF                              ;dede  f1            3116   3212 ;get record count for this extent.
WTSEQ99:CP  127                         ;dedf  fe 7f         3117   3213 ;is it full?
    JP  NZ,WTSEQ12                      ;dee1  c2 00 df      3118   3214 
    LD  A,(MODE)                        ;dee4  3a d5 e1      3119   3215 ;yes, are we in sequential mode?
    CP  1                               ;dee7  fe 01         3120   3216 
    JP  NZ,WTSEQ12                      ;dee9  c2 00 df      3121   3217 
    CALL    SETNREC                     ;deec  cd d2 d8      3122   3218 ;yes, set next record number.
    CALL    GETNEXT                     ;deef  cd 5a dd      3123   3219 ;and get next empty space in directory.
    LD  HL,STATUS                       ;def2  21 45 d7      3124   3220 ;ok?
    LD  A,(HL)                          ;def5  7e            3125   3221 
    OR  A                               ;def6  b7            3126   3222 
    JP  NZ,WTSEQ11                      ;def7  c2 fe de      3127   3223 
    DEC A                               ;defa  3d            3128   3224 ;yes, set record count to -1.
    LD  (SAVNREC),A                     ;defb  32 e3 e1      3129   3225 
WTSEQ11:LD  (HL),0                      ;defe  36 00         3130   3226 ;clear status.
WTSEQ12:JP  SETNREC                     ;df00  c3 d2 d8      3131   3227 ;set next record to access.
                                        ;                    3132   3228 ;
                                        ;                    3133   3229 ;   For random i/o, set the fcb for the desired record number
                                        ;                    3134   3230 ; based on the 'r0,r1,r2' bytes. These bytes in the fcb are
                                        ;                    3135   3231 ; used as follows:
                                        ;                    3136   3232 ;
                                        ;                    3137   3233 ;       fcb+35            fcb+34            fcb+33
                                        ;                    3138   3234 ;  |     'r-2'      |      'r-1'      |      'r-0'     |
                                        ;                    3139   3235 ;  |7             0 | 7             0 | 7             0|
                                        ;                    3140   3236 ;  |0 0 0 0 0 0 0 0 | 0 0 0 0 0 0 0 0 | 0 0 0 0 0 0 0 0|
                                        ;                    3141   3237 ;  |    overflow   | | extra |  extent   |   record #  |
                                        ;                    3142   3238 ;  | ______________| |_extent|__number___|_____________|
                                        ;                    3143   3239 ;                     also 's2'
                                        ;                    3144   3240 ;
                                        ;                    3145   3241 ;   On entry, register (C) contains 0ffh if this is a read
                                        ;                    3146   3242 ; and thus we can not access unwritten disk space. Otherwise,
                                        ;                    3147   3243 ; another extent will be opened (for writing) if required.
                                        ;                    3148   3244 ;
POSITION: XOR   A                       ;df03  af            3149   3245 ;set random i/o flag.
    LD  (MODE),A                        ;df04  32 d5 e1      3150   3246 
                                        ;                    3151   3247 ;
                                        ;                    3152   3248 ;   Special entry (function #40). M/PM ?
                                        ;                    3153   3249 ;
POSITN1:PUSH    BC                      ;df07  c5            3154   3250 ;save read/write flag.
    LD  HL,(PARAMS)                     ;df08  2a 43 d7      3155   3251 ;get address of fcb.
    EX  DE,HL                           ;df0b  eb            3156   3252 
    LD  HL,33                           ;df0c  21 21 00      3157   3253 ;now get byte 'r0'.
    ADD HL,DE                           ;df0f  19            3158   3254 
    LD  A,(HL)                          ;df10  7e            3159   3255 
    AND 7FH                             ;df11  e6 7f         3160   3256 ;keep bits 0-6 for the record number to access.
    PUSH    AF                          ;df13  f5            3161   3257 
    LD  A,(HL)                          ;df14  7e            3162   3258 ;now get bit 7 of 'r0' and bits 0-3 of 'r1'.
    RLA                                 ;df15  17            3163   3259 
    INC HL                              ;df16  23            3164   3260 
    LD  A,(HL)                          ;df17  7e            3165   3261 
    RLA                                 ;df18  17            3166   3262 
    AND 1FH                             ;df19  e6 1f         3167   3263 ;and save this in bits 0-4 of (C).
    LD  C,A                             ;df1b  4f            3168   3264 ;this is the extent byte.
    LD  A,(HL)                          ;df1c  7e            3169   3265 ;now get the extra extent byte.
    RRA                                 ;df1d  1f            3170   3266 
    RRA                                 ;df1e  1f            3171   3267 
    RRA                                 ;df1f  1f            3172   3268 
    RRA                                 ;df20  1f            3173   3269 
    AND 0FH                             ;df21  e6 0f         3174   3270 
    LD  B,A                             ;df23  47            3175   3271 ;and save it in (B).
    POP AF                              ;df24  f1            3176   3272 ;get record number back to (A).
    INC HL                              ;df25  23            3177   3273 ;check overflow byte 'r2'.
    LD  L,(HL)                          ;df26  6e            3178   3274 
    INC L                               ;df27  2c            3179   3275 
    DEC L                               ;df28  2d            3180   3276 
    LD  L,6                             ;df29  2e 06         3181   3277 ;prepare for error.
    JP  NZ,POSITN5                      ;df2b  c2 8b df      3182   3278 ;out of disk space error.
    LD  HL,32                           ;df2e  21 20 00      3183   3279 ;store record number into fcb.
    ADD HL,DE                           ;df31  19            3184   3280 
    LD  (HL),A                          ;df32  77            3185   3281 
    LD  HL,12                           ;df33  21 0c 00      3186   3282 ;and now check the extent byte.
    ADD HL,DE                           ;df36  19            3187   3283 
    LD  A,C                             ;df37  79            3188   3284 
    SUB (HL)                            ;df38  96            3189   3285 ;same extent as before?
    JP  NZ,POSITN2                      ;df39  c2 47 df      3190   3286 
    LD  HL,14                           ;df3c  21 0e 00      3191   3287 ;yes, check extra extent byte 's2' also.
    ADD HL,DE                           ;df3f  19            3192   3288 
    LD  A,B                             ;df40  78            3193   3289 
    SUB (HL)                            ;df41  96            3194   3290 
    AND 7FH                             ;df42  e6 7f         3195   3291 
    JP  Z,POSITN3                       ;df44  ca 7f df      3196   3292 ;same, we are almost done then.
                                        ;                    3197   3293 ;
                                        ;                    3198   3294 ;  Get here when another extent is required.
                                        ;                    3199   3295 ;
POSITN2:PUSH    BC                      ;df47  c5            3200   3296 
    PUSH    DE                          ;df48  d5            3201   3297 
    CALL    CLOSEIT                     ;df49  cd a2 dc      3202   3298 ;close current extent.
    POP DE                              ;df4c  d1            3203   3299 
    POP BC                              ;df4d  c1            3204   3300 
    LD  L,3                             ;df4e  2e 03         3205   3301 ;prepare for error.
    LD  A,(STATUS)                      ;df50  3a 45 d7      3206   3302 
    INC A                               ;df53  3c            3207   3303 
    JP  Z,POSITN4                       ;df54  ca 84 df      3208   3304 ;close error.
    LD  HL,12                           ;df57  21 0c 00      3209   3305 ;put desired extent into fcb now.
    ADD HL,DE                           ;df5a  19            3210   3306 
    LD  (HL),C                          ;df5b  71            3211   3307 
    LD  HL,14                           ;df5c  21 0e 00      3212   3308 ;and store extra extent byte 's2'.
    ADD HL,DE                           ;df5f  19            3213   3309 
    LD  (HL),B                          ;df60  70            3214   3310 
    CALL    OPENIT                      ;df61  cd 51 dc      3215   3311 ;try and get this extent.
    LD  A,(STATUS)                      ;df64  3a 45 d7      3216   3312 ;was it there?
    INC A                               ;df67  3c            3217   3313 
    JP  NZ,POSITN3                      ;df68  c2 7f df      3218   3314 
    POP BC                              ;df6b  c1            3219   3315 ;no. can we create a new one (writing?).
    PUSH    BC                          ;df6c  c5            3220   3316 
    LD  L,4                             ;df6d  2e 04         3221   3317 ;prepare for error.
    INC C                               ;df6f  0c            3222   3318 
    JP  Z,POSITN4                       ;df70  ca 84 df      3223   3319 ;nope, reading unwritten space error.
    CALL    GETEMPTY                    ;df73  cd 24 dd      3224   3320 ;yes we can, try to find space.
    LD  L,5                             ;df76  2e 05         3225   3321 ;prepare for error.
    LD  A,(STATUS)                      ;df78  3a 45 d7      3226   3322 
    INC A                               ;df7b  3c            3227   3323 
    JP  Z,POSITN4                       ;df7c  ca 84 df      3228   3324 ;out of space?
                                        ;                    3229   3325 ;
                                        ;                    3230   3326 ;   Normal return location. Clear error code and return.
                                        ;                    3231   3327 ;
POSITN3:POP BC                          ;df7f  c1            3232   3328 ;restore stack.
    XOR A                               ;df80  af            3233   3329 ;and clear error code byte.
    JP  SETSTAT                         ;df81  c3 01 d7      3234   3330 
                                        ;                    3235   3331 ;
                                        ;                    3236   3332 ;   Error. Set the 's2' byte to indicate this (why?).
                                        ;                    3237   3333 ;
POSITN4:PUSH    HL                      ;df84  e5            3238   3334 
    CALL    GETS2                       ;df85  cd 69 d9      3239   3335 
    LD  (HL),0C0H                       ;df88  36 c0         3240   3336 
    POP HL                              ;df8a  e1            3241   3337 
                                        ;                    3242   3338 ;
                                        ;                    3243   3339 ;   Return with error code (presently in L).
                                        ;                    3244   3340 ;
POSITN5:POP BC                          ;df8b  c1            3245   3341 
    LD  A,L                             ;df8c  7d            3246   3342 ;get error code.
    LD  (STATUS),A                      ;df8d  32 45 d7      3247   3343 
    JP  SETS2B7                         ;df90  c3 78 d9      3248   3344 
                                        ;                    3249   3345 ;
                                        ;                    3250   3346 ;   Read a random record.
                                        ;                    3251   3347 ;
READRAN:LD  C,0FFH                      ;df93  0e ff         3252   3348 ;set 'read' status.
    CALL    POSITION                    ;df95  cd 03 df      3253   3349 ;position the file to proper record.
    CALL    Z,RDSEQ1                    ;df98  cc c1 dd      3254   3350 ;and read it as usual (if no errors).
    RET                                 ;df9b  c9            3255   3351 
                                        ;                    3256   3352 ;
                                        ;                    3257   3353 ;   Write to a random record.
                                        ;                    3258   3354 ;
WRITERAN: LD    C,0                     ;df9c  0e 00         3259   3355 ;set 'writing' flag.
    CALL    POSITION                    ;df9e  cd 03 df      3260   3356 ;position the file to proper record.
    CALL    Z,WTSEQ1                    ;dfa1  cc 03 de      3261   3357 ;and write as usual (if no errors).
    RET                                 ;dfa4  c9            3262   3358 
                                        ;                    3263   3359 ;
                                        ;                    3264   3360 ;   Compute the random record number. Enter with (HL) pointing
                                        ;                    3265   3361 ; to a fcb an (DE) contains a relative location of a record
                                        ;                    3266   3362 ; number. On exit, (C) contains the 'r0' byte, (B) the 'r1'
                                        ;                    3267   3363 ; byte, and (A) the 'r2' byte.
                                        ;                    3268   3364 ;
                                        ;                    3269   3365 ;   On return, the zero flag is set if the record is within
                                        ;                    3270   3366 ; bounds. Otherwise, an overflow occured.
                                        ;                    3271   3367 ;
COMPRAND: EX    DE,HL                   ;dfa5  eb            3272   3368 ;save fcb pointer in (DE).
    ADD HL,DE                           ;dfa6  19            3273   3369 ;compute relative position of record #.
    LD  C,(HL)                          ;dfa7  4e            3274   3370 ;get record number into (BC).
    LD  B,0                             ;dfa8  06 00         3275   3371 
    LD  HL,12                           ;dfaa  21 0c 00      3276   3372 ;now get extent.
    ADD HL,DE                           ;dfad  19            3277   3373 
    LD  A,(HL)                          ;dfae  7e            3278   3374 ;compute (BC)=(record #)+(extent)*128.
    RRCA                                ;dfaf  0f            3279   3375 ;move lower bit into bit 7.
    AND 80H                             ;dfb0  e6 80         3280   3376 ;and ignore all other bits.
    ADD A,C                             ;dfb2  81            3281   3377 ;add to our record number.
    LD  C,A                             ;dfb3  4f            3282   3378 
    LD  A,0                             ;dfb4  3e 00         3283   3379 ;take care of any carry.
    ADC A,B                             ;dfb6  88            3284   3380 
    LD  B,A                             ;dfb7  47            3285   3381 
    LD  A,(HL)                          ;dfb8  7e            3286   3382 ;now get the upper bits of extent into
    RRCA                                ;dfb9  0f            3287   3383 ;bit positions 0-3.
    AND 0FH                             ;dfba  e6 0f         3288   3384 ;and ignore all others.
    ADD A,B                             ;dfbc  80            3289   3385 ;add this in to 'r1' byte.
    LD  B,A                             ;dfbd  47            3290   3386 
    LD  HL,14                           ;dfbe  21 0e 00      3291   3387 ;get the 's2' byte (extra extent).
    ADD HL,DE                           ;dfc1  19            3292   3388 
    LD  A,(HL)                          ;dfc2  7e            3293   3389 
    ADD A,A                             ;dfc3  87            3294   3390 ;and shift it left 4 bits (bits 4-7).
    ADD A,A                             ;dfc4  87            3295   3391 
    ADD A,A                             ;dfc5  87            3296   3392 
    ADD A,A                             ;dfc6  87            3297   3393 
    PUSH    AF                          ;dfc7  f5            3298   3394 ;save carry flag (bit 0 of flag byte).
    ADD A,B                             ;dfc8  80            3299   3395 ;now add extra extent into 'r1'.
    LD  B,A                             ;dfc9  47            3300   3396 
    PUSH    AF                          ;dfca  f5            3301   3397 ;and save carry (overflow byte 'r2').
    POP HL                              ;dfcb  e1            3302   3398 ;bit 0 of (L) is the overflow indicator.
    LD  A,L                             ;dfcc  7d            3303   3399 
    POP HL                              ;dfcd  e1            3304   3400 ;and same for first carry flag.
    OR  L                               ;dfce  b5            3305   3401 ;either one of these set?
    AND 01H                             ;dfcf  e6 01         3306   3402 ;only check the carry flags.
    RET                                 ;dfd1  c9            3307   3403 
                                        ;                    3308   3404 ;
                                        ;                    3309   3405 ;   Routine to setup the fcb (bytes 'r0', 'r1', 'r2') to
                                        ;                    3310   3406 ; reflect the last record used for a random (or other) file.
                                        ;                    3311   3407 ; This reads the directory and looks at all extents computing
                                        ;                    3312   3408 ; the largerst record number for each and keeping the maximum
                                        ;                    3313   3409 ; value only. Then 'r0', 'r1', and 'r2' will reflect this
                                        ;                    3314   3410 ; maximum record number. This is used to compute the space used
                                        ;                    3315   3411 ; by a random file.
                                        ;                    3316   3412 ;
RANSIZE:LD  C,12                        ;dfd2  0e 0c         3317   3413 ;look thru directory for first entry with
    CALL    FINDFST                     ;dfd4  cd 18 db      3318   3414 ;this name.
    LD  HL,(PARAMS)                     ;dfd7  2a 43 d7      3319   3415 ;zero out the 'r0, r1, r2' bytes.
    LD  DE,33                           ;dfda  11 21 00      3320   3416 
    ADD HL,DE                           ;dfdd  19            3321   3417 
    PUSH    HL                          ;dfde  e5            3322   3418 
    LD  (HL),D                          ;dfdf  72            3323   3419 ;note that (D)=0.
    INC HL                              ;dfe0  23            3324   3420 
    LD  (HL),D                          ;dfe1  72            3325   3421 
    INC HL                              ;dfe2  23            3326   3422 
    LD  (HL),D                          ;dfe3  72            3327   3423 
RANSIZ1:CALL    CKFILPOS                ;dfe4  cd f5 d9      3328   3424 ;is there an extent to process?
    JP  Z,RANSIZ3                       ;dfe7  ca 0c e0      3329   3425 ;no, we are done.
    CALL    FCB2HL                      ;dfea  cd 5e d9      3330   3426 ;set (HL) pointing to proper fcb in dir.
    LD  DE,15                           ;dfed  11 0f 00      3331   3427 ;point to last record in extent.
    CALL    COMPRAND                    ;dff0  cd a5 df      3332   3428 ;and compute random parameters.
    POP HL                              ;dff3  e1            3333   3429 
    PUSH    HL                          ;dff4  e5            3334   3430 ;now check these values against those
    LD  E,A                             ;dff5  5f            3335   3431 ;already in fcb.
    LD  A,C                             ;dff6  79            3336   3432 ;the carry flag will be set if those
    SUB (HL)                            ;dff7  96            3337   3433 ;in the fcb represent a larger size than
    INC HL                              ;dff8  23            3338   3434 ;this extent does.
    LD  A,B                             ;dff9  78            3339   3435 
    SBC A,(HL)                          ;dffa  9e            3340   3436 
    INC HL                              ;dffb  23            3341   3437 
    LD  A,E                             ;dffc  7b            3342   3438 
    SBC A,(HL)                          ;dffd  9e            3343   3439 
    JP  C,RANSIZ2                       ;dffe  da 06 e0      3344   3440 
    LD  (HL),E                          ;e001  73            3345   3441 ;we found a larger (in size) extent.
    DEC HL                              ;e002  2b            3346   3442 ;stuff these values into fcb.
    LD  (HL),B                          ;e003  70            3347   3443 
    DEC HL                              ;e004  2b            3348   3444 
    LD  (HL),C                          ;e005  71            3349   3445 
RANSIZ2:CALL    FINDNXT                 ;e006  cd 2d db      3350   3446 ;now get the next extent.
    JP  RANSIZ1                         ;e009  c3 e4 df      3351   3447 ;continue til all done.
RANSIZ3:POP HL                          ;e00c  e1            3352   3448 ;we are done, restore the stack and
    RET                                 ;e00d  c9            3353   3449 ;return.
                                        ;                    3354   3450 ;
                                        ;                    3355   3451 ;   Function to return the random record position of a given
                                        ;                    3356   3452 ; file which has been read in sequential mode up to now.
                                        ;                    3357   3453 ;
SETRAN: LD  HL,(PARAMS)                 ;e00e  2a 43 d7      3358   3454 ;point to fcb.
    LD  DE,32                           ;e011  11 20 00      3359   3455 ;and to last used record.
    CALL    COMPRAND                    ;e014  cd a5 df      3360   3456 ;compute random position.
    LD  HL,33                           ;e017  21 21 00      3361   3457 ;now stuff these values into fcb.
    ADD HL,DE                           ;e01a  19            3362   3458 
    LD  (HL),C                          ;e01b  71            3363   3459 ;move 'r0'.
    INC HL                              ;e01c  23            3364   3460 
    LD  (HL),B                          ;e01d  70            3365   3461 ;and 'r1'.
    INC HL                              ;e01e  23            3366   3462 
    LD  (HL),A                          ;e01f  77            3367   3463 ;and lastly 'r2'.
    RET                                 ;e020  c9            3368   3464 
                                        ;                    3369   3465 ;
                                        ;                    3370   3466 ;   This routine select the drive specified in (ACTIVE) and
                                        ;                    3371   3467 ; update the login vector and bitmap table if this drive was
                                        ;                    3372   3468 ; not already active.
                                        ;                    3373   3469 ;
LOGINDRV: LD    HL,(LOGIN)              ;e021  2a af e1      3374   3470 ;get the login vector.
    LD  A,(ACTIVE)                      ;e024  3a 42 d7      3375   3471 ;get the default drive.
    LD  C,A                             ;e027  4f            3376   3472 
    CALL    SHIFTR                      ;e028  cd ea d8      3377   3473 ;position active bit for this drive
    PUSH    HL                          ;e02b  e5            3378   3474 ;into bit 0.
    EX  DE,HL                           ;e02c  eb            3379   3475 
    CALL    SELECT                      ;e02d  cd 59 d7      3380   3476 ;select this drive.
    POP HL                              ;e030  e1            3381   3477 
    CALL    Z,SLCTERR                   ;e031  cc 47 d7      3382   3478 ;valid drive?
    LD  A,L                             ;e034  7d            3383   3479 ;is this a newly activated drive?
    RRA                                 ;e035  1f            3384   3480 
    RET C                               ;e036  d8            3385   3481 
    LD  HL,(LOGIN)                      ;e037  2a af e1      3386   3482 ;yes, update the login vector.
    LD  C,L                             ;e03a  4d            3387   3483 
    LD  B,H                             ;e03b  44            3388   3484 
    CALL    SETBIT                      ;e03c  cd 0b d9      3389   3485 
    LD  (LOGIN),HL                      ;e03f  22 af e1      3390   3486 ;and save.
    JP  BITMAP                          ;e042  c3 a3 da      3391   3487 ;now update the bitmap.
                                        ;                    3392   3488 ;
                                        ;                    3393   3489 ;   Function to set the active disk number.
                                        ;                    3394   3490 ;
SETDSK: LD  A,(EPARAM)                  ;e045  3a d6 e1      3395   3491 ;get parameter passed and see if this
    LD  HL,ACTIVE                       ;e048  21 42 d7      3396   3492 ;represents a change in drives.
    CP  (HL)                            ;e04b  be            3397   3493 
    RET Z                               ;e04c  c8            3398   3494 
    LD  (HL),A                          ;e04d  77            3399   3495 ;yes it does, log it in.
    JP  LOGINDRV                        ;e04e  c3 21 e0      3400   3496 
                                        ;                    3401   3497 ;
                                        ;                    3402   3498 ;   This is the 'auto disk select' routine. The firsst byte
                                        ;                    3403   3499 ; of the fcb is examined for a drive specification. If non
                                        ;                    3404   3500 ; zero then the drive will be selected and loged in.
                                        ;                    3405   3501 ;
AUTOSEL:LD  A,0FFH                      ;e051  3e ff         3406   3502 ;say 'auto-select activated'.
    LD  (AUTO),A                        ;e053  32 de e1      3407   3503 
    LD  HL,(PARAMS)                     ;e056  2a 43 d7      3408   3504 ;get drive specified.
    LD  A,(HL)                          ;e059  7e            3409   3505 
    AND 1FH                             ;e05a  e6 1f         3410   3506 ;look at lower 5 bits.
    DEC A                               ;e05c  3d            3411   3507 ;adjust for (1=A, 2=B) etc.
    LD  (EPARAM),A                      ;e05d  32 d6 e1      3412   3508 ;and save for the select routine.
    CP  1EH                             ;e060  fe 1e         3413   3509 ;check for 'no change' condition.
    JP  NC,AUTOSL1                      ;e062  d2 75 e0      3414   3510 ;yes, don't change.
    LD  A,(ACTIVE)                      ;e065  3a 42 d7      3415   3511 ;we must change, save currently active
    LD  (OLDDRV),A                      ;e068  32 df e1      3416   3512 ;drive.
    LD  A,(HL)                          ;e06b  7e            3417   3513 ;and save first byte of fcb also.
    LD  (AUTOFLAG),A                    ;e06c  32 e0 e1      3418   3514 ;this must be non-zero.
    AND 0E0H                            ;e06f  e6 e0         3419   3515 ;whats this for (bits 6,7 are used for
    LD  (HL),A                          ;e071  77            3420   3516 ;something)?
    CALL    SETDSK                      ;e072  cd 45 e0      3421   3517 ;select and log in this drive.
AUTOSL1:LD  A,(USERNO)                  ;e075  3a 41 d7      3422   3518 ;move user number into fcb.
    LD  HL,(PARAMS)                     ;e078  2a 43 d7      3423   3519 ;(* upper half of first byte *)
    OR  (HL)                            ;e07b  b6            3424   3520 
    LD  (HL),A                          ;e07c  77            3425   3521 
    RET                                 ;e07d  c9            3426   3522 ;and return (all done).
                                        ;                    3427   3523 ;
                                        ;                    3428   3524 ;   Function to return the current cp/m version number.
                                        ;                    3429   3525 ;
GETVER: LD  A,022H                      ;e07e  3e 22         3430   3526 ;version 2.2
    JP  SETSTAT                         ;e080  c3 01 d7      3431   3527 
                                        ;                    3432   3528 ;
                                        ;                    3433   3529 ;   Function to reset the disk system.
                                        ;                    3434   3530 ;
RSTDSK: LD  HL,0                        ;e083  21 00 00      3435   3531 ;clear write protect status and log
    LD  (WRTPRT),HL                     ;e086  22 ad e1      3436   3532 ;in vector.
    LD  (LOGIN),HL                      ;e089  22 af e1      3437   3533 
    XOR A                               ;e08c  af            3438   3534 ;select drive 'A'.
    LD  (ACTIVE),A                      ;e08d  32 42 d7      3439   3535 
    LD  HL,TBUFF                        ;e090  21 80 00      3440   3536 ;setup default dma address.
    LD  (USERDMA),HL                    ;e093  22 b1 e1      3441   3537 
    CALL    DEFDMA                      ;e096  cd da d9      3442   3538 
    JP  LOGINDRV                        ;e099  c3 21 e0      3443   3539 ;now log in drive 'A'.
                                        ;                    3444   3540 ;
                                        ;                    3445   3541 ;   Function to open a specified file.
                                        ;                    3446   3542 ;
OPENFIL:CALL    CLEARS2                 ;e09c  cd 72 d9      3447   3543 ;clear 's2' byte.
    CALL    AUTOSEL                     ;e09f  cd 51 e0      3448   3544 ;select proper disk.
    JP  OPENIT                          ;e0a2  c3 51 dc      3449   3545 ;and open the file.
                                        ;                    3450   3546 ;
                                        ;                    3451   3547 ;   Function to close a specified file.
                                        ;                    3452   3548 ;
CLOSEFIL: CALL  AUTOSEL                 ;e0a5  cd 51 e0      3453   3549 ;select proper disk.
    JP  CLOSEIT                         ;e0a8  c3 a2 dc      3454   3550 ;and close the file.
                                        ;                    3455   3551 ;
                                        ;                    3456   3552 ;   Function to return the first occurence of a specified file
                                        ;                    3457   3553 ; name. If the first byte of the fcb is '?' then the name will
                                        ;                    3458   3554 ; not be checked (get the first entry no matter what).
                                        ;                    3459   3555 ;
GETFST: LD  C,0                         ;e0ab  0e 00         3460   3556 ;prepare for special search.
    EX  DE,HL                           ;e0ad  eb            3461   3557 
    LD  A,(HL)                          ;e0ae  7e            3462   3558 ;is first byte a '?'?
    CP  '?'                             ;e0af  fe 3f         3463   3559 
    JP  Z,GETFST1                       ;e0b1  ca c2 e0      3464   3560 ;yes, just get very first entry (zero length match).
    CALL    SETEXT                      ;e0b4  cd a6 d8      3465   3561 ;get the extension byte from fcb.
    LD  A,(HL)                          ;e0b7  7e            3466   3562 ;is it '?'? if yes, then we want
    CP  '?'                             ;e0b8  fe 3f         3467   3563 ;an entry with a specific 's2' byte.
    CALL    NZ,CLEARS2                  ;e0ba  c4 72 d9      3468   3564 ;otherwise, look for a zero 's2' byte.
    CALL    AUTOSEL                     ;e0bd  cd 51 e0      3469   3565 ;select proper drive.
    LD  C,15                            ;e0c0  0e 0f         3470   3566 ;compare bytes 0-14 in fcb (12&13 excluded).
GETFST1:CALL    FINDFST                 ;e0c2  cd 18 db      3471   3567 ;find an entry and then move it into
    JP  MOVEDIR                         ;e0c5  c3 e9 d9      3472   3568 ;the users dma space.
                                        ;                    3473   3569 ;
                                        ;                    3474   3570 ;   Function to return the next occurence of a file name.
                                        ;                    3475   3571 ;
GETNXT: LD  HL,(SAVEFCB)                ;e0c8  2a d9 e1      3476   3572 ;restore pointers. note that no
    LD  (PARAMS),HL                     ;e0cb  22 43 d7      3477   3573 ;other dbos calls are allowed.
    CALL    AUTOSEL                     ;e0ce  cd 51 e0      3478   3574 ;no error will be returned, but the
    CALL    FINDNXT                     ;e0d1  cd 2d db      3479   3575 ;results will be wrong.
    JP  MOVEDIR                         ;e0d4  c3 e9 d9      3480   3576 
                                        ;                    3481   3577 ;
                                        ;                    3482   3578 ;   Function to delete a file by name.
                                        ;                    3483   3579 ;
DELFILE:CALL    AUTOSEL                 ;e0d7  cd 51 e0      3484   3580 ;select proper drive.
    CALL    ERAFILE                     ;e0da  cd 9c db      3485   3581 ;erase the file.
    JP  STSTATUS                        ;e0dd  c3 01 db      3486   3582 ;set status and return.
                                        ;                    3487   3583 ;
                                        ;                    3488   3584 ;   Function to execute a sequential read of the specified
                                        ;                    3489   3585 ; record number.
                                        ;                    3490   3586 ;
READSEQ:CALL    AUTOSEL                 ;e0e0  cd 51 e0      3491   3587 ;select proper drive then read.
    JP  RDSEQ                           ;e0e3  c3 bc dd      3492   3588 
                                        ;                    3493   3589 ;
                                        ;                    3494   3590 ;   Function to write the net sequential record.
                                        ;                    3495   3591 ;
WRTSEQ: CALL    AUTOSEL                 ;e0e6  cd 51 e0      3496   3592 ;select proper drive then write.
    JP  WTSEQ                           ;e0e9  c3 fe dd      3497   3593 
                                        ;                    3498   3594 ;
                                        ;                    3499   3595 ;   Create a file function.
                                        ;                    3500   3596 ;
FCREATE:CALL    CLEARS2                 ;e0ec  cd 72 d9      3501   3597 ;clear the 's2' byte on all creates.
    CALL    AUTOSEL                     ;e0ef  cd 51 e0      3502   3598 ;select proper drive and get the next
    JP  GETEMPTY                        ;e0f2  c3 24 dd      3503   3599 ;empty directory space.
                                        ;                    3504   3600 ;
                                        ;                    3505   3601 ;   Function to rename a file.
                                        ;                    3506   3602 ;
RENFILE:CALL    AUTOSEL                 ;e0f5  cd 51 e0      3507   3603 ;select proper drive and then switch
    CALL    CHGNAMES                    ;e0f8  cd 16 dc      3508   3604 ;file names.
    JP  STSTATUS                        ;e0fb  c3 01 db      3509   3605 
                                        ;                    3510   3606 ;
                                        ;                    3511   3607 ;   Function to return the login vector.
                                        ;                    3512   3608 ;
GETLOG: LD  HL,(LOGIN)                  ;e0fe  2a af e1      3513   3609 
    JP  GETPRM1                         ;e101  c3 29 e1      3514   3610 
                                        ;                    3515   3611 ;
                                        ;                    3516   3612 ;   Function to return the current disk assignment.
                                        ;                    3517   3613 ;
GETCRNT:LD  A,(ACTIVE)                  ;e104  3a 42 d7      3518   3614 
    JP  SETSTAT                         ;e107  c3 01 d7      3519   3615 
                                        ;                    3520   3616 ;
                                        ;                    3521   3617 ;   Function to set the dma address.
                                        ;                    3522   3618 ;
PUTDMA: EX  DE,HL                       ;e10a  eb            3523   3619 
    LD  (USERDMA),HL                    ;e10b  22 b1 e1      3524   3620 ;save in our space and then get to
    JP  DEFDMA                          ;e10e  c3 da d9      3525   3621 ;the bios with this also.
                                        ;                    3526   3622 ;
                                        ;                    3527   3623 ;   Function to return the allocation vector.
                                        ;                    3528   3624 ;
GETALOC:LD  HL,(ALOCVECT)               ;e111  2a bf e1      3529   3625 
    JP  GETPRM1                         ;e114  c3 29 e1      3530   3626 
                                        ;                    3531   3627 ;
                                        ;                    3532   3628 ;   Function to return the read-only status vector.
                                        ;                    3533   3629 ;
GETROV: LD  HL,(WRTPRT)                 ;e117  2a ad e1      3534   3630 
    JP  GETPRM1                         ;e11a  c3 29 e1      3535   3631 
                                        ;                    3536   3632 ;
                                        ;                    3537   3633 ;   Function to set the file attributes (read-only, system).
                                        ;                    3538   3634 ;
SETATTR:CALL    AUTOSEL                 ;e11d  cd 51 e0      3539   3635 ;select proper drive then save attributes.
    CALL    SAVEATTR                    ;e120  cd 3b dc      3540   3636 
    JP  STSTATUS                        ;e123  c3 01 db      3541   3637 
                                        ;                    3542   3638 ;
                                        ;                    3543   3639 ;   Function to return the address of the disk parameter block
                                        ;                    3544   3640 ; for the current drive.
                                        ;                    3545   3641 ;
GETPARM:LD  HL,(DISKPB)                 ;e126  2a bb e1      3546   3642 
GETPRM1:LD  (STATUS),HL                 ;e129  22 45 d7      3547   3643 
    RET                                 ;e12c  c9            3548   3644 
                                        ;                    3549   3645 ;
                                        ;                    3550   3646 ;   Function to get or set the user number. If (E) was (FF)
                                        ;                    3551   3647 ; then this is a request to return the current user number.
                                        ;                    3552   3648 ; Else set the user number from (E).
                                        ;                    3553   3649 ;
GETUSER:LD  A,(EPARAM)                  ;e12d  3a d6 e1      3554   3650 ;get parameter.
    CP  0FFH                            ;e130  fe ff         3555   3651 ;get user number?
    JP  NZ,SETUSER                      ;e132  c2 3b e1      3556   3652 
    LD  A,(USERNO)                      ;e135  3a 41 d7      3557   3653 ;yes, just do it.
    JP  SETSTAT                         ;e138  c3 01 d7      3558   3654 
SETUSER:AND 1FH                         ;e13b  e6 1f         3559   3655 ;no, we should set it instead. keep low
    LD  (USERNO),A                      ;e13d  32 41 d7      3560   3656 ;bits (0-4) only.
    RET                                 ;e140  c9            3561   3657 
                                        ;                    3562   3658 ;
                                        ;                    3563   3659 ;   Function to read a random record from a file.
                                        ;                    3564   3660 ;
RDRANDOM: CALL  AUTOSEL                 ;e141  cd 51 e0      3565   3661 ;select proper drive and read.
    JP  READRAN                         ;e144  c3 93 df      3566   3662 
                                        ;                    3567   3663 ;
                                        ;                    3568   3664 ;   Function to compute the file size for random files.
                                        ;                    3569   3665 ;
WTRANDOM: CALL  AUTOSEL                 ;e147  cd 51 e0      3570   3666 ;select proper drive and write.
    JP  WRITERAN                        ;e14a  c3 9c df      3571   3667 
                                        ;                    3572   3668 ;
                                        ;                    3573   3669 ;   Function to compute the size of a random file.
                                        ;                    3574   3670 ;
FILESIZE: CALL  AUTOSEL                 ;e14d  cd 51 e0      3575   3671 ;select proper drive and check file length
    JP  RANSIZE                         ;e150  c3 d2 df      3576   3672 
                                        ;                    3577   3673 ;
                                        ;                    3578   3674 ;   Function #37. This allows a program to log off any drives.
                                        ;                    3579   3675 ; On entry, set (DE) to contain a word with bits set for those
                                        ;                    3580   3676 ; drives that are to be logged off. The log-in vector and the
                                        ;                    3581   3677 ; write protect vector will be updated. This must be a M/PM
                                        ;                    3582   3678 ; special function.
                                        ;                    3583   3679 ;
LOGOFF: LD  HL,(PARAMS)                 ;e153  2a 43 d7      3584   3680 ;get drives to log off.
    LD  A,L                             ;e156  7d            3585   3681 ;for each bit that is set, we want
    CPL                                 ;e157  2f            3586   3682 ;to clear that bit in (LOGIN)
    LD  E,A                             ;e158  5f            3587   3683 ;and (WRTPRT).
    LD  A,H                             ;e159  7c            3588   3684 
    CPL                                 ;e15a  2f            3589   3685 
    LD  HL,(LOGIN)                      ;e15b  2a af e1      3590   3686 ;reset the login vector.
    AND H                               ;e15e  a4            3591   3687 
    LD  D,A                             ;e15f  57            3592   3688 
    LD  A,L                             ;e160  7d            3593   3689 
    AND E                               ;e161  a3            3594   3690 
    LD  E,A                             ;e162  5f            3595   3691 
    LD  HL,(WRTPRT)                     ;e163  2a ad e1      3596   3692 
    EX  DE,HL                           ;e166  eb            3597   3693 
    LD  (LOGIN),HL                      ;e167  22 af e1      3598   3694 ;and save.
    LD  A,L                             ;e16a  7d            3599   3695 ;now do the write protect vector.
    AND E                               ;e16b  a3            3600   3696 
    LD  L,A                             ;e16c  6f            3601   3697 
    LD  A,H                             ;e16d  7c            3602   3698 
    AND D                               ;e16e  a2            3603   3699 
    LD  H,A                             ;e16f  67            3604   3700 
    LD  (WRTPRT),HL                     ;e170  22 ad e1      3605   3701 ;and save. all done.
    RET                                 ;e173  c9            3606   3702 
                                        ;                    3607   3703 ;
                                        ;                    3608   3704 ;   Get here to return to the user.
                                        ;                    3609   3705 ;
GOBACK: LD  A,(AUTO)                    ;e174  3a de e1      3610   3706 ;was auto select activated?
    OR  A                               ;e177  b7            3611   3707 
    JP  Z,GOBACK1                       ;e178  ca 91 e1      3612   3708 
    LD  HL,(PARAMS)                     ;e17b  2a 43 d7      3613   3709 ;yes, but was a change made?
    LD  (HL),0                          ;e17e  36 00         3614   3710 ;(* reset first byte of fcb *)
    LD  A,(AUTOFLAG)                    ;e180  3a e0 e1      3615   3711 
    OR  A                               ;e183  b7            3616   3712 
    JP  Z,GOBACK1                       ;e184  ca 91 e1      3617   3713 
    LD  (HL),A                          ;e187  77            3618   3714 ;yes, reset first byte properly.
    LD  A,(OLDDRV)                      ;e188  3a df e1      3619   3715 ;and get the old drive and select it.
    LD  (EPARAM),A                      ;e18b  32 d6 e1      3620   3716 
    CALL    SETDSK                      ;e18e  cd 45 e0      3621   3717 
GOBACK1:LD  HL,(USRSTACK)               ;e191  2a 0f d7      3622   3718 ;reset the users stack pointer.
    LD  SP,HL                           ;e194  f9            3623   3719 
    LD  HL,(STATUS)                     ;e195  2a 45 d7      3624   3720 ;get return status.
    LD  A,L                             ;e198  7d            3625   3721 ;force version 1.4 compatability.
    LD  B,H                             ;e199  44            3626   3722 
    RET                                 ;e19a  c9            3627   3723 ;and go back to user.
                                        ;                    3628   3724 ;
                                        ;                    3629   3725 ;   Function #40. This is a special entry to do random i/o.
                                        ;                    3630   3726 ; For the case where we are writing to unused disk space, this
                                        ;                    3631   3727 ; space will be zeroed out first. This must be a M/PM special
                                        ;                    3632   3728 ; purpose function, because why would any normal program even
                                        ;                    3633   3729 ; care about the previous contents of a sector about to be
                                        ;                    3634   3730 ; written over.
                                        ;                    3635   3731 ;
WTSPECL:CALL    AUTOSEL                 ;e19b  cd 51 e0      3636   3732 ;select proper drive.
    LD  A,2                             ;e19e  3e 02         3637   3733 ;use special write mode.
    LD  (MODE),A                        ;e1a0  32 d5 e1      3638   3734 
    LD  C,0                             ;e1a3  0e 00         3639   3735 ;set write indicator.
    CALL    POSITN1                     ;e1a5  cd 07 df      3640   3736 ;position the file.
    CALL    Z,WTSEQ1                    ;e1a8  cc 03 de      3641   3737 ;and write (if no errors).
    RET                                 ;e1ab  c9            3642   3738 
                                        ;                    3643   3739 ;
                                        ;                    3644   3740 ;**************************************************************
                                        ;                    3645   3741 ;*
                                        ;                    3646   3742 ;*     BDOS data storage pool.
                                        ;                    3647   3743 ;*
                                        ;                    3648   3744 ;**************************************************************
                                        ;                    3649   3745 ;
EMPTYFCB: DEFB  0E5H                    ;e1ac  e5            3650   3746 ;empty directory segment indicator.
WRTPRT: DEFW    0                       ;e1ad  00 00         3651   3747 ;write protect status for all 16 drives.
LOGIN:  DEFW    0                       ;e1af  00 00         3652   3748 ;drive active word (1 bit per drive).
USERDMA:DEFW    080H                    ;e1b1  80 00         3653   3749 ;user's dma address (defaults to 80h).
                                        ;                    3654   3750 ;
                                        ;                    3655   3751 ;   Scratch areas from parameter block.
                                        ;                    3656   3752 ;
SCRATCH1: DEFW  0                       ;e1b3  00 00         3657   3753 ;relative position within dir segment for file (0-3).
SCRATCH2: DEFW  0                       ;e1b5  00 00         3658   3754 ;last selected track number.
SCRATCH3: DEFW  0                       ;e1b7  00 00         3659   3755 ;last selected sector number.
                                        ;                    3660   3756 ;
                                        ;                    3661   3757 ;   Disk storage areas from parameter block.
                                        ;                    3662   3758 ;
DIRBUF: DEFW    0                       ;e1b9  00 00         3663   3759 ;address of directory buffer to use.
DISKPB: DEFW    0                       ;e1bb  00 00         3664   3760 ;contains address of disk parameter block.
CHKVECT:DEFW    0                       ;e1bd  00 00         3665   3761 ;address of check vector.
ALOCVECT: DEFW  0                       ;e1bf  00 00         3666   3762 ;address of allocation vector (bit map).
                                        ;                    3667   3763 ;
                                        ;                    3668   3764 ;   Parameter block returned from the bios.
                                        ;                    3669   3765 ;
SECTORS:DEFW    0                       ;e1c1  00 00         3670   3766 ;sectors per track from bios.
BLKSHFT:DEFB    0                       ;e1c3  00            3671   3767 ;block shift.
BLKMASK:DEFB    0                       ;e1c4  00            3672   3768 ;block mask.
EXTMASK:DEFB    0                       ;e1c5  00            3673   3769 ;extent mask.
DSKSIZE:DEFW    0                       ;e1c6  00 00         3674   3770 ;disk size from bios (number of blocks-1).
DIRSIZE:DEFW    0                       ;e1c8  00 00         3675   3771 ;directory size.
ALLOC0: DEFW    0                       ;e1ca  00 00         3676   3772 ;storage for first bytes of bit map (dir space used).
ALLOC1: DEFW    0                       ;e1cc  00 00         3677   3773 
OFFSET: DEFW    0                       ;e1ce  00 00         3678   3774 ;first usable track number.
XLATE:  DEFW    0                       ;e1d0  00 00         3679   3775 ;sector translation table address.
                                        ;                    3680   3776 ;
                                        ;                    3681   3777 ;
CLOSEFLG: DEFB  0                       ;e1d2  00            3682   3778 ;close flag (=0ffh is extent written ok).
RDWRTFLG: DEFB  0                       ;e1d3  00            3683   3779 ;read/write flag (0ffh=read, 0=write).
FNDSTAT:DEFB    0                       ;e1d4  00            3684   3780 ;filename found status (0=found first entry).
MODE:   DEFB    0                       ;e1d5  00            3685   3781 ;I/o mode select (0=random, 1=sequential, 2=special random).
EPARAM: DEFB    0                       ;e1d6  00            3686   3782 ;storage for register (E) on entry to bdos.
RELBLOCK: DEFB  0                       ;e1d7  00            3687   3783 ;relative position within fcb of block number written.
COUNTER:DEFB    0                       ;e1d8  00            3688   3784 ;byte counter for directory name searches.
SAVEFCB:DEFW    0,0                     ;e1d9  00 00 00 00   3689   3785 ;save space for address of fcb (for directory searches).
BIGDISK:DEFB    0                       ;e1dd  00            3690   3786 ;if =0 then disk is > 256 blocks long.
AUTO:   DEFB    0                       ;e1de  00            3691   3787 ;if non-zero, then auto select activated.
OLDDRV: DEFB    0                       ;e1df  00            3692   3788 ;on auto select, storage for previous drive.
AUTOFLAG: DEFB  0                       ;e1e0  00            3693   3789 ;if non-zero, then auto select changed drives.
SAVNXT: DEFB    0                       ;e1e1  00            3694   3790 ;storage for next record number to access.
SAVEXT: DEFB    0                       ;e1e2  00            3695   3791 ;storage for extent number of file.
SAVNREC:DEFW    0                       ;e1e3  00 00         3696   3792 ;storage for number of records in file.
BLKNMBR:DEFW    0                       ;e1e5  00 00         3697   3793 ;block number (physical sector) used within a file or logical sect
LOGSECT:DEFW    0                       ;e1e7  00 00         3698   3794 ;starting logical (128 byte) sector of block (physical sector).
FCBPOS: DEFB    0                       ;e1e9  00            3699   3795 ;relative position within buffer for fcb of file of interest.
FILEPOS:DEFW    0                       ;e1ea  00 00         3700   3796 ;files position within directory (0 to max entries -1).
                                        ;                    3701   3797 ;
                                        ;                    3702   3798 ;   Disk directory buffer checksum bytes. One for each of the
                                        ;                    3703   3799 ; 16 possible drives.
                                        ;                    3704   3800 ;
CKSUMTBL: DEFB  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;e1ec  00 00 00 00   3705   3801 
                                        ;e1f0  00 00 00 00   3705   3802
                                        ;e1f4  00 00 00 00   3705   3803
                                        ;e1f8  00 00 00 00   3705   3804
                                        ;                    3706   3805 ;
                                        ;                    3707   3806 ;   Extra space ?
                                        ;                    3708   3807 ;
    DEFB    0,0,0,0                     ;e1fc  00 00 00 00   3709   3808 
                                        ;                    3710   3809 ;
                                        ;                    3711   3810 ;**************************************************************
                                        ;                    3712   3811 ;*
                                        ;                    3713   3812 ;*        B I O S   J U M P   T A B L E
                                        ;                    3714   3813 ;*
                                        ;                    3715   3814 ;**************************************************************
                                        ;                    3716   3815 ;
BOOT:   JP  0                           ;e200  c3 00 00      3717   3816 ;NOTE WE USE FAKE DESTINATIONS
WBOOT:  JP  0                           ;e203  c3 00 00      3718   3817 
CONST:  JP  0                           ;e206  c3 00 00      3719   3818 
CONIN:  JP  0                           ;e209  c3 00 00      3720   3819 
CONOUT: JP  0                           ;e20c  c3 00 00      3721   3820 
LIST:   JP  0                           ;e20f  c3 00 00      3722   3821 
PUNCH:  JP  0                           ;e212  c3 00 00      3723   3822 
READER: JP  0                           ;e215  c3 00 00      3724   3823 
HOME:   JP  0                           ;e218  c3 00 00      3725   3824 
SELDSK: JP  0                           ;e21b  c3 00 00      3726   3825 
SETTRK: JP  0                           ;e21e  c3 00 00      3727   3826 
SETSEC: JP  0                           ;e221  c3 00 00      3728   3827 
SETDMA: JP  0                           ;e224  c3 00 00      3729   3828 
READ:   JP  0                           ;e227  c3 00 00      3730   3829 
WRITE:  JP  0                           ;e22a  c3 00 00      3731   3830 
PRSTAT: JP  0                           ;e22d  c3 00 00      3732   3831 
SECTRN: JP  0                           ;e230  c3 00 00      3733   3832 
                                        ;                    3734   3833 ;
                                        ;                    3735   3834 ;*
                                        ;                    3736   3835 ;******************   E N D   O F   C P / M   *****************
                                        ;                    3737   3836 ;*
                                        ;                    3738   3837 
;Z80-Assembler		Release 1.6				Page 2
;Source file: spc-1000_cpm22.asm
;Title:       Symboltable

IOBYTE   0003	CNTRLC   0003	TDRIVE   0004	CNTRLE   0005	
ENTRY    0005	NUMCMDS  0006	BS       0008	TAB      0009	
LF       000a	FF       000c	CR       000d	CNTRLP   0010	
CNTRLR   0012	CNTRLS   0013	CNTRLU   0015	CNTRLX   0018	
CNTRLZ   001a	NFUNCTS  0029	MEM      003a	TFCB     005c	
DEL      007f	TBUFF    0080	TBASE    0100	CBASE    cc00	
INBUFF   cc06	INPOINT  cc88	NAMEPNT  cc8a	PRINT    cc8c	
PRINTB   cc92	CRLF     cc98	SPACE    cca2	PLINE    cca7	
PLINE2   ccac	RESDSK   ccb8	DSKSEL   ccbd	ENTRY1   ccc3	
OPEN     cccb	OPENFCB  ccd0	CLOSE    ccda	SRCHFST  ccdf	
SRCHNXT  cce4	SRCHFCB  cce9	DELETE   ccef	ENTRY2   ccf4	
RDREC    ccf9	READFCB  ccfe	WRTREC   cd04	CREATE   cd09	
RENAM    cd0e	GETUSR   cd13	GETSETUC cd15	SETCDRV  cd1a	
MOVECD   cd29	UPPER    cd30	GETINP   cd39	GETINP1  cd96	
GETINP2  cda7	GETINP3  cdab	GETINP4  cdba	CHKCON   cdc2	
GETDSK   cdd0	STDDMA   cdd5	DMASET   cdd8	DELBATCH cddd	
VERIFY   cdf5	VERIFY1  cdfd	SYNERR   ce09	SYNERR1  ce0f	
SYNERR2  ce22	CHECK    ce30	NONBLANK ce4f	ADDHL    ce59	
CONVFST  ce5e	CONVERT  ce60	CONVRT1  ce89	CONVRT2  ce90	
CONVRT3  ce96	CONVRT4  ce98	CONVRT5  cea9	CONVRT6  ceab	
CONVRT7  ceaf	CONVRT8  ceb9	GETEXT   cec0	GETEXT1  cec8	
GETEXT2  ced9	GETEXT3  cedb	GETEXT4  cedf	GETEXT5  cee9	
GETEXT6  cef0	GETEXT7  cef2	GETEXT8  cf01	GETEXT9  cf09	
CMDTBL   cf10	PATTRN1  cf28	SEARCH   cf2e	SEARCH1  cf33	
SEARCH2  cf3c	SEARCH3  cf4f	SEARCH4  cf54	CLEARBUF cf58	
COMMAND  cf5c	CMMND1   cf82	CMMND2   cf98	CMDADR   cfc1	
HALT     cfcf	RDERROR  cfd9	RDERR    cfdf	NONE     cfea	
NOFILE   cff0	DECODE   cff8	DECODE1  d008	DECODE2  d02a	
DECODE3  d033	DECODE4  d03a	MOVE3    d040	HL2DE    d042	
EXTRACT  d04b	DSELECT  d054	RESETDR  d066	DIRECT   d077	
DIRECT1  d088	DIRECT2  d08f	DIRECT3  d098	DIRECT4  d0cc	
DIRECT5  d0d4	DIRECT6  d0d9	DRECT63  d0f7	DRECT65  d0f9	
DIRECT7  d10e	DIRECT8  d10f	DIRECT9  d11b	ERASE    d11f	
ERASE1   d142	YESNO    d152	TYPE     d15d	TYPE1    d174	
TYPE2    d177	TYPE3    d187	TYPE4    d1a0	TYPE5    d1a7	
SAVE     d1ad	SAVE1    d1d4	SAVE2    d1f1	SAVE3    d1fb	
SAVE4    d201	NOSPACE  d207	RENAME   d210	RENAME1  d23f	
RENAME2  d259	RENAME3  d25e	RENAME4  d26d	RENAME5  d273	
RENAME6  d279	EXISTS   d282	USER     d28e	UNKNOWN  d2a5	
UNKWN1   d2c4	UNKWN2   d2cd	UNKWN3   d2e1	UNKWN4   d301	
UNKWN5   d330	UNKWN6   d33e	UNKWN7   d343	UNKWN8   d34f	
UNKWN9   d36b	UNKWN0   d371	BADLOAD  d37a	COMFILE  d383	
GETBACK  d386	GETBACK1 d389	BATCH    d3ab	CCPSTACK d3ab	
BATCHFCB d3ac	FCB      d3cd	RTNCODE  d3ee	CDRIVE   d3ef	
CHGDRV   d3f0	NBYTES   d3f1	PATTRN2  d400	FBASE    d406	
BADSCTR  d409	BADSLCT  d40b	RODISK   d40d	ROFILE   d40f	
FBASE1   d411	FUNCTNS  d447	ERROR1   d499	ERROR2   d4a5	
ERROR3   d4ab	ERROR4   d4b1	ERROR5   d4b4	BDOSERR  d4ba	
BDOSDRV  d4c6	BADSEC   d4ca	BADSEL   d4d5	FILERO   d4dc	
DISKRO   d4e1	PRTERR   d4e5	GETCHAR  d4fb	GETECHO  d506	
CHKCHAR  d514	CKCONSOL d523	CKCON1   d542	CKCON2   d545	
OUTCHAR  d548	OUTCHR1  d562	OUTCHR2  d579	SHOWIT   d57f	
OUTCON   d590	OUTCON1  d596	BACKUP   d5a4	BACKUP1  d5ac	
NEWLINE  d5b1	NEWLN1   d5b9	OUTCRLF  d5c9	PRTMESG  d5d3	
RDBUFF   d5e1	RDBUF1   d5ef	RDBUF2   d5f1	RDBUF3   d616	
RDBUF4   d626	RDBUF5   d637	RDBUF6   d648	RDBUF7   d64e	
RDBUF8   d65f	RDBUF9   d66b	RDBUF10  d670	RDBUF11  d678	
RDBUF12  d68a	RDBUF13  d699	RDBUF14  d6a6	RDBUF15  d6a9	
RDBUF16  d6bd	RDBUF17  d6c1	GETCON   d6c8	GETRDR   d6ce	
DIRCIO   d6d4	DIRC1    d6e0	GETIOB   d6ed	SETIOB   d6f3	
PRTSTR   d6f8	GETCSTS  d6fe	SETSTAT  d701	RTN      d704	
IOERR1   d705	OUTFLAG  d70a	STARTING d70b	CURPOS   d70c	
PRTFLAG  d70d	CHARBUF  d70e	USRSTACK d70f	STKAREA  d741	
USERNO   d741	ACTIVE   d742	PARAMS   d743	STATUS   d745	
SLCTERR  d747	JUMPHL   d74a	DE2HL    d74f	DE2HL1   d750	
SELECT   d759	SELECT1  d79d	HOMEDRV  d7a1	DOREAD   d7b2	
DOWRITE  d7b8	IORET    d7bb	TRKSEC   d7c3	TRKSEC1  d7d1	
TRKSEC2  d7e4	TRKSEC3  d7fa	TRKSEC4  d80f	GETBLOCK d83e	
GETBLK1  d845	GETBLK2  d853	GETBLK3  d85c	EXTBLK   d85e	
EXTBLK1  d871	COMBLK   d877	CHKBLK   d884	LOGICAL  d88a	
LOGICL1  d890	SETEXT   d8a6	SETHLDE  d8ae	STRDATA  d8bb	
SETNREC  d8d2	STNREC1  d8de	SHIFTR   d8ea	SHIFTR1  d8eb	
CHECKSUM d8f7	CHKSUM1  d8fd	SHIFTL   d904	SHIFTL1  d905	
SETBIT   d90b	GETWPRT  d91e	WRTPRTD  d92c	CHKROFL  d944	
CKROF1   d947	CHKWPRT  d954	FCB2HL   d95e	ADDA2HL  d964	
GETS2    d969	CLEARS2  d972	SETS2B7  d978	MOREFLS  d97f	
CHKNMBR  d98c	SUBHL    d995	SETDIR   d99c	CHECKDIR d99e	
CHKDIR1  d9c4	DIRWRITE d9c6	DIRREAD  d9d4	DEFDMA   d9da	
DIRDMA   d9e0	DIRDMA1  d9e3	MOVEDIR  d9e9	CKFILPOS d9f5	
STFILPOS d9fe	NXENTRY  da05	NXENT1   da19	NXENT2   da20	
CKBITMAP da35	CKBMAP1  da56	STBITMAP da5c	STBMAP1  da64	
SETFILE  da6b	SETFL1   da75	SETFL2   da88	SETFL3   da8e	
SETFL4   da9d	BITMAP   daa3	BITMAP1  dab1	BITMAP2  dad2	
BITMAP3  daf6	STSTATUS db01	SAMEXT   db07	FINDFST  db18	
FINDNXT  db2d	FNDNXT1  db4a	FNDNXT2  db53	FNDNXT3  db73	
FNDNXT4  db7c	FNDNXT5  db83	FNDNXT6  db94	ERAFILE  db9c	
ERAFIL1  dba4	FNDSPACE dbbe	FNDSPA1  dbc0	FNDSPA2  dbd1	
FNDSPA3  dbec	FNDSPA4  dbf4	FCBSET   dbfd	UPDATE   dc01	
UPDATE1  dc10	CHGNAMES dc16	CHGNAM1  dc27	SAVEATTR dc3b	
SAVATR1  dc40	OPENIT   dc51	OPENIT1  dc5a	OPENIT2  dc8b	
MOVEWORD dc94	CLOSEIT  dca2	CLOSEIT1 dccd	CLOSEIT2 dcdb	
CLOSEIT3 dce1	CLOSEIT4 dce8	CLOSEIT5 dcfd	CLOSEIT6 dd17	
CLOSEIT7 dd1f	GETEMPTY dd24	GETMT1   dd46	GETNEXT  dd5a	
GTNEXT1  dd83	GTNEXT2  dd8e	GTNEXT3  ddac	GTNEXT4  ddaf	
GTNEXT5  ddb6	RDSEQ    ddbc	RDSEQ1   ddc1	RDSEQ2   dde6	
RDSEQ3   ddfb	WTSEQ    ddfe	WTSEQ1   de03	WTSEQ2   de3b	
WTSEQ3   de48	WTSEQ4   de64	WTSEQ5   de6c	WTSEQ6   de6e	
WTSEQ7   de8c	WTSEQ8   de9a	WTSEQ9   debb	WTSEQ10  ded2	
WTSEQ99  dedf	WTSEQ11  defe	WTSEQ12  df00	POSITION df03	
POSITN1  df07	POSITN2  df47	POSITN3  df7f	POSITN4  df84	
POSITN5  df8b	READRAN  df93	WRITERAN df9c	COMPRAND dfa5	
RANSIZE  dfd2	RANSIZ1  dfe4	RANSIZ2  e006	RANSIZ3  e00c	
SETRAN   e00e	LOGINDRV e021	SETDSK   e045	AUTOSEL  e051	
AUTOSL1  e075	GETVER   e07e	RSTDSK   e083	OPENFIL  e09c	
CLOSEFIL e0a5	GETFST   e0ab	GETFST1  e0c2	GETNXT   e0c8	
DELFILE  e0d7	READSEQ  e0e0	WRTSEQ   e0e6	FCREATE  e0ec	
RENFILE  e0f5	GETLOG   e0fe	GETCRNT  e104	PUTDMA   e10a	
GETALOC  e111	GETROV   e117	SETATTR  e11d	GETPARM  e126	
GETPRM1  e129	GETUSER  e12d	SETUSER  e13b	RDRANDOM e141	
WTRANDOM e147	FILESIZE e14d	LOGOFF   e153	GOBACK   e174	
GOBACK1  e191	WTSPECL  e19b	EMPTYFCB e1ac	WRTPRT   e1ad	
LOGIN    e1af	USERDMA  e1b1	SCRATCH1 e1b3	SCRATCH2 e1b5	
SCRATCH3 e1b7	DIRBUF   e1b9	DISKPB   e1bb	CHKVECT  e1bd	
ALOCVECT e1bf	SECTORS  e1c1	BLKSHFT  e1c3	BLKMASK  e1c4	
EXTMASK  e1c5	DSKSIZE  e1c6	DIRSIZE  e1c8	ALLOC0   e1ca	
ALLOC1   e1cc	OFFSET   e1ce	XLATE    e1d0	CLOSEFLG e1d2	
RDWRTFLG e1d3	FNDSTAT  e1d4	MODE     e1d5	EPARAM   e1d6	
RELBLOCK e1d7	COUNTER  e1d8	SAVEFCB  e1d9	BIGDISK  e1dd	
AUTO     e1de	OLDDRV   e1df	AUTOFLAG e1e0	SAVNXT   e1e1	
SAVEXT   e1e2	SAVNREC  e1e3	BLKNMBR  e1e5	LOGSECT  e1e7	
FCBPOS   e1e9	FILEPOS  e1ea	CKSUMTBL e1ec	BOOT     e200	
WBOOT    e203	CONST    e206	CONIN    e209	CONOUT   e20c	
LIST     e20f	PUNCH    e212	READER   e215	HOME     e218	
SELDSK   e21b	SETTRK   e21e	SETSEC   e221	SETDMA   e224	
READ     e227	WRITE    e22a	PRSTAT   e22d	SECTRN   e230	


No undefined symbol.
