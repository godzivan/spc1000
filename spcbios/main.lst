                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.4.0 #8981 (Apr  5 2014) (MINGW64)
                              4 ; This file was generated Fri Jul 17 15:34:33 2015
                              5 ;--------------------------------------------------------
                              6 	.module main
                              7 	.optsdcc -mz80
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _dir
                             13 	.globl _main
                             14 	.globl _cas_save
                             15 	.globl _cas_load
                             16 	.globl _sd_format
                             17 	.globl _sd_read
                             18 	.globl _sd_write
                             19 	.globl _sd_init
                             20 	.globl _getchar
                             21 	.globl _printf
                             22 	.globl _data
                             23 	.globl _dsk2dsk
                             24 	.globl _cas2dsk
                             25 	.globl _dsk2cas
                             26 ;--------------------------------------------------------
                             27 ; special function registers
                             28 ;--------------------------------------------------------
                     0000    29 _ioport	=	0x0000
                             30 ;--------------------------------------------------------
                             31 ; ram data
                             32 ;--------------------------------------------------------
                             33 	.area _DATA
   0000                      34 _data::
   0000                      35 	.ds 4097
                             36 ;--------------------------------------------------------
                             37 ; ram data
                             38 ;--------------------------------------------------------
                             39 	.area _INITIALIZED
                             40 ;--------------------------------------------------------
                             41 ; absolute external ram data
                             42 ;--------------------------------------------------------
                             43 	.area _DABS (ABS)
                             44 ;--------------------------------------------------------
                             45 ; global & static initialisations
                             46 ;--------------------------------------------------------
                             47 	.area _HOME
                             48 	.area _GSINIT
                             49 	.area _GSFINAL
                             50 	.area _GSINIT
                             51 ;--------------------------------------------------------
                             52 ; Home
                             53 ;--------------------------------------------------------
                             54 	.area _HOME
                             55 	.area _HOME
                             56 ;--------------------------------------------------------
                             57 ; code
                             58 ;--------------------------------------------------------
                             59 	.area _CODE
                             60 ;main.c:10: void main(void)
                             61 ;	---------------------------------
                             62 ; Function main
                             63 ; ---------------------------------
   0000                      64 _main_start::
   0000                      65 _main:
                             66 ;main.c:13: printf("FDD check\n");
   0000 21r72r00      [10]   67 	ld	hl,#___str_0
   0003 E5            [11]   68 	push	hl
   0004 CDr00r00      [17]   69 	call	_printf
   0007 F1            [10]   70 	pop	af
                             71 ;main.c:14: sd_init();
   0008 CDr00r00      [17]   72 	call	_sd_init
                             73 ;main.c:15: printf("FDD initialized\n");
   000B 21r7Dr00      [10]   74 	ld	hl,#___str_1
   000E E5            [11]   75 	push	hl
   000F CDr00r00      [17]   76 	call	_printf
   0012 F1            [10]   77 	pop	af
                             78 ;main.c:16: while(1)
   0013                      79 00109$:
                             80 ;main.c:19: printf("Disk Utility v0.1\n0. dsk2dsk\n1. cas2dsk\n2. dsk2cas\n3. format disk A\n4. format disk B\n?");
   0013 21r8Er00      [10]   81 	ld	hl,#___str_2
   0016 E5            [11]   82 	push	hl
   0017 CDr00r00      [17]   83 	call	_printf
   001A F1            [10]   84 	pop	af
                             85 ;main.c:20: c = getchar();
   001B CDr00r00      [17]   86 	call	_getchar
                             87 ;main.c:21: printf("%c\n", c);
   001E 4D            [ 4]   88 	ld	c,l
   001F 06 00         [ 7]   89 	ld	b,#0x00
   0021 11rE5r00      [10]   90 	ld	de,#___str_3
   0024 E5            [11]   91 	push	hl
   0025 C5            [11]   92 	push	bc
   0026 D5            [11]   93 	push	de
   0027 CDr00r00      [17]   94 	call	_printf
   002A F1            [10]   95 	pop	af
   002B F1            [10]   96 	pop	af
   002C E1            [10]   97 	pop	hl
                             98 ;main.c:22: switch (c)
   002D 7D            [ 4]   99 	ld	a,l
   002E D6 30         [ 7]  100 	sub	a, #0x30
   0030 38 E1         [12]  101 	jr	C,00109$
   0032 3E 35         [ 7]  102 	ld	a,#0x35
   0034 95            [ 4]  103 	sub	a, l
   0035 38 DC         [12]  104 	jr	C,00109$
   0037 7D            [ 4]  105 	ld	a,l
   0038 C6 D0         [ 7]  106 	add	a,#0xD0
   003A 5F            [ 4]  107 	ld	e,a
   003B 16 00         [ 7]  108 	ld	d,#0x00
   003D 21r43r00      [10]  109 	ld	hl,#00125$
   0040 19            [11]  110 	add	hl,de
   0041 19            [11]  111 	add	hl,de
                            112 ;main.c:24: case '0':
   0042 E9            [ 4]  113 	jp	(hl)
   0043                     114 00125$:
   0043 18 0A         [12]  115 	jr	00101$
   0045 18 0D         [12]  116 	jr	00102$
   0047 18 10         [12]  117 	jr	00103$
   0049 18 13         [12]  118 	jr	00104$
   004B 18 1A         [12]  119 	jr	00105$
   004D 18 22         [12]  120 	jr	00106$
   004F                     121 00101$:
                            122 ;main.c:25: dsk2dsk();
   004F CDrE9r00      [17]  123 	call	_dsk2dsk
                            124 ;main.c:26: break;
   0052 18 BF         [12]  125 	jr	00109$
                            126 ;main.c:27: case '1':
   0054                     127 00102$:
                            128 ;main.c:28: cas2dsk();
   0054 CDr69r01      [17]  129 	call	_cas2dsk
                            130 ;main.c:29: break;
   0057 18 BA         [12]  131 	jr	00109$
                            132 ;main.c:30: case '2':
   0059                     133 00103$:
                            134 ;main.c:31: dsk2cas();
   0059 CDrF6r01      [17]  135 	call	_dsk2cas
                            136 ;main.c:32: break;
   005C 18 B5         [12]  137 	jr	00109$
                            138 ;main.c:33: case '3':
   005E                     139 00104$:
                            140 ;main.c:34: sd_format(0);
   005E AF            [ 4]  141 	xor	a, a
   005F F5            [11]  142 	push	af
   0060 33            [ 6]  143 	inc	sp
   0061 CDr00r00      [17]  144 	call	_sd_format
   0064 33            [ 6]  145 	inc	sp
                            146 ;main.c:35: break;
   0065 18 AC         [12]  147 	jr	00109$
                            148 ;main.c:36: case '4':
   0067                     149 00105$:
                            150 ;main.c:37: sd_format(1);
   0067 3E 01         [ 7]  151 	ld	a,#0x01
   0069 F5            [11]  152 	push	af
   006A 33            [ 6]  153 	inc	sp
   006B CDr00r00      [17]  154 	call	_sd_format
   006E 33            [ 6]  155 	inc	sp
                            156 ;main.c:38: break;
   006F 18 A2         [12]  157 	jr	00109$
                            158 ;main.c:39: case '5':
   0071                     159 00106$:
                            160 ;main.c:40: return;
                            161 ;main.c:41: }
   0071 C9            [10]  162 	ret
   0072                     163 _main_end::
   0072                     164 ___str_0:
   0072 46 44 44 20 63 68   165 	.ascii "FDD check"
        65 63 6B
   007B 0A                  166 	.db 0x0A
   007C 00                  167 	.db 0x00
   007D                     168 ___str_1:
   007D 46 44 44 20 69 6E   169 	.ascii "FDD initialized"
        69 74 69 61 6C 69
        7A 65 64
   008C 0A                  170 	.db 0x0A
   008D 00                  171 	.db 0x00
   008E                     172 ___str_2:
   008E 44 69 73 6B 20 55   173 	.ascii "Disk Utility v0.1"
        74 69 6C 69 74 79
        20 76 30 2E 31
   009F 0A                  174 	.db 0x0A
   00A0 30 2E 20 64 73 6B   175 	.ascii "0. dsk2dsk"
        32 64 73 6B
   00AA 0A                  176 	.db 0x0A
   00AB 31 2E 20 63 61 73   177 	.ascii "1. cas2dsk"
        32 64 73 6B
   00B5 0A                  178 	.db 0x0A
   00B6 32 2E 20 64 73 6B   179 	.ascii "2. dsk2cas"
        32 63 61 73
   00C0 0A                  180 	.db 0x0A
   00C1 33 2E 20 66 6F 72   181 	.ascii "3. format"
        6D 61 74
   00CA 20 64 69 73 6B 20   182 	.ascii " disk A"
        41
   00D1 0A                  183 	.db 0x0A
   00D2 34 2E 20 66 6F 72   184 	.ascii "4. format disk B"
        6D 61 74 20 64 69
        73 6B 20 42
   00E2 0A                  185 	.db 0x0A
   00E3 3F                  186 	.ascii "?"
   00E4 00                  187 	.db 0x00
   00E5                     188 ___str_3:
   00E5 25 63               189 	.ascii "%c"
   00E7 0A                  190 	.db 0x0A
   00E8 00                  191 	.db 0x00
                            192 ;main.c:44: void dsk2dsk()
                            193 ;	---------------------------------
                            194 ; Function dsk2dsk
                            195 ; ---------------------------------
   00E9                     196 _dsk2dsk_start::
   00E9                     197 _dsk2dsk:
                            198 ;main.c:47: for(t = 0; t < 80; t++)
   00E9 1E 00         [ 7]  199 	ld	e,#0x00
   00EB                     200 00102$:
                            201 ;main.c:49: printf("FDD reading..track:%d\n", t);
   00EB 4B            [ 4]  202 	ld	c,e
   00EC 06 00         [ 7]  203 	ld	b,#0x00
   00EE 21r3Br01      [10]  204 	ld	hl,#___str_4
   00F1 C5            [11]  205 	push	bc
   00F2 D5            [11]  206 	push	de
   00F3 C5            [11]  207 	push	bc
   00F4 E5            [11]  208 	push	hl
   00F5 CDr00r00      [17]  209 	call	_printf
   00F8 F1            [10]  210 	pop	af
   00F9 F1            [10]  211 	pop	af
   00FA D1            [10]  212 	pop	de
   00FB C1            [10]  213 	pop	bc
                            214 ;main.c:50: sd_read(16,0,t,1,data);
   00FC 21r00r00      [10]  215 	ld	hl,#_data
   00FF C5            [11]  216 	push	bc
   0100 D5            [11]  217 	push	de
   0101 E5            [11]  218 	push	hl
   0102 16 01         [ 7]  219 	ld	d,#0x01
   0104 D5            [11]  220 	push	de
   0105 21 10 00      [10]  221 	ld	hl,#0x0010
   0108 E5            [11]  222 	push	hl
   0109 CDr00r00      [17]  223 	call	_sd_read
   010C 21 06 00      [10]  224 	ld	hl,#6
   010F 39            [11]  225 	add	hl,sp
   0110 F9            [ 6]  226 	ld	sp,hl
   0111 D1            [10]  227 	pop	de
   0112 C1            [10]  228 	pop	bc
                            229 ;main.c:51: printf("FDD writing..track:%d\n", t);
   0113 21r52r01      [10]  230 	ld	hl,#___str_5
   0116 D5            [11]  231 	push	de
   0117 C5            [11]  232 	push	bc
   0118 E5            [11]  233 	push	hl
   0119 CDr00r00      [17]  234 	call	_printf
   011C F1            [10]  235 	pop	af
   011D F1            [10]  236 	pop	af
   011E D1            [10]  237 	pop	de
                            238 ;main.c:52: sd_write(16,1,t,1,data);
   011F 21r00r00      [10]  239 	ld	hl,#_data
   0122 D5            [11]  240 	push	de
   0123 E5            [11]  241 	push	hl
   0124 16 01         [ 7]  242 	ld	d,#0x01
   0126 D5            [11]  243 	push	de
   0127 21 10 01      [10]  244 	ld	hl,#0x0110
   012A E5            [11]  245 	push	hl
   012B CDr00r00      [17]  246 	call	_sd_write
   012E 21 06 00      [10]  247 	ld	hl,#6
   0131 39            [11]  248 	add	hl,sp
   0132 F9            [ 6]  249 	ld	sp,hl
   0133 D1            [10]  250 	pop	de
                            251 ;main.c:47: for(t = 0; t < 80; t++)
   0134 1C            [ 4]  252 	inc	e
   0135 7B            [ 4]  253 	ld	a,e
   0136 D6 50         [ 7]  254 	sub	a, #0x50
   0138 38 B1         [12]  255 	jr	C,00102$
   013A C9            [10]  256 	ret
   013B                     257 _dsk2dsk_end::
   013B                     258 ___str_4:
   013B 46 44 44 20 72 65   259 	.ascii "FDD reading..track:%d"
        61 64 69 6E 67 2E
        2E 74 72 61 63 6B
        3A 25 64
   0150 0A                  260 	.db 0x0A
   0151 00                  261 	.db 0x00
   0152                     262 ___str_5:
   0152 46 44 44 20 77 72   263 	.ascii "FDD writing..track:%d"
        69 74 69 6E 67 2E
        2E 74 72 61 63 6B
        3A 25 64
   0167 0A                  264 	.db 0x0A
   0168 00                  265 	.db 0x00
                            266 ;main.c:55: void cas2dsk()
                            267 ;	---------------------------------
                            268 ; Function cas2dsk
                            269 ; ---------------------------------
   0169                     270 _cas2dsk_start::
   0169                     271 _cas2dsk:
                            272 ;main.c:58: for(t = 0; t < 80; t++)
   0169                     273 00102$:
                            274 ;main.c:60: printf("CAS loading..\n");
   0169 21rB8r01      [10]  275 	ld	hl,#___str_6
   016C E5            [11]  276 	push	hl
   016D CDr00r00      [17]  277 	call	_printf
   0170 F1            [10]  278 	pop	af
                            279 ;main.c:61: cas_load(data, 0x1001);
   0171 21r00r00      [10]  280 	ld	hl,#_data
   0174 01 01 10      [10]  281 	ld	bc,#0x1001
   0177 C5            [11]  282 	push	bc
   0178 E5            [11]  283 	push	hl
   0179 CDr00r00      [17]  284 	call	_cas_load
   017C F1            [10]  285 	pop	af
   017D F1            [10]  286 	pop	af
                            287 ;main.c:62: t = data[0x1000];
   017E 21r00r10      [10]  288 	ld	hl, #_data + 4096
   0181 56            [ 7]  289 	ld	d,(hl)
                            290 ;main.c:63: printf("FDD writing..track:%d\n", t);
   0182 4A            [ 4]  291 	ld	c,d
   0183 06 00         [ 7]  292 	ld	b,#0x00
   0185 21rC7r01      [10]  293 	ld	hl,#___str_7
   0188 D5            [11]  294 	push	de
   0189 C5            [11]  295 	push	bc
   018A E5            [11]  296 	push	hl
   018B CDr00r00      [17]  297 	call	_printf
   018E F1            [10]  298 	pop	af
   018F F1            [10]  299 	pop	af
   0190 D1            [10]  300 	pop	de
                            301 ;main.c:64: sd_write(16,0,t,1,data);
   0191 21r00r00      [10]  302 	ld	hl,#_data
   0194 D5            [11]  303 	push	de
   0195 E5            [11]  304 	push	hl
   0196 3E 01         [ 7]  305 	ld	a,#0x01
   0198 F5            [11]  306 	push	af
   0199 33            [ 6]  307 	inc	sp
   019A D5            [11]  308 	push	de
   019B 33            [ 6]  309 	inc	sp
   019C 21 10 00      [10]  310 	ld	hl,#0x0010
   019F E5            [11]  311 	push	hl
   01A0 CDr00r00      [17]  312 	call	_sd_write
   01A3 21 06 00      [10]  313 	ld	hl,#6
   01A6 39            [11]  314 	add	hl,sp
   01A7 F9            [ 6]  315 	ld	sp,hl
   01A8 D1            [10]  316 	pop	de
                            317 ;main.c:58: for(t = 0; t < 80; t++)
   01A9 14            [ 4]  318 	inc	d
   01AA 7A            [ 4]  319 	ld	a,d
   01AB D6 50         [ 7]  320 	sub	a, #0x50
   01AD 38 BA         [12]  321 	jr	C,00102$
                            322 ;main.c:66: printf("FDD transfer completed\n");
   01AF 21rDEr01      [10]  323 	ld	hl,#___str_8
   01B2 E5            [11]  324 	push	hl
   01B3 CDr00r00      [17]  325 	call	_printf
   01B6 F1            [10]  326 	pop	af
   01B7 C9            [10]  327 	ret
   01B8                     328 _cas2dsk_end::
   01B8                     329 ___str_6:
   01B8 43 41 53 20 6C 6F   330 	.ascii "CAS loading.."
        61 64 69 6E 67 2E
        2E
   01C5 0A                  331 	.db 0x0A
   01C6 00                  332 	.db 0x00
   01C7                     333 ___str_7:
   01C7 46 44 44 20 77 72   334 	.ascii "FDD writing..track:%d"
        69 74 69 6E 67 2E
        2E 74 72 61 63 6B
        3A 25 64
   01DC 0A                  335 	.db 0x0A
   01DD 00                  336 	.db 0x00
   01DE                     337 ___str_8:
   01DE 46 44 44 20 74 72   338 	.ascii "FDD transfer completed"
        61 6E 73 66 65 72
        20 63 6F 6D 70 6C
        65 74 65 64
   01F4 0A                  339 	.db 0x0A
   01F5 00                  340 	.db 0x00
                            341 ;main.c:69: void dsk2cas()
                            342 ;	---------------------------------
                            343 ; Function dsk2cas
                            344 ; ---------------------------------
   01F6                     345 _dsk2cas_start::
   01F6                     346 _dsk2cas:
                            347 ;main.c:72: for(t = 0; t < 80; t++)
   01F6 1E 00         [ 7]  348 	ld	e,#0x00
   01F8                     349 00102$:
                            350 ;main.c:74: printf("FDD reading..track:%d\n", t);
   01F8 4B            [ 4]  351 	ld	c,e
   01F9 06 00         [ 7]  352 	ld	b,#0x00
   01FB 21r4Er02      [10]  353 	ld	hl,#___str_9
   01FE C5            [11]  354 	push	bc
   01FF D5            [11]  355 	push	de
   0200 C5            [11]  356 	push	bc
   0201 E5            [11]  357 	push	hl
   0202 CDr00r00      [17]  358 	call	_printf
   0205 F1            [10]  359 	pop	af
   0206 F1            [10]  360 	pop	af
   0207 D1            [10]  361 	pop	de
   0208 C1            [10]  362 	pop	bc
                            363 ;main.c:75: sd_read(16,0,t,1,data);
   0209 21r00r00      [10]  364 	ld	hl,#_data
   020C C5            [11]  365 	push	bc
   020D D5            [11]  366 	push	de
   020E E5            [11]  367 	push	hl
   020F 16 01         [ 7]  368 	ld	d,#0x01
   0211 D5            [11]  369 	push	de
   0212 21 10 00      [10]  370 	ld	hl,#0x0010
   0215 E5            [11]  371 	push	hl
   0216 CDr00r00      [17]  372 	call	_sd_read
   0219 21 06 00      [10]  373 	ld	hl,#6
   021C 39            [11]  374 	add	hl,sp
   021D F9            [ 6]  375 	ld	sp,hl
   021E D1            [10]  376 	pop	de
   021F C1            [10]  377 	pop	bc
                            378 ;main.c:76: printf("CAS recording..track:%d\n", t);
   0220 21r65r02      [10]  379 	ld	hl,#___str_10
   0223 D5            [11]  380 	push	de
   0224 C5            [11]  381 	push	bc
   0225 E5            [11]  382 	push	hl
   0226 CDr00r00      [17]  383 	call	_printf
   0229 F1            [10]  384 	pop	af
   022A F1            [10]  385 	pop	af
   022B D1            [10]  386 	pop	de
                            387 ;main.c:77: data[0x1000] = t;
   022C 21r00r10      [10]  388 	ld	hl,#_data + 4096
   022F 73            [ 7]  389 	ld	(hl),e
                            390 ;main.c:78: cas_save(data, 0x1001);
   0230 21r00r00      [10]  391 	ld	hl,#_data
   0233 D5            [11]  392 	push	de
   0234 01 01 10      [10]  393 	ld	bc,#0x1001
   0237 C5            [11]  394 	push	bc
   0238 E5            [11]  395 	push	hl
   0239 CDr00r00      [17]  396 	call	_cas_save
   023C F1            [10]  397 	pop	af
   023D F1            [10]  398 	pop	af
   023E D1            [10]  399 	pop	de
                            400 ;main.c:72: for(t = 0; t < 80; t++)
   023F 1C            [ 4]  401 	inc	e
   0240 7B            [ 4]  402 	ld	a,e
   0241 D6 50         [ 7]  403 	sub	a, #0x50
   0243 38 B3         [12]  404 	jr	C,00102$
                            405 ;main.c:80: printf("CAS recording completed\n");
   0245 21r7Er02      [10]  406 	ld	hl,#___str_11
   0248 E5            [11]  407 	push	hl
   0249 CDr00r00      [17]  408 	call	_printf
   024C F1            [10]  409 	pop	af
   024D C9            [10]  410 	ret
   024E                     411 _dsk2cas_end::
   024E                     412 ___str_9:
   024E 46 44 44 20 72 65   413 	.ascii "FDD reading..track:%d"
        61 64 69 6E 67 2E
        2E 74 72 61 63 6B
        3A 25 64
   0263 0A                  414 	.db 0x0A
   0264 00                  415 	.db 0x00
   0265                     416 ___str_10:
   0265 43 41 53 20 72 65   417 	.ascii "CAS recording..track:%d"
        63 6F 72 64 69 6E
        67 2E 2E 74 72 61
        63 6B 3A 25 64
   027C 0A                  418 	.db 0x0A
   027D 00                  419 	.db 0x00
   027E                     420 ___str_11:
   027E 43 41 53 20 72 65   421 	.ascii "CAS recording completed"
        63 6F 72 64 69 6E
        67 20 63 6F 6D 70
        6C 65 74 65 64
   0295 0A                  422 	.db 0x0A
   0296 00                  423 	.db 0x00
                            424 ;main.c:83: void dir(char *pp)
                            425 ;	---------------------------------
                            426 ; Function dir
                            427 ; ---------------------------------
   0297                     428 _dir_start::
   0297                     429 _dir:
   0297 DD E5         [15]  430 	push	ix
   0299 DD 21 00 00   [14]  431 	ld	ix,#0
   029D DD 39         [15]  432 	add	ix,sp
                            433 ;main.c:86: char *p = pp;
   029F DD 4E 04      [19]  434 	ld	c,4 (ix)
   02A2 DD 46 05      [19]  435 	ld	b,5 (ix)
                            436 ;main.c:88: while(*p != 0 || p < pp + 256)
   02A5 21 00 01      [10]  437 	ld	hl,#0x0100
   02A8 09            [11]  438 	add	hl,bc
   02A9 EB            [ 4]  439 	ex	de,hl
   02AA                     440 00102$:
   02AA 0A            [ 7]  441 	ld	a,(bc)
   02AB B7            [ 4]  442 	or	a, a
   02AC 20 06         [12]  443 	jr	NZ,00103$
   02AE 79            [ 4]  444 	ld	a,c
   02AF 93            [ 4]  445 	sub	a, e
   02B0 78            [ 4]  446 	ld	a,b
   02B1 9A            [ 4]  447 	sbc	a, d
   02B2 30 28         [12]  448 	jr	NC,00105$
   02B4                     449 00103$:
                            450 ;main.c:90: printf("%d.%s (%d)\n", i, p, *(p+15)*256);
   02B4 69            [ 4]  451 	ld	l, c
   02B5 60            [ 4]  452 	ld	h, b
   02B6 C5            [11]  453 	push	bc
   02B7 01 0F 00      [10]  454 	ld	bc, #0x000F
   02BA 09            [11]  455 	add	hl, bc
   02BB C1            [10]  456 	pop	bc
   02BC 7E            [ 7]  457 	ld	a,(hl)
   02BD 6F            [ 4]  458 	ld	l,a
   02BE 17            [ 4]  459 	rla
   02BF 9F            [ 4]  460 	sbc	a, a
   02C0 65            [ 4]  461 	ld	h,l
   02C1 2E 00         [ 7]  462 	ld	l,#0x00
   02C3 C5            [11]  463 	push	bc
   02C4 D5            [11]  464 	push	de
   02C5 E5            [11]  465 	push	hl
   02C6 C5            [11]  466 	push	bc
   02C7 21 01 00      [10]  467 	ld	hl,#0x0001
   02CA E5            [11]  468 	push	hl
   02CB 21rDFr02      [10]  469 	ld	hl,#___str_12
   02CE E5            [11]  470 	push	hl
   02CF CDr00r00      [17]  471 	call	_printf
   02D2 21 08 00      [10]  472 	ld	hl,#8
   02D5 39            [11]  473 	add	hl,sp
   02D6 F9            [ 6]  474 	ld	sp,hl
   02D7 D1            [10]  475 	pop	de
   02D8 C1            [10]  476 	pop	bc
                            477 ;main.c:91: p += 1;
   02D9 03            [ 6]  478 	inc	bc
   02DA 18 CE         [12]  479 	jr	00102$
   02DC                     480 00105$:
   02DC DD E1         [14]  481 	pop	ix
   02DE C9            [10]  482 	ret
   02DF                     483 _dir_end::
   02DF                     484 ___str_12:
   02DF 25 64 2E 25 73 20   485 	.ascii "%d.%s (%d)"
        28 25 64 29
   02E9 0A                  486 	.db 0x0A
   02EA 00                  487 	.db 0x00
                            488 	.area _CODE
                            489 	.area _INITIALIZER
                            490 	.area _CABS (ABS)
