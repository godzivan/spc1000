                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.4.0 #8981 (Apr  5 2014) (MINGW64)
                              4 ; This file was generated Tue Apr 14 22:25:18 2015
                              5 ;--------------------------------------------------------
                              6 	.module main
                              7 	.optsdcc -mz80
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _main
                             13 	.globl _cas_save
                             14 	.globl _cas_load
                             15 	.globl _sd_format
                             16 	.globl _sd_read
                             17 	.globl _sd_write
                             18 	.globl _sd_init
                             19 	.globl _getchar
                             20 	.globl _printf
                             21 	.globl _data
                             22 	.globl _dsk2dsk
                             23 	.globl _cas2dsk
                             24 	.globl _dsk2cas
                             25 ;--------------------------------------------------------
                             26 ; special function registers
                             27 ;--------------------------------------------------------
                     0000    28 _ioport	=	0x0000
                             29 ;--------------------------------------------------------
                             30 ; ram data
                             31 ;--------------------------------------------------------
                             32 	.area _DATA
   0000                      33 _data::
   0000                      34 	.ds 4097
                             35 ;--------------------------------------------------------
                             36 ; ram data
                             37 ;--------------------------------------------------------
                             38 	.area _INITIALIZED
                             39 ;--------------------------------------------------------
                             40 ; absolute external ram data
                             41 ;--------------------------------------------------------
                             42 	.area _DABS (ABS)
                             43 ;--------------------------------------------------------
                             44 ; global & static initialisations
                             45 ;--------------------------------------------------------
                             46 	.area _HOME
                             47 	.area _GSINIT
                             48 	.area _GSFINAL
                             49 	.area _GSINIT
                             50 ;--------------------------------------------------------
                             51 ; Home
                             52 ;--------------------------------------------------------
                             53 	.area _HOME
                             54 	.area _HOME
                             55 ;--------------------------------------------------------
                             56 ; code
                             57 ;--------------------------------------------------------
                             58 	.area _CODE
                             59 ;main.c:10: void main(void)
                             60 ;	---------------------------------
                             61 ; Function main
                             62 ; ---------------------------------
   0000                      63 _main_start::
   0000                      64 _main:
                             65 ;main.c:13: printf("FDD check\n");
   0000 21r72r00      [10]   66 	ld	hl,#___str_0
   0003 E5            [11]   67 	push	hl
   0004 CDr00r00      [17]   68 	call	_printf
   0007 F1            [10]   69 	pop	af
                             70 ;main.c:14: sd_init();
   0008 CDr00r00      [17]   71 	call	_sd_init
                             72 ;main.c:15: printf("FDD initialized\n");
   000B 21r7Dr00      [10]   73 	ld	hl,#___str_1
   000E E5            [11]   74 	push	hl
   000F CDr00r00      [17]   75 	call	_printf
   0012 F1            [10]   76 	pop	af
                             77 ;main.c:16: while(1)
   0013                      78 00109$:
                             79 ;main.c:19: printf("Disk Utility v0.1\n0. dsk2dsk\n1. cas2dsk\n2. dsk2cas\n3. format disk A\n4. format disk B\n?");
   0013 21r8Er00      [10]   80 	ld	hl,#___str_2
   0016 E5            [11]   81 	push	hl
   0017 CDr00r00      [17]   82 	call	_printf
   001A F1            [10]   83 	pop	af
                             84 ;main.c:20: c = getchar();
   001B CDr00r00      [17]   85 	call	_getchar
                             86 ;main.c:21: printf("%c\n", c);
   001E 4D            [ 4]   87 	ld	c,l
   001F 06 00         [ 7]   88 	ld	b,#0x00
   0021 11rE5r00      [10]   89 	ld	de,#___str_3
   0024 E5            [11]   90 	push	hl
   0025 C5            [11]   91 	push	bc
   0026 D5            [11]   92 	push	de
   0027 CDr00r00      [17]   93 	call	_printf
   002A F1            [10]   94 	pop	af
   002B F1            [10]   95 	pop	af
   002C E1            [10]   96 	pop	hl
                             97 ;main.c:22: switch (c)
   002D 7D            [ 4]   98 	ld	a,l
   002E D6 30         [ 7]   99 	sub	a, #0x30
   0030 38 E1         [12]  100 	jr	C,00109$
   0032 3E 35         [ 7]  101 	ld	a,#0x35
   0034 95            [ 4]  102 	sub	a, l
   0035 38 DC         [12]  103 	jr	C,00109$
   0037 7D            [ 4]  104 	ld	a,l
   0038 C6 D0         [ 7]  105 	add	a,#0xD0
   003A 5F            [ 4]  106 	ld	e,a
   003B 16 00         [ 7]  107 	ld	d,#0x00
   003D 21r43r00      [10]  108 	ld	hl,#00125$
   0040 19            [11]  109 	add	hl,de
   0041 19            [11]  110 	add	hl,de
                            111 ;main.c:24: case '0':
   0042 E9            [ 4]  112 	jp	(hl)
   0043                     113 00125$:
   0043 18 0A         [12]  114 	jr	00101$
   0045 18 0D         [12]  115 	jr	00102$
   0047 18 10         [12]  116 	jr	00103$
   0049 18 13         [12]  117 	jr	00104$
   004B 18 1A         [12]  118 	jr	00105$
   004D 18 22         [12]  119 	jr	00106$
   004F                     120 00101$:
                            121 ;main.c:25: dsk2dsk();
   004F CDrE9r00      [17]  122 	call	_dsk2dsk
                            123 ;main.c:26: break;
   0052 18 BF         [12]  124 	jr	00109$
                            125 ;main.c:27: case '1':
   0054                     126 00102$:
                            127 ;main.c:28: cas2dsk();
   0054 CDr69r01      [17]  128 	call	_cas2dsk
                            129 ;main.c:29: break;
   0057 18 BA         [12]  130 	jr	00109$
                            131 ;main.c:30: case '2':
   0059                     132 00103$:
                            133 ;main.c:31: dsk2cas();
   0059 CDrF6r01      [17]  134 	call	_dsk2cas
                            135 ;main.c:32: break;
   005C 18 B5         [12]  136 	jr	00109$
                            137 ;main.c:33: case '3':
   005E                     138 00104$:
                            139 ;main.c:34: sd_format(0);
   005E AF            [ 4]  140 	xor	a, a
   005F F5            [11]  141 	push	af
   0060 33            [ 6]  142 	inc	sp
   0061 CDr00r00      [17]  143 	call	_sd_format
   0064 33            [ 6]  144 	inc	sp
                            145 ;main.c:35: break;
   0065 18 AC         [12]  146 	jr	00109$
                            147 ;main.c:36: case '4':
   0067                     148 00105$:
                            149 ;main.c:37: sd_format(1);
   0067 3E 01         [ 7]  150 	ld	a,#0x01
   0069 F5            [11]  151 	push	af
   006A 33            [ 6]  152 	inc	sp
   006B CDr00r00      [17]  153 	call	_sd_format
   006E 33            [ 6]  154 	inc	sp
                            155 ;main.c:38: break;
   006F 18 A2         [12]  156 	jr	00109$
                            157 ;main.c:39: case '5':
   0071                     158 00106$:
                            159 ;main.c:40: return;
                            160 ;main.c:41: }
   0071 C9            [10]  161 	ret
   0072                     162 _main_end::
   0072                     163 ___str_0:
   0072 46 44 44 20 63 68   164 	.ascii "FDD check"
        65 63 6B
   007B 0A                  165 	.db 0x0A
   007C 00                  166 	.db 0x00
   007D                     167 ___str_1:
   007D 46 44 44 20 69 6E   168 	.ascii "FDD initialized"
        69 74 69 61 6C 69
        7A 65 64
   008C 0A                  169 	.db 0x0A
   008D 00                  170 	.db 0x00
   008E                     171 ___str_2:
   008E 44 69 73 6B 20 55   172 	.ascii "Disk Utility v0.1"
        74 69 6C 69 74 79
        20 76 30 2E 31
   009F 0A                  173 	.db 0x0A
   00A0 30 2E 20 64 73 6B   174 	.ascii "0. dsk2dsk"
        32 64 73 6B
   00AA 0A                  175 	.db 0x0A
   00AB 31 2E 20 63 61 73   176 	.ascii "1. cas2dsk"
        32 64 73 6B
   00B5 0A                  177 	.db 0x0A
   00B6 32 2E 20 64 73 6B   178 	.ascii "2. dsk2cas"
        32 63 61 73
   00C0 0A                  179 	.db 0x0A
   00C1 33 2E 20 66 6F 72   180 	.ascii "3. format"
        6D 61 74
   00CA 20 64 69 73 6B 20   181 	.ascii " disk A"
        41
   00D1 0A                  182 	.db 0x0A
   00D2 34 2E 20 66 6F 72   183 	.ascii "4. format disk B"
        6D 61 74 20 64 69
        73 6B 20 42
   00E2 0A                  184 	.db 0x0A
   00E3 3F                  185 	.ascii "?"
   00E4 00                  186 	.db 0x00
   00E5                     187 ___str_3:
   00E5 25 63               188 	.ascii "%c"
   00E7 0A                  189 	.db 0x0A
   00E8 00                  190 	.db 0x00
                            191 ;main.c:44: void dsk2dsk()
                            192 ;	---------------------------------
                            193 ; Function dsk2dsk
                            194 ; ---------------------------------
   00E9                     195 _dsk2dsk_start::
   00E9                     196 _dsk2dsk:
                            197 ;main.c:47: for(t = 0; t < 80; t++)
   00E9 1E 00         [ 7]  198 	ld	e,#0x00
   00EB                     199 00102$:
                            200 ;main.c:49: printf("FDD reading..track:%d\n", t);
   00EB 4B            [ 4]  201 	ld	c,e
   00EC 06 00         [ 7]  202 	ld	b,#0x00
   00EE 21r3Br01      [10]  203 	ld	hl,#___str_4
   00F1 C5            [11]  204 	push	bc
   00F2 D5            [11]  205 	push	de
   00F3 C5            [11]  206 	push	bc
   00F4 E5            [11]  207 	push	hl
   00F5 CDr00r00      [17]  208 	call	_printf
   00F8 F1            [10]  209 	pop	af
   00F9 F1            [10]  210 	pop	af
   00FA D1            [10]  211 	pop	de
   00FB C1            [10]  212 	pop	bc
                            213 ;main.c:50: sd_read(16,0,t,1,data);
   00FC 21r00r00      [10]  214 	ld	hl,#_data
   00FF C5            [11]  215 	push	bc
   0100 D5            [11]  216 	push	de
   0101 E5            [11]  217 	push	hl
   0102 16 01         [ 7]  218 	ld	d,#0x01
   0104 D5            [11]  219 	push	de
   0105 21 10 00      [10]  220 	ld	hl,#0x0010
   0108 E5            [11]  221 	push	hl
   0109 CDr00r00      [17]  222 	call	_sd_read
   010C 21 06 00      [10]  223 	ld	hl,#6
   010F 39            [11]  224 	add	hl,sp
   0110 F9            [ 6]  225 	ld	sp,hl
   0111 D1            [10]  226 	pop	de
   0112 C1            [10]  227 	pop	bc
                            228 ;main.c:51: printf("FDD writing..track:%d\n", t);
   0113 21r52r01      [10]  229 	ld	hl,#___str_5
   0116 D5            [11]  230 	push	de
   0117 C5            [11]  231 	push	bc
   0118 E5            [11]  232 	push	hl
   0119 CDr00r00      [17]  233 	call	_printf
   011C F1            [10]  234 	pop	af
   011D F1            [10]  235 	pop	af
   011E D1            [10]  236 	pop	de
                            237 ;main.c:52: sd_write(16,1,t,1,data);
   011F 21r00r00      [10]  238 	ld	hl,#_data
   0122 D5            [11]  239 	push	de
   0123 E5            [11]  240 	push	hl
   0124 16 01         [ 7]  241 	ld	d,#0x01
   0126 D5            [11]  242 	push	de
   0127 21 10 01      [10]  243 	ld	hl,#0x0110
   012A E5            [11]  244 	push	hl
   012B CDr00r00      [17]  245 	call	_sd_write
   012E 21 06 00      [10]  246 	ld	hl,#6
   0131 39            [11]  247 	add	hl,sp
   0132 F9            [ 6]  248 	ld	sp,hl
   0133 D1            [10]  249 	pop	de
                            250 ;main.c:47: for(t = 0; t < 80; t++)
   0134 1C            [ 4]  251 	inc	e
   0135 7B            [ 4]  252 	ld	a,e
   0136 D6 50         [ 7]  253 	sub	a, #0x50
   0138 38 B1         [12]  254 	jr	C,00102$
   013A C9            [10]  255 	ret
   013B                     256 _dsk2dsk_end::
   013B                     257 ___str_4:
   013B 46 44 44 20 72 65   258 	.ascii "FDD reading..track:%d"
        61 64 69 6E 67 2E
        2E 74 72 61 63 6B
        3A 25 64
   0150 0A                  259 	.db 0x0A
   0151 00                  260 	.db 0x00
   0152                     261 ___str_5:
   0152 46 44 44 20 77 72   262 	.ascii "FDD writing..track:%d"
        69 74 69 6E 67 2E
        2E 74 72 61 63 6B
        3A 25 64
   0167 0A                  263 	.db 0x0A
   0168 00                  264 	.db 0x00
                            265 ;main.c:55: void cas2dsk()
                            266 ;	---------------------------------
                            267 ; Function cas2dsk
                            268 ; ---------------------------------
   0169                     269 _cas2dsk_start::
   0169                     270 _cas2dsk:
                            271 ;main.c:58: for(t = 0; t < 80; t++)
   0169                     272 00102$:
                            273 ;main.c:60: printf("CAS loading..\n");
   0169 21rB8r01      [10]  274 	ld	hl,#___str_6
   016C E5            [11]  275 	push	hl
   016D CDr00r00      [17]  276 	call	_printf
   0170 F1            [10]  277 	pop	af
                            278 ;main.c:61: cas_load(data, 0x1001);
   0171 21r00r00      [10]  279 	ld	hl,#_data
   0174 01 01 10      [10]  280 	ld	bc,#0x1001
   0177 C5            [11]  281 	push	bc
   0178 E5            [11]  282 	push	hl
   0179 CDr00r00      [17]  283 	call	_cas_load
   017C F1            [10]  284 	pop	af
   017D F1            [10]  285 	pop	af
                            286 ;main.c:62: t = data[0x1000];
   017E 21r00r10      [10]  287 	ld	hl, #_data + 4096
   0181 56            [ 7]  288 	ld	d,(hl)
                            289 ;main.c:63: printf("FDD writing..track:%d\n", t);
   0182 4A            [ 4]  290 	ld	c,d
   0183 06 00         [ 7]  291 	ld	b,#0x00
   0185 21rC7r01      [10]  292 	ld	hl,#___str_7
   0188 D5            [11]  293 	push	de
   0189 C5            [11]  294 	push	bc
   018A E5            [11]  295 	push	hl
   018B CDr00r00      [17]  296 	call	_printf
   018E F1            [10]  297 	pop	af
   018F F1            [10]  298 	pop	af
   0190 D1            [10]  299 	pop	de
                            300 ;main.c:64: sd_write(16,0,t,1,data);
   0191 21r00r00      [10]  301 	ld	hl,#_data
   0194 D5            [11]  302 	push	de
   0195 E5            [11]  303 	push	hl
   0196 3E 01         [ 7]  304 	ld	a,#0x01
   0198 F5            [11]  305 	push	af
   0199 33            [ 6]  306 	inc	sp
   019A D5            [11]  307 	push	de
   019B 33            [ 6]  308 	inc	sp
   019C 21 10 00      [10]  309 	ld	hl,#0x0010
   019F E5            [11]  310 	push	hl
   01A0 CDr00r00      [17]  311 	call	_sd_write
   01A3 21 06 00      [10]  312 	ld	hl,#6
   01A6 39            [11]  313 	add	hl,sp
   01A7 F9            [ 6]  314 	ld	sp,hl
   01A8 D1            [10]  315 	pop	de
                            316 ;main.c:58: for(t = 0; t < 80; t++)
   01A9 14            [ 4]  317 	inc	d
   01AA 7A            [ 4]  318 	ld	a,d
   01AB D6 50         [ 7]  319 	sub	a, #0x50
   01AD 38 BA         [12]  320 	jr	C,00102$
                            321 ;main.c:66: printf("FDD transfer completed\n");
   01AF 21rDEr01      [10]  322 	ld	hl,#___str_8
   01B2 E5            [11]  323 	push	hl
   01B3 CDr00r00      [17]  324 	call	_printf
   01B6 F1            [10]  325 	pop	af
   01B7 C9            [10]  326 	ret
   01B8                     327 _cas2dsk_end::
   01B8                     328 ___str_6:
   01B8 43 41 53 20 6C 6F   329 	.ascii "CAS loading.."
        61 64 69 6E 67 2E
        2E
   01C5 0A                  330 	.db 0x0A
   01C6 00                  331 	.db 0x00
   01C7                     332 ___str_7:
   01C7 46 44 44 20 77 72   333 	.ascii "FDD writing..track:%d"
        69 74 69 6E 67 2E
        2E 74 72 61 63 6B
        3A 25 64
   01DC 0A                  334 	.db 0x0A
   01DD 00                  335 	.db 0x00
   01DE                     336 ___str_8:
   01DE 46 44 44 20 74 72   337 	.ascii "FDD transfer completed"
        61 6E 73 66 65 72
        20 63 6F 6D 70 6C
        65 74 65 64
   01F4 0A                  338 	.db 0x0A
   01F5 00                  339 	.db 0x00
                            340 ;main.c:69: void dsk2cas()
                            341 ;	---------------------------------
                            342 ; Function dsk2cas
                            343 ; ---------------------------------
   01F6                     344 _dsk2cas_start::
   01F6                     345 _dsk2cas:
                            346 ;main.c:72: for(t = 0; t < 80; t++)
   01F6 1E 00         [ 7]  347 	ld	e,#0x00
   01F8                     348 00102$:
                            349 ;main.c:74: printf("FDD reading..track:%d\n", t);
   01F8 4B            [ 4]  350 	ld	c,e
   01F9 06 00         [ 7]  351 	ld	b,#0x00
   01FB 21r4Er02      [10]  352 	ld	hl,#___str_9
   01FE C5            [11]  353 	push	bc
   01FF D5            [11]  354 	push	de
   0200 C5            [11]  355 	push	bc
   0201 E5            [11]  356 	push	hl
   0202 CDr00r00      [17]  357 	call	_printf
   0205 F1            [10]  358 	pop	af
   0206 F1            [10]  359 	pop	af
   0207 D1            [10]  360 	pop	de
   0208 C1            [10]  361 	pop	bc
                            362 ;main.c:75: sd_read(16,0,t,1,data);
   0209 21r00r00      [10]  363 	ld	hl,#_data
   020C C5            [11]  364 	push	bc
   020D D5            [11]  365 	push	de
   020E E5            [11]  366 	push	hl
   020F 16 01         [ 7]  367 	ld	d,#0x01
   0211 D5            [11]  368 	push	de
   0212 21 10 00      [10]  369 	ld	hl,#0x0010
   0215 E5            [11]  370 	push	hl
   0216 CDr00r00      [17]  371 	call	_sd_read
   0219 21 06 00      [10]  372 	ld	hl,#6
   021C 39            [11]  373 	add	hl,sp
   021D F9            [ 6]  374 	ld	sp,hl
   021E D1            [10]  375 	pop	de
   021F C1            [10]  376 	pop	bc
                            377 ;main.c:76: printf("CAS recording..track:%d\n", t);
   0220 21r65r02      [10]  378 	ld	hl,#___str_10
   0223 D5            [11]  379 	push	de
   0224 C5            [11]  380 	push	bc
   0225 E5            [11]  381 	push	hl
   0226 CDr00r00      [17]  382 	call	_printf
   0229 F1            [10]  383 	pop	af
   022A F1            [10]  384 	pop	af
   022B D1            [10]  385 	pop	de
                            386 ;main.c:77: data[0x1000] = t;
   022C 21r00r10      [10]  387 	ld	hl,#_data + 4096
   022F 73            [ 7]  388 	ld	(hl),e
                            389 ;main.c:78: cas_save(data, 0x1001);
   0230 21r00r00      [10]  390 	ld	hl,#_data
   0233 D5            [11]  391 	push	de
   0234 01 01 10      [10]  392 	ld	bc,#0x1001
   0237 C5            [11]  393 	push	bc
   0238 E5            [11]  394 	push	hl
   0239 CDr00r00      [17]  395 	call	_cas_save
   023C F1            [10]  396 	pop	af
   023D F1            [10]  397 	pop	af
   023E D1            [10]  398 	pop	de
                            399 ;main.c:72: for(t = 0; t < 80; t++)
   023F 1C            [ 4]  400 	inc	e
   0240 7B            [ 4]  401 	ld	a,e
   0241 D6 50         [ 7]  402 	sub	a, #0x50
   0243 38 B3         [12]  403 	jr	C,00102$
                            404 ;main.c:80: printf("CAS recording completed\n");
   0245 21r7Er02      [10]  405 	ld	hl,#___str_11
   0248 E5            [11]  406 	push	hl
   0249 CDr00r00      [17]  407 	call	_printf
   024C F1            [10]  408 	pop	af
   024D C9            [10]  409 	ret
   024E                     410 _dsk2cas_end::
   024E                     411 ___str_9:
   024E 46 44 44 20 72 65   412 	.ascii "FDD reading..track:%d"
        61 64 69 6E 67 2E
        2E 74 72 61 63 6B
        3A 25 64
   0263 0A                  413 	.db 0x0A
   0264 00                  414 	.db 0x00
   0265                     415 ___str_10:
   0265 43 41 53 20 72 65   416 	.ascii "CAS recording..track:%d"
        63 6F 72 64 69 6E
        67 2E 2E 74 72 61
        63 6B 3A 25 64
   027C 0A                  417 	.db 0x0A
   027D 00                  418 	.db 0x00
   027E                     419 ___str_11:
   027E 43 41 53 20 72 65   420 	.ascii "CAS recording completed"
        63 6F 72 64 69 6E
        67 20 63 6F 6D 70
        6C 65 74 65 64
   0295 0A                  421 	.db 0x0A
   0296 00                  422 	.db 0x00
                            423 	.area _CODE
                            424 	.area _INITIALIZER
                            425 	.area _CABS (ABS)
